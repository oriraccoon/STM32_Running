
0626_zero_mini_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800c8e0  0800c8e0  0000d8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cffc  0800cffc  0000f2c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cffc  0800cffc  0000dffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d004  0800d004  0000f2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d004  0800d004  0000e004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d008  0800d008  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0800d00c  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  200002c8  0800d2d4  0000f2c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800d2d4  0000f874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017569  00000000  00000000  0000f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004520  00000000  00000000  00026861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0002ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffd  00000000  00000000  0002c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaf6  00000000  00000000  0002d265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb9f  00000000  00000000  00047d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938fe  00000000  00000000  000668fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa1f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006754  00000000  00000000  000fa23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00100990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8c4 	.word	0x0800c8c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	0800c8c4 	.word	0x0800c8c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <MX_DMA_Init+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <MX_DMA_Init+0x3c>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <MX_DMA_Init+0x3c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200c      	movs	r0, #12
 8001058:	f003 f95b 	bl	8004312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800105c:	200c      	movs	r0, #12
 800105e:	f003 f974 	bl	800434a <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <MX_GPIO_Init+0x158>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a4e      	ldr	r2, [pc, #312]	@ (80011c8 <MX_GPIO_Init+0x158>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b4c      	ldr	r3, [pc, #304]	@ (80011c8 <MX_GPIO_Init+0x158>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a40      	ldr	r2, [pc, #256]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b3e      	ldr	r3, [pc, #248]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a39      	ldr	r2, [pc, #228]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <MX_GPIO_Init+0x158>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80010f6:	2200      	movs	r2, #0
 80010f8:	f240 1177 	movw	r1, #375	@ 0x177
 80010fc:	4833      	ldr	r0, [pc, #204]	@ (80011cc <MX_GPIO_Init+0x15c>)
 80010fe:	f003 fe57 	bl	8004db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001102:	2200      	movs	r2, #0
 8001104:	f641 0173 	movw	r1, #6259	@ 0x1873
 8001108:	4831      	ldr	r0, [pc, #196]	@ (80011d0 <MX_GPIO_Init+0x160>)
 800110a:	f003 fe51 	bl	8004db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800110e:	2200      	movs	r2, #0
 8001110:	f24f 0187 	movw	r1, #61575	@ 0xf087
 8001114:	482f      	ldr	r0, [pc, #188]	@ (80011d4 <MX_GPIO_Init+0x164>)
 8001116:	f003 fe4b 	bl	8004db0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC4
                           PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800111a:	f240 1377 	movw	r3, #375	@ 0x177
 800111e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4826      	ldr	r0, [pc, #152]	@ (80011cc <MX_GPIO_Init+0x15c>)
 8001134:	f003 fca0 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001138:	2308      	movs	r3, #8
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4820      	ldr	r0, [pc, #128]	@ (80011cc <MX_GPIO_Init+0x15c>)
 800114c:	f003 fc94 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001150:	f641 0373 	movw	r3, #6259	@ 0x1873
 8001154:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4819      	ldr	r0, [pc, #100]	@ (80011d0 <MX_GPIO_Init+0x160>)
 800116a:	f003 fc85 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 800116e:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <MX_GPIO_Init+0x160>)
 8001184:	f003 fc78 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001188:	f24f 0387 	movw	r3, #61575	@ 0xf087
 800118c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <MX_GPIO_Init+0x164>)
 80011a2:	f003 fc69 	bl	8004a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80011a6:	2328      	movs	r3, #40	@ 0x28
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_GPIO_Init+0x164>)
 80011ba:	f003 fc5d 	bl	8004a78 <HAL_GPIO_Init>

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400

080011d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011de:	4a13      	ldr	r2, [pc, #76]	@ (800122c <MX_I2C1_Init+0x54>)
 80011e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011e4:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <MX_I2C1_Init+0x58>)
 80011e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001214:	4804      	ldr	r0, [pc, #16]	@ (8001228 <MX_I2C1_Init+0x50>)
 8001216:	f003 fde5 	bl	8004de4 <HAL_I2C_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001220:	f000 f94e 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002e4 	.word	0x200002e4
 800122c:	40005400 	.word	0x40005400
 8001230:	000186a0 	.word	0x000186a0

08001234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a30      	ldr	r2, [pc, #192]	@ (8001314 <HAL_I2C_MspInit+0xe0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d159      	bne.n	800130a <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a2e      	ldr	r2, [pc, #184]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001272:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001284:	2304      	movs	r3, #4
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4823      	ldr	r0, [pc, #140]	@ (800131c <HAL_I2C_MspInit+0xe8>)
 8001290:	f003 fbf2 	bl	8004a78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 800129e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_I2C_MspInit+0xe4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <HAL_I2C_MspInit+0xf0>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012be:	2240      	movs	r2, #64	@ 0x40
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d0:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012ee:	480c      	ldr	r0, [pc, #48]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 80012f0:	f003 f846 	bl	8004380 <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80012fa:	f000 f8e1 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34
 8001304:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <HAL_I2C_MspInit+0xec>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400
 8001320:	20000338 	.word	0x20000338
 8001324:	40026028 	.word	0x40026028

08001328 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001330:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001334:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001340:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001344:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001348:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001350:	e000      	b.n	8001354 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001352:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001354:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f9      	beq.n	8001352 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800135e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len){
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++){
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e009      	b.n	800139c <_write+0x26>
		ITM_SendChar((*p++));
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ffc9 	bl	8001328 <ITM_SendChar>
	for(int i=0; i<len; i++){
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <_write+0x12>
	}
	return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b2:	f002 fe3d 	bl	8004030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f81b 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f7ff fe59 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 80013be:	f7ff fe37 	bl	8001030 <MX_DMA_Init>
  MX_TIM2_Init();
 80013c2:	f000 fa77 	bl	80018b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013c6:	f000 fd49 	bl	8001e5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013ca:	f7ff ff05 	bl	80011d8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80013ce:	f000 fabd 	bl	800194c <MX_TIM3_Init>
  MX_TIM1_Init();
 80013d2:	f000 f9cf 	bl	8001774 <MX_TIM1_Init>
  MX_TIM4_Init();
 80013d6:	f000 fb31 	bl	8001a3c <MX_TIM4_Init>
  MX_TIM5_Init();
 80013da:	f000 fb7d 	bl	8001ad8 <MX_TIM5_Init>
  MX_TIM11_Init();
 80013de:	f000 fbed 	bl	8001bbc <MX_TIM11_Init>
  MX_TIM10_Init();
 80013e2:	f000 fbc7 	bl	8001b74 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 80013e6:	f001 fef3 	bl	80031d0 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 80013ea:	f001 fed3 	bl	8003194 <ap_main>
 80013ee:	e7fc      	b.n	80013ea <main+0x3c>

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	@ 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	2230      	movs	r2, #48	@ 0x30
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fe85 	bl	800910e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <SystemClock_Config+0xc8>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <SystemClock_Config+0xc8>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <SystemClock_Config+0xc8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <SystemClock_Config+0xcc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <SystemClock_Config+0xcc>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <SystemClock_Config+0xcc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001460:	2304      	movs	r3, #4
 8001462:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001464:	2364      	movs	r3, #100	@ 0x64
 8001466:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800146c:	2304      	movs	r3, #4
 800146e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	4618      	mov	r0, r3
 8001476:	f004 f953 	bl	8005720 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001480:	f000 f81e 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2302      	movs	r3, #2
 800148a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2103      	movs	r1, #3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 fbb5 	bl	8005c10 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014ac:	f000 f808 	bl	80014c0 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	@ 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150a:	2007      	movs	r0, #7
 800150c:	f002 fef6 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f002 fdaf 	bl	80040d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <DMA1_Stream1_IRQHandler+0x10>)
 8001582:	f003 f83d 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000338 	.word	0x20000338

08001590 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001596:	f004 ff7b 	bl	8006490 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800159c:	f004 ff78 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000039c 	.word	0x2000039c
 80015a8:	20000504 	.word	0x20000504

080015ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <TIM2_IRQHandler+0x10>)
 80015b2:	f004 ff6d 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003e4 	.word	0x200003e4

080015c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <TIM4_IRQHandler+0x10>)
 80015c6:	f004 ff63 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000474 	.word	0x20000474

080015d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <USART2_IRQHandler+0x10>)
 80015da:	f005 fea1 	bl	8007320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000594 	.word	0x20000594

080015e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <TIM5_IRQHandler+0x10>)
 80015ee:	f004 ff4f 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200004bc 	.word	0x200004bc

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_kill>:

int _kill(int pid, int sig)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001616:	f007 fdcd 	bl	80091b4 <__errno>
 800161a:	4603      	mov	r3, r0
 800161c:	2216      	movs	r2, #22
 800161e:	601a      	str	r2, [r3, #0]
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ffe7 	bl	800160c <_kill>
  while (1) {}    /* Make sure we hang here */
 800163e:	bf00      	nop
 8001640:	e7fd      	b.n	800163e <_exit+0x12>

08001642 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e00a      	b.n	800166a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001654:	f3af 8000 	nop.w
 8001658:	4601      	mov	r1, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	b2ca      	uxtb	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf0      	blt.n	8001654 <_read+0x12>
  }

  return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_close>:
  }
  return len;
}

int _close(int file)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a4:	605a      	str	r2, [r3, #4]
  return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_isatty>:

int _isatty(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f007 fd4e 	bl	80091b4 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20020000 	.word	0x20020000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000398 	.word	0x20000398
 800174c:	20000878 	.word	0x20000878

08001750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b096      	sub	sp, #88	@ 0x58
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
 80017a2:	615a      	str	r2, [r3, #20]
 80017a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2220      	movs	r2, #32
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 fcae 	bl	800910e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017b4:	4a3e      	ldr	r2, [pc, #248]	@ (80018b0 <MX_TIM1_Init+0x13c>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80017b8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017ba:	2263      	movs	r2, #99	@ 0x63
 80017bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017c6:	2263      	movs	r2, #99	@ 0x63
 80017c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d6:	4b35      	ldr	r3, [pc, #212]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017dc:	4833      	ldr	r0, [pc, #204]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017de:	f004 fc37 	bl	8006050 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017e8:	f7ff fe6a 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017f6:	4619      	mov	r1, r3
 80017f8:	482c      	ldr	r0, [pc, #176]	@ (80018ac <MX_TIM1_Init+0x138>)
 80017fa:	f004 fffb 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001804:	f7ff fe5c 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001808:	4828      	ldr	r0, [pc, #160]	@ (80018ac <MX_TIM1_Init+0x138>)
 800180a:	f004 fcd3 	bl	80061b4 <HAL_TIM_PWM_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001814:	f7ff fe54 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001820:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001824:	4619      	mov	r1, r3
 8001826:	4821      	ldr	r0, [pc, #132]	@ (80018ac <MX_TIM1_Init+0x138>)
 8001828:	f005 fba6 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001832:	f7ff fe45 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001836:	2360      	movs	r3, #96	@ 0x60
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 5000-1;
 800183a:	f241 3387 	movw	r3, #4999	@ 0x1387
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001858:	2204      	movs	r2, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4813      	ldr	r0, [pc, #76]	@ (80018ac <MX_TIM1_Init+0x138>)
 800185e:	f004 ff07 	bl	8006670 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001868:	f7ff fe2a 	bl	80014c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4807      	ldr	r0, [pc, #28]	@ (80018ac <MX_TIM1_Init+0x138>)
 8001890:	f005 fbe0 	bl	8007054 <HAL_TIMEx_ConfigBreakDeadTime>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800189a:	f7ff fe11 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800189e:	4803      	ldr	r0, [pc, #12]	@ (80018ac <MX_TIM1_Init+0x138>)
 80018a0:	f000 fa7a 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 80018a4:	bf00      	nop
 80018a6:	3758      	adds	r7, #88	@ 0x58
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000039c 	.word	0x2000039c
 80018b0:	40010000 	.word	0x40010000

080018b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018da:	2263      	movs	r2, #99	@ 0x63
 80018dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f8:	4813      	ldr	r0, [pc, #76]	@ (8001948 <MX_TIM2_Init+0x94>)
 80018fa:	f004 fba9 	bl	8006050 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001904:	f7ff fddc 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_TIM2_Init+0x94>)
 8001916:	f004 ff6d 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001920:	f7ff fdce 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_TIM2_Init+0x94>)
 8001932:	f005 fb21 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800193c:	f7ff fdc0 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200003e4 	.word	0x200003e4

0800194c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	@ 0x38
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]
 800197a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 800197e:	4a2e      	ldr	r2, [pc, #184]	@ (8001a38 <MX_TIM3_Init+0xec>)
 8001980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001982:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 8001984:	2263      	movs	r2, #99	@ 0x63
 8001986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800198e:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 8001990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 800199e:	2280      	movs	r2, #128	@ 0x80
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019a2:	4824      	ldr	r0, [pc, #144]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 80019a4:	f004 fb54 	bl	8006050 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ae:	f7ff fd87 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019bc:	4619      	mov	r1, r3
 80019be:	481d      	ldr	r0, [pc, #116]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 80019c0:	f004 ff18 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019ca:	f7ff fd79 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ce:	4819      	ldr	r0, [pc, #100]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 80019d0:	f004 fbf0 	bl	80061b4 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019da:	f7ff fd71 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4619      	mov	r1, r3
 80019ec:	4811      	ldr	r0, [pc, #68]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 80019ee:	f005 fac3 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019f8:	f7ff fd62 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	@ 0x60
 80019fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001a00:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	2200      	movs	r2, #0
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 8001a16:	f004 fe2b 	bl	8006670 <HAL_TIM_PWM_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a20:	f7ff fd4e 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a24:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <MX_TIM3_Init+0xe8>)
 8001a26:	f000 f9b7 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3738      	adds	r7, #56	@ 0x38
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000042c 	.word	0x2000042c
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	463b      	mov	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <MX_TIM4_Init+0x98>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a60:	2263      	movs	r2, #99	@ 0x63
 8001a62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a7e:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a80:	f004 fae6 	bl	8006050 <HAL_TIM_Base_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f7ff fd19 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001a9c:	f004 feaa 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001aa6:	f7ff fd0b 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <MX_TIM4_Init+0x94>)
 8001ab8:	f005 fa5e 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001ac2:	f7ff fcfd 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000474 	.word	0x20000474
 8001ad4:	40000800 	.word	0x40000800

08001ad8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001af6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b6c <MX_TIM5_Init+0x94>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001afc:	2263      	movs	r2, #99	@ 0x63
 8001afe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b08:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <MX_TIM5_Init+0x98>)
 8001b0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b18:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b1a:	f004 fa99 	bl	8006050 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001b24:	f7ff fccc 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b36:	f004 fe5d 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001b40:	f7ff fcbe 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_TIM5_Init+0x90>)
 8001b52:	f005 fa11 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8001b5c:	f7ff fcb0 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200004bc 	.word	0x200004bc
 8001b6c:	40000c00 	.word	0x40000c00
 8001b70:	0001869f 	.word	0x0001869f

08001b74 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <MX_TIM10_Init+0x44>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b80:	2263      	movs	r2, #99	@ 0x63
 8001b82:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 30000;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b8c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001b90:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_TIM10_Init+0x40>)
 8001ba0:	f004 fa56 	bl	8006050 <HAL_TIM_Base_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001baa:	f7ff fc89 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000504 	.word	0x20000504
 8001bb8:	40014400 	.word	0x40014400

08001bbc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <MX_TIM11_Init+0x44>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bc8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001bcc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bd6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001bda:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <MX_TIM11_Init+0x40>)
 8001bea:	f004 fa31 	bl	8006050 <HAL_TIM_Base_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001bf4:	f7ff fc64 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000054c 	.word	0x2000054c
 8001c00:	40014800 	.word	0x40014800

08001c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5a      	ldr	r2, [pc, #360]	@ (8001d7c <HAL_TIM_Base_MspInit+0x178>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d116      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a58      	ldr	r2, [pc, #352]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b56      	ldr	r3, [pc, #344]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2019      	movs	r0, #25
 8001c38:	f002 fb6b 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c3c:	2019      	movs	r0, #25
 8001c3e:	f002 fb84 	bl	800434a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001c42:	e096      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4c:	d116      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
 8001c52:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a4a      	ldr	r2, [pc, #296]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	201c      	movs	r0, #28
 8001c70:	f002 fb4f 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c74:	201c      	movs	r0, #28
 8001c76:	f002 fb68 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8001c7a:	e07a      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a40      	ldr	r2, [pc, #256]	@ (8001d84 <HAL_TIM_Base_MspInit+0x180>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b3a      	ldr	r3, [pc, #232]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
}
 8001ca2:	e066      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a37      	ldr	r2, [pc, #220]	@ (8001d88 <HAL_TIM_Base_MspInit+0x184>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d116      	bne.n	8001cdc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a32      	ldr	r2, [pc, #200]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201e      	movs	r0, #30
 8001cd0:	f002 fb1f 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd4:	201e      	movs	r0, #30
 8001cd6:	f002 fb38 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8001cda:	e04a      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d8c <HAL_TIM_Base_MspInit+0x188>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d116      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2032      	movs	r0, #50	@ 0x32
 8001d08:	f002 fb03 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d0c:	2032      	movs	r0, #50	@ 0x32
 8001d0e:	f002 fb1c 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8001d12:	e02e      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM10)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <HAL_TIM_Base_MspInit+0x18c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d116      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2019      	movs	r0, #25
 8001d40:	f002 fae7 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d44:	2019      	movs	r0, #25
 8001d46:	f002 fb00 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8001d4a:	e012      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM11)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_TIM_Base_MspInit+0x190>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10d      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_TIM_Base_MspInit+0x17c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	@ 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	40000c00 	.word	0x40000c00
 8001d90:	40014400 	.word	0x40014400
 8001d94:	40014800 	.word	0x40014800

08001d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a24      	ldr	r2, [pc, #144]	@ (8001e48 <HAL_TIM_MspPostInit+0xb0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d11f      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	@ (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001df4:	f002 fe40 	bl	8004a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df8:	e022      	b.n	8001e40 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <HAL_TIM_MspPostInit+0xbc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11d      	bne.n	8001e40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e20:	2310      	movs	r3, #16
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e30:	2302      	movs	r3, #2
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	@ (8001e58 <HAL_TIM_MspPostInit+0xc0>)
 8001e3c:	f002 fe1c 	bl	8004a78 <HAL_GPIO_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	@ 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40020400 	.word	0x40020400

08001e5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <MX_USART2_UART_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_USART2_UART_Init+0x4c>)
 8001e94:	f005 f944 	bl	8007120 <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f7ff fb0f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000594 	.word	0x20000594
 8001eac:	40004400 	.word	0x40004400

08001eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_UART_MspInit+0x94>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d133      	bne.n	8001f3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_UART_MspInit+0x98>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	4809      	ldr	r0, [pc, #36]	@ (8001f4c <HAL_UART_MspInit+0x9c>)
 8001f26:	f002 fda7 	bl	8004a78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2026      	movs	r0, #38	@ 0x26
 8001f30:	f002 f9ef 	bl	8004312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f34:	2026      	movs	r0, #38	@ 0x26
 8001f36:	f002 fa08 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	@ 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40004400 	.word	0x40004400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000

08001f50 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f54:	f7ff fbfc 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5a:	490d      	ldr	r1, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f70:	4c0a      	ldr	r4, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f007 f91f 	bl	80091c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff fa14 	bl	80013ae <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001f94:	0800d00c 	.word	0x0800d00c
  ldr r2, =_sbss
 8001f98:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001f9c:	20000874 	.word	0x20000874

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>

08001fa2 <Controller_Excute>:
		.song = 1
};


void Controller_Excute()
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
	Controller_Mode();
 8001fa6:	f000 f855 	bl	8002054 <Controller_Mode>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <Controller_OutData>:

// C2P
void Controller_OutData(C2P_Data *c2p_data)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	memcpy(c2p_data, &OutputData, sizeof(C2P_Data));
 8001fb8:	2228      	movs	r2, #40	@ 0x28
 8001fba:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <Controller_OutData+0x1c>)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f007 f926 	bl	800920e <memcpy>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <Controller_SetInputData>:



void Controller_SetInputData(inputData_TypeDef inputData)
{
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	b490      	push	{r4, r7}
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	f107 0408 	add.w	r4, r7, #8
 8001fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (inputData.id == LCD_MODE) {
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d103      	bne.n	8001fec <Controller_SetInputData+0x1c>
		controlData.id = LCD_MODE;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <Controller_SetInputData+0x7c>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e01a      	b.n	8002022 <Controller_SetInputData+0x52>
	}
	else if (inputData.id == RUN_STOP) {
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d103      	bne.n	8001ffa <Controller_SetInputData+0x2a>
		controlData.id = RUN_STOP;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <Controller_SetInputData+0x7c>)
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e013      	b.n	8002022 <Controller_SetInputData+0x52>
	}
	else if (inputData.id == SPEED) {
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d103      	bne.n	8002008 <Controller_SetInputData+0x38>
		controlData.id = SPEED;
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <Controller_SetInputData+0x7c>)
 8002002:	2204      	movs	r2, #4
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00c      	b.n	8002022 <Controller_SetInputData+0x52>
	}
	else if(inputData.id == ULTRA){
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d103      	bne.n	8002016 <Controller_SetInputData+0x46>
		controlData.id = ULTRA;
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <Controller_SetInputData+0x7c>)
 8002010:	2205      	movs	r2, #5
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e005      	b.n	8002022 <Controller_SetInputData+0x52>
	}
	else if(inputData.id == SONG){
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d102      	bne.n	8002022 <Controller_SetInputData+0x52>
		controlData.id = SONG;
 800201c:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <Controller_SetInputData+0x7c>)
 800201e:	2206      	movs	r2, #6
 8002020:	601a      	str	r2, [r3, #0]
	}
	OutputData.uartRxData = inputData.uart_data;
 8002022:	7f3a      	ldrb	r2, [r7, #28]
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <Controller_SetInputData+0x80>)
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	controlData.song_data = inputData.song_data;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4a07      	ldr	r2, [pc, #28]	@ (800204c <Controller_SetInputData+0x7c>)
 800202e:	6113      	str	r3, [r2, #16]
	controlData.ultra_data = inputData.ultra_data;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a06      	ldr	r2, [pc, #24]	@ (800204c <Controller_SetInputData+0x7c>)
 8002034:	6053      	str	r3, [r2, #4]
	controlData.lcd_data = inputData.lcd_data;
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4a04      	ldr	r2, [pc, #16]	@ (800204c <Controller_SetInputData+0x7c>)
 800203a:	6093      	str	r3, [r2, #8]
	controlData.speed_data = inputData.speed_data;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4a03      	ldr	r2, [pc, #12]	@ (800204c <Controller_SetInputData+0x7c>)
 8002040:	60d3      	str	r3, [r2, #12]
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bc90      	pop	{r4, r7}
 8002048:	b004      	add	sp, #16
 800204a:	4770      	bx	lr
 800204c:	200005e0 	.word	0x200005e0
 8002050:	20000008 	.word	0x20000008

08002054 <Controller_Mode>:

void Controller_Mode()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	Time_curr();
 8002058:	f000 f896 	bl	8002188 <Time_curr>
	if(OutputData.song != 3) prev_song = OutputData.song;
 800205c:	4b46      	ldr	r3, [pc, #280]	@ (8002178 <Controller_Mode+0x124>)
 800205e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002062:	2b03      	cmp	r3, #3
 8002064:	d005      	beq.n	8002072 <Controller_Mode+0x1e>
 8002066:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <Controller_Mode+0x124>)
 8002068:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800206c:	461a      	mov	r2, r3
 800206e:	4b43      	ldr	r3, [pc, #268]	@ (800217c <Controller_Mode+0x128>)
 8002070:	601a      	str	r2, [r3, #0]
//	// Ultra 수정부
	if ((controlData.ultra_data > 100) && OutputData.runstop != 0){
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <Controller_Mode+0x12c>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	dd0d      	ble.n	8002096 <Controller_Mode+0x42>
 800207a:	4b3f      	ldr	r3, [pc, #252]	@ (8002178 <Controller_Mode+0x124>)
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <Controller_Mode+0x42>
		OutputData.lcd_mode = WARNING;
 8002084:	4b3c      	ldr	r3, [pc, #240]	@ (8002178 <Controller_Mode+0x124>)
 8002086:	2204      	movs	r2, #4
 8002088:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		OutputData.song = 3;
 800208c:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <Controller_Mode+0x124>)
 800208e:	2203      	movs	r2, #3
 8002090:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		return;
 8002094:	e06e      	b.n	8002174 <Controller_Mode+0x120>
	}
	OutputData.song = prev_song;
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <Controller_Mode+0x128>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <Controller_Mode+0x124>)
 800209e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	switch(controlData.id)
 80020a2:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <Controller_Mode+0x12c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d863      	bhi.n	8002174 <Controller_Mode+0x120>
 80020ac:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <Controller_Mode+0x60>)
 80020ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b2:	bf00      	nop
 80020b4:	0800212b 	.word	0x0800212b
 80020b8:	080020cd 	.word	0x080020cd
 80020bc:	08002175 	.word	0x08002175
 80020c0:	08002139 	.word	0x08002139
 80020c4:	08002175 	.word	0x08002175
 80020c8:	08002155 	.word	0x08002155
	{
		case RUN_STOP:
			controlData.id = NO_CONTROL;
 80020cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002180 <Controller_Mode+0x12c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
			OutputData.runstop ^= 1;
 80020d2:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <Controller_Mode+0x124>)
 80020d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <Controller_Mode+0x124>)
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]
			if(OutputData.runstop == 0){
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <Controller_Mode+0x124>)
 80020e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <Controller_Mode+0xc6>
				OutputData.speed = 0;
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <Controller_Mode+0x124>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	731a      	strb	r2, [r3, #12]
				OutputData.lcd_mode = 0;
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <Controller_Mode+0x124>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				OutputData.calories = 0;
 80020fc:	491e      	ldr	r1, [pc, #120]	@ (8002178 <Controller_Mode+0x124>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c1 2306 	strd	r2, r3, [r1, #24]
				OutputData.distance = 0;
 800210a:	491b      	ldr	r1, [pc, #108]	@ (8002178 <Controller_Mode+0x124>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
			else {
				OutputData.speed = 1;
				OutputData.lcd_mode = 1;
			}
			break;
 8002118:	e02c      	b.n	8002174 <Controller_Mode+0x120>
				OutputData.speed = 1;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <Controller_Mode+0x124>)
 800211c:	2201      	movs	r2, #1
 800211e:	731a      	strb	r2, [r3, #12]
				OutputData.lcd_mode = 1;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <Controller_Mode+0x124>)
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			break;
 8002128:	e024      	b.n	8002174 <Controller_Mode+0x120>

		case LCD_MODE:
			OutputData.lcd_mode = controlData.lcd_data;
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <Controller_Mode+0x12c>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <Controller_Mode+0x124>)
 8002132:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			break;
 8002136:	e01d      	b.n	8002174 <Controller_Mode+0x120>

		case SPEED:
			OutputData.speed = controlData.speed_data;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <Controller_Mode+0x12c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <Controller_Mode+0x124>)
 8002140:	731a      	strb	r2, [r3, #12]
			OutputData.runstop = 1;
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <Controller_Mode+0x124>)
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2020 	strb.w	r2, [r3, #32]
			OutputData.lcd_mode = 2;
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <Controller_Mode+0x124>)
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			break;
 8002152:	e00f      	b.n	8002174 <Controller_Mode+0x120>

		case SONG:
			if(OutputData.runstop ==1){
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <Controller_Mode+0x124>)
 8002156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d109      	bne.n	8002172 <Controller_Mode+0x11e>
				OutputData.song = controlData.song_data;
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <Controller_Mode+0x12c>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <Controller_Mode+0x124>)
 8002166:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				OutputData.lcd_mode = 3;
 800216a:	4b03      	ldr	r3, [pc, #12]	@ (8002178 <Controller_Mode+0x124>)
 800216c:	2203      	movs	r2, #3
 800216e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
			break;
 8002172:	bf00      	nop
	}
}
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	200005dc 	.word	0x200005dc
 8002180:	200005e0 	.word	0x200005e0
 8002184:	00000000 	.word	0x00000000

08002188 <Time_curr>:


static uint8_t pre_sec = 0;

void Time_curr(){
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
	uint8_t met;
	OutputData.running_time = StopWatch_Excute();
 800218e:	4c4c      	ldr	r4, [pc, #304]	@ (80022c0 <Time_curr+0x138>)
 8002190:	463b      	mov	r3, r7
 8002192:	4618      	mov	r0, r3
 8002194:	f001 f8f8 	bl	8003388 <StopWatch_Excute>
 8002198:	1da3      	adds	r3, r4, #6
 800219a:	463a      	mov	r2, r7
 800219c:	6811      	ldr	r1, [r2, #0]
 800219e:	6019      	str	r1, [r3, #0]
 80021a0:	8892      	ldrh	r2, [r2, #4]
 80021a2:	809a      	strh	r2, [r3, #4]
	OutputData.current_time = TimeWatch_Excute();
 80021a4:	4c46      	ldr	r4, [pc, #280]	@ (80022c0 <Time_curr+0x138>)
 80021a6:	463b      	mov	r3, r7
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 f981 	bl	80034b0 <TimeWatch_Excute>
 80021ae:	4622      	mov	r2, r4
 80021b0:	463b      	mov	r3, r7
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	6010      	str	r0, [r2, #0]
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	8093      	strh	r3, [r2, #4]
	if(OutputData.running_time.sec != pre_sec){
 80021ba:	4b41      	ldr	r3, [pc, #260]	@ (80022c0 <Time_curr+0x138>)
 80021bc:	7a5a      	ldrb	r2, [r3, #9]
 80021be:	4b41      	ldr	r3, [pc, #260]	@ (80022c4 <Time_curr+0x13c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d01b      	beq.n	80021fe <Time_curr+0x76>
		OutputData.distance += 0.28*OutputData.speed;
 80021c6:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <Time_curr+0x138>)
 80021c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80021cc:	4b3c      	ldr	r3, [pc, #240]	@ (80022c0 <Time_curr+0x138>)
 80021ce:	7b1b      	ldrb	r3, [r3, #12]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9af 	bl	8000534 <__aeabi_i2d>
 80021d6:	a336      	add	r3, pc, #216	@ (adr r3, 80022b0 <Time_curr+0x128>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f858 	bl	800029c <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4933      	ldr	r1, [pc, #204]	@ (80022c0 <Time_curr+0x138>)
 80021f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		pre_sec = OutputData.running_time.sec;
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <Time_curr+0x138>)
 80021f8:	7a5a      	ldrb	r2, [r3, #9]
 80021fa:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <Time_curr+0x13c>)
 80021fc:	701a      	strb	r2, [r3, #0]
	}

	switch(OutputData.speed){
 80021fe:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <Time_curr+0x138>)
 8002200:	7b1b      	ldrb	r3, [r3, #12]
 8002202:	2b09      	cmp	r3, #9
 8002204:	d834      	bhi.n	8002270 <Time_curr+0xe8>
 8002206:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <Time_curr+0x84>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002235 	.word	0x08002235
 8002210:	0800223b 	.word	0x0800223b
 8002214:	08002241 	.word	0x08002241
 8002218:	08002247 	.word	0x08002247
 800221c:	0800224d 	.word	0x0800224d
 8002220:	08002253 	.word	0x08002253
 8002224:	08002259 	.word	0x08002259
 8002228:	0800225f 	.word	0x0800225f
 800222c:	08002265 	.word	0x08002265
 8002230:	0800226b 	.word	0x0800226b
	case 0:
		met = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
		break;
 8002238:	e01a      	b.n	8002270 <Time_curr+0xe8>
	case 1:
		met = 15;
 800223a:	230f      	movs	r3, #15
 800223c:	73fb      	strb	r3, [r7, #15]
		break;
 800223e:	e017      	b.n	8002270 <Time_curr+0xe8>
	case 2:
		met = 20;
 8002240:	2314      	movs	r3, #20
 8002242:	73fb      	strb	r3, [r7, #15]
		break;
 8002244:	e014      	b.n	8002270 <Time_curr+0xe8>
	case 3:
		met = 28;
 8002246:	231c      	movs	r3, #28
 8002248:	73fb      	strb	r3, [r7, #15]
		break;
 800224a:	e011      	b.n	8002270 <Time_curr+0xe8>
	case 4:
		met = 33;
 800224c:	2321      	movs	r3, #33	@ 0x21
 800224e:	73fb      	strb	r3, [r7, #15]
		break;
 8002250:	e00e      	b.n	8002270 <Time_curr+0xe8>
	case 5:
		met = 38;
 8002252:	2326      	movs	r3, #38	@ 0x26
 8002254:	73fb      	strb	r3, [r7, #15]
		break;
 8002256:	e00b      	b.n	8002270 <Time_curr+0xe8>
	case 6:
		met = 43;
 8002258:	232b      	movs	r3, #43	@ 0x2b
 800225a:	73fb      	strb	r3, [r7, #15]
		break;
 800225c:	e008      	b.n	8002270 <Time_curr+0xe8>
	case 7:
		met = 60;
 800225e:	233c      	movs	r3, #60	@ 0x3c
 8002260:	73fb      	strb	r3, [r7, #15]
		break;
 8002262:	e005      	b.n	8002270 <Time_curr+0xe8>
	case 8:
		met = 83;
 8002264:	2353      	movs	r3, #83	@ 0x53
 8002266:	73fb      	strb	r3, [r7, #15]
		break;
 8002268:	e002      	b.n	8002270 <Time_curr+0xe8>
	case 9:
		met = 98;
 800226a:	2362      	movs	r3, #98	@ 0x62
 800226c:	73fb      	strb	r3, [r7, #15]
		break;
 800226e:	bf00      	nop
	}
	OutputData.calories = met * 72 * OutputData.distance /10000;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f95a 	bl	8000534 <__aeabi_i2d>
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <Time_curr+0x138>)
 8002282:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002286:	f7fe f9bf 	bl	8000608 <__aeabi_dmul>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	a309      	add	r3, pc, #36	@ (adr r3, 80022b8 <Time_curr+0x130>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe fae0 	bl	800085c <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <Time_curr+0x138>)
 80022a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bdb0      	pop	{r4, r5, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	1eb851ec 	.word	0x1eb851ec
 80022b4:	3fd1eb85 	.word	0x3fd1eb85
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40c38800 	.word	0x40c38800
 80022c0:	20000008 	.word	0x20000008
 80022c4:	200005f8 	.word	0x200005f8

080022c8 <Listener_Init>:

static int flag = 0;

inputData_TypeDef inputData = { 0 };

void Listener_Init() {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	Button_Init(&hBtnLcdMode, GPIOB, GPIO_PIN_5);
 80022cc:	2220      	movs	r2, #32
 80022ce:	490f      	ldr	r1, [pc, #60]	@ (800230c <Listener_Init+0x44>)
 80022d0:	480f      	ldr	r0, [pc, #60]	@ (8002310 <Listener_Init+0x48>)
 80022d2:	f001 f8ff 	bl	80034d4 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 80022d6:	2208      	movs	r2, #8
 80022d8:	490c      	ldr	r1, [pc, #48]	@ (800230c <Listener_Init+0x44>)
 80022da:	480e      	ldr	r0, [pc, #56]	@ (8002314 <Listener_Init+0x4c>)
 80022dc:	f001 f8fa 	bl	80034d4 <Button_Init>
	Button_Init(&hBtnSpeedUp, GPIOA, GPIO_PIN_10);
 80022e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022e4:	490c      	ldr	r1, [pc, #48]	@ (8002318 <Listener_Init+0x50>)
 80022e6:	480d      	ldr	r0, [pc, #52]	@ (800231c <Listener_Init+0x54>)
 80022e8:	f001 f8f4 	bl	80034d4 <Button_Init>
	Button_Init(&hBtnSpeedDown, GPIOA, GPIO_PIN_7); // modify the pin number
 80022ec:	2280      	movs	r2, #128	@ 0x80
 80022ee:	490a      	ldr	r1, [pc, #40]	@ (8002318 <Listener_Init+0x50>)
 80022f0:	480b      	ldr	r0, [pc, #44]	@ (8002320 <Listener_Init+0x58>)
 80022f2:	f001 f8ef 	bl	80034d4 <Button_Init>

	Que_Init(&uartRxQue);
 80022f6:	480b      	ldr	r0, [pc, #44]	@ (8002324 <Listener_Init+0x5c>)
 80022f8:	f000 ff72 	bl	80031e0 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 80022fc:	2201      	movs	r2, #1
 80022fe:	490a      	ldr	r1, [pc, #40]	@ (8002328 <Listener_Init+0x60>)
 8002300:	480a      	ldr	r0, [pc, #40]	@ (800232c <Listener_Init+0x64>)
 8002302:	f004 ffe8 	bl	80072d6 <HAL_UART_Receive_IT>
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40020400 	.word	0x40020400
 8002310:	200006c0 	.word	0x200006c0
 8002314:	200006cc 	.word	0x200006cc
 8002318:	40020000 	.word	0x40020000
 800231c:	200006d8 	.word	0x200006d8
 8002320:	200006e4 	.word	0x200006e4
 8002324:	200005fc 	.word	0x200005fc
 8002328:	200005f9 	.word	0x200005f9
 800232c:	20000594 	.word	0x20000594

08002330 <Listener_Excute>:

void Listener_Excute() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8002334:	f000 f806 	bl	8002344 <Listener_CheckButton>
	Listener_CheckUart();
 8002338:	f000 f8be 	bl	80024b8 <Listener_CheckUart>
	Listener_CheckUltra();
 800233c:	f000 fa16 	bl	800276c <Listener_CheckUltra>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <Listener_CheckButton>:

void Listener_CheckButton() {
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af02      	add	r7, sp, #8
	static uint32_t prevChkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 800234a:	f001 fed7 	bl	80040fc <HAL_GetTick>
 800234e:	6078      	str	r0, [r7, #4]
	if (curTick - prevChkBtnTime < 80) {
 8002350:	4b52      	ldr	r3, [pc, #328]	@ (800249c <Listener_CheckButton+0x158>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b4f      	cmp	r3, #79	@ 0x4f
 800235a:	f240 809a 	bls.w	8002492 <Listener_CheckButton+0x14e>
		return;
	}
	prevChkBtnTime = curTick;
 800235e:	4a4f      	ldr	r2, [pc, #316]	@ (800249c <Listener_CheckButton+0x158>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]

	if (Button_GetState(&hBtnLcdMode) == ACT_RELEASED) {
 8002364:	484e      	ldr	r0, [pc, #312]	@ (80024a0 <Listener_CheckButton+0x15c>)
 8002366:	f001 f8cb 	bl	8003500 <Button_GetState>
 800236a:	4603      	mov	r3, r0
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <Listener_CheckButton+0x64>
		inputData.id = LCD_MODE;
 8002370:	4b4c      	ldr	r3, [pc, #304]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
		if (inputData.lcd_data >= 3) {
 8002376:	4b4b      	ldr	r3, [pc, #300]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b02      	cmp	r3, #2
 800237c:	dd03      	ble.n	8002386 <Listener_CheckButton+0x42>
			inputData.lcd_data = 1;
 800237e:	4b49      	ldr	r3, [pc, #292]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002380:	2201      	movs	r2, #1
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e004      	b.n	8002390 <Listener_CheckButton+0x4c>
		} else {
			inputData.lcd_data++;
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	3301      	adds	r3, #1
 800238c:	4a45      	ldr	r2, [pc, #276]	@ (80024a4 <Listener_CheckButton+0x160>)
 800238e:	6093      	str	r3, [r2, #8]
		}
		Controller_SetInputData(inputData);
 8002390:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002392:	466c      	mov	r4, sp
 8002394:	f103 0210 	add.w	r2, r3, #16
 8002398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800239c:	e884 0003 	stmia.w	r4, {r0, r1}
 80023a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023a2:	f7ff fe15 	bl	8001fd0 <Controller_SetInputData>
 80023a6:	e075      	b.n	8002494 <Listener_CheckButton+0x150>
	} else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 80023a8:	483f      	ldr	r0, [pc, #252]	@ (80024a8 <Listener_CheckButton+0x164>)
 80023aa:	f001 f8a9 	bl	8003500 <Button_GetState>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d122      	bne.n	80023fa <Listener_CheckButton+0xb6>
		inputData.id = RUN_STOP;
 80023b4:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <Listener_CheckButton+0x160>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
		toggleFlag ^= 1;
 80023ba:	4b3c      	ldr	r3, [pc, #240]	@ (80024ac <Listener_CheckButton+0x168>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <Listener_CheckButton+0x168>)
 80023c6:	701a      	strb	r2, [r3, #0]
		inputData.lcd_data = toggleFlag;
 80023c8:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <Listener_CheckButton+0x168>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <Listener_CheckButton+0x160>)
 80023d0:	609a      	str	r2, [r3, #8]
		inputData.speed_data = toggleFlag;
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <Listener_CheckButton+0x168>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <Listener_CheckButton+0x160>)
 80023da:	60da      	str	r2, [r3, #12]
		Controller_SetInputData(inputData);
 80023dc:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <Listener_CheckButton+0x160>)
 80023de:	466c      	mov	r4, sp
 80023e0:	f103 0210 	add.w	r2, r3, #16
 80023e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80023ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ee:	f7ff fdef 	bl	8001fd0 <Controller_SetInputData>
		inputData.id = NO_CONTROL;
 80023f2:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <Listener_CheckButton+0x160>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e04c      	b.n	8002494 <Listener_CheckButton+0x150>
	} else if (Button_GetState(&hBtnSpeedUp) == ACT_PUSHED) {
 80023fa:	482d      	ldr	r0, [pc, #180]	@ (80024b0 <Listener_CheckButton+0x16c>)
 80023fc:	f001 f880 	bl	8003500 <Button_GetState>
 8002400:	4603      	mov	r3, r0
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11f      	bne.n	8002446 <Listener_CheckButton+0x102>
		inputData.id = SPEED;
 8002406:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002408:	2204      	movs	r2, #4
 800240a:	601a      	str	r2, [r3, #0]
		if (inputData.lcd_data != 0) {
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <Listener_CheckButton+0x160>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <Listener_CheckButton+0xea>
			if (inputData.speed_data >= 9) {
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b08      	cmp	r3, #8
 800241a:	dd03      	ble.n	8002424 <Listener_CheckButton+0xe0>
				inputData.speed_data = 9;
 800241c:	4b21      	ldr	r3, [pc, #132]	@ (80024a4 <Listener_CheckButton+0x160>)
 800241e:	2209      	movs	r2, #9
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e004      	b.n	800242e <Listener_CheckButton+0xea>
			} else {
				inputData.speed_data++;
 8002424:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	3301      	adds	r3, #1
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <Listener_CheckButton+0x160>)
 800242c:	60d3      	str	r3, [r2, #12]
			}
		}
		Controller_SetInputData(inputData);
 800242e:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002430:	466c      	mov	r4, sp
 8002432:	f103 0210 	add.w	r2, r3, #16
 8002436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800243a:	e884 0003 	stmia.w	r4, {r0, r1}
 800243e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002440:	f7ff fdc6 	bl	8001fd0 <Controller_SetInputData>
 8002444:	e026      	b.n	8002494 <Listener_CheckButton+0x150>
	} else if (Button_GetState(&hBtnSpeedDown) == ACT_PUSHED) {
 8002446:	481b      	ldr	r0, [pc, #108]	@ (80024b4 <Listener_CheckButton+0x170>)
 8002448:	f001 f85a 	bl	8003500 <Button_GetState>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d120      	bne.n	8002494 <Listener_CheckButton+0x150>
		inputData.id = SPEED;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002454:	2204      	movs	r2, #4
 8002456:	601a      	str	r2, [r3, #0]
		if (inputData.lcd_data != 0) {
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <Listener_CheckButton+0x160>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <Listener_CheckButton+0x136>
			if (inputData.speed_data == 1) {
 8002460:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d103      	bne.n	8002470 <Listener_CheckButton+0x12c>
				inputData.speed_data = 1;
 8002468:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <Listener_CheckButton+0x160>)
 800246a:	2201      	movs	r2, #1
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	e004      	b.n	800247a <Listener_CheckButton+0x136>
			} else {
				inputData.speed_data--;
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a0b      	ldr	r2, [pc, #44]	@ (80024a4 <Listener_CheckButton+0x160>)
 8002478:	60d3      	str	r3, [r2, #12]
			}
		}
		Controller_SetInputData(inputData);
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <Listener_CheckButton+0x160>)
 800247c:	466c      	mov	r4, sp
 800247e:	f103 0210 	add.w	r2, r3, #16
 8002482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002486:	e884 0003 	stmia.w	r4, {r0, r1}
 800248a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248c:	f7ff fda0 	bl	8001fd0 <Controller_SetInputData>
 8002490:	e000      	b.n	8002494 <Listener_CheckButton+0x150>
		return;
 8002492:	bf00      	nop
	}
}
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bd90      	pop	{r4, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000634 	.word	0x20000634
 80024a0:	200006c0 	.word	0x200006c0
 80024a4:	2000061c 	.word	0x2000061c
 80024a8:	200006cc 	.word	0x200006cc
 80024ac:	20000614 	.word	0x20000614
 80024b0:	200006d8 	.word	0x200006d8
 80024b4:	200006e4 	.word	0x200006e4

080024b8 <Listener_CheckUart>:

void Listener_CheckUart() {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af02      	add	r7, sp, #8
	if (isQueEmpty(&uartRxQue)) {
 80024be:	489e      	ldr	r0, [pc, #632]	@ (8002738 <Listener_CheckUart+0x280>)
 80024c0:	f000 feb9 	bl	8003236 <isQueEmpty>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8132 	bne.w	8002730 <Listener_CheckUart+0x278>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 80024cc:	489a      	ldr	r0, [pc, #616]	@ (8002738 <Listener_CheckUart+0x280>)
 80024ce:	f000 fee8 	bl	80032a2 <deQue>
 80024d2:	61f8      	str	r0, [r7, #28]

	inputData_TypeDef inputData;

	if (uartRxData == 'v') {
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b76      	cmp	r3, #118	@ 0x76
 80024d8:	d116      	bne.n	8002508 <Listener_CheckUart+0x50>
		flag = 1;
 80024da:	4b98      	ldr	r3, [pc, #608]	@ (800273c <Listener_CheckUart+0x284>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
		inputData.id = SPEED;
 80024e0:	2304      	movs	r3, #4
 80024e2:	607b      	str	r3, [r7, #4]
		inputData.uart_data = 'v';
 80024e4:	2376      	movs	r3, #118	@ 0x76
 80024e6:	763b      	strb	r3, [r7, #24]
		inputData.lcd_data = 2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	60fb      	str	r3, [r7, #12]
		inputData.speed_data = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
		Controller_SetInputData(inputData);
 80024f0:	466a      	mov	r2, sp
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024fa:	e882 0003 	stmia.w	r2, {r0, r1}
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002502:	f7ff fd65 	bl	8001fd0 <Controller_SetInputData>
 8002506:	e114      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == 's') {
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b73      	cmp	r3, #115	@ 0x73
 800250c:	d114      	bne.n	8002538 <Listener_CheckUart+0x80>
		inputData.id = SONG;
 800250e:	2306      	movs	r3, #6
 8002510:	607b      	str	r3, [r7, #4]
		inputData.song_data = 1;
 8002512:	2301      	movs	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
		flag = 2;
 8002516:	4b89      	ldr	r3, [pc, #548]	@ (800273c <Listener_CheckUart+0x284>)
 8002518:	2202      	movs	r2, #2
 800251a:	601a      	str	r2, [r3, #0]
		inputData.uart_data = 's';
 800251c:	2373      	movs	r3, #115	@ 0x73
 800251e:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 8002520:	466a      	mov	r2, sp
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	e893 0003 	ldmia.w	r3, {r0, r1}
 800252a:	e882 0003 	stmia.w	r2, {r0, r1}
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002532:	f7ff fd4d 	bl	8001fd0 <Controller_SetInputData>
 8002536:	e0fc      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '1') {
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b31      	cmp	r3, #49	@ 0x31
 800253c:	d11e      	bne.n	800257c <Listener_CheckUart+0xc4>
		if (flag == 1) {
 800253e:	4b7f      	ldr	r3, [pc, #508]	@ (800273c <Listener_CheckUart+0x284>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d104      	bne.n	8002550 <Listener_CheckUart+0x98>
			inputData.id = SPEED;
 8002546:	2304      	movs	r3, #4
 8002548:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 1;
 800254a:	2301      	movs	r3, #1
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e007      	b.n	8002560 <Listener_CheckUart+0xa8>
		} else if (flag == 2) {
 8002550:	4b7a      	ldr	r3, [pc, #488]	@ (800273c <Listener_CheckUart+0x284>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d103      	bne.n	8002560 <Listener_CheckUart+0xa8>
			inputData.id = SONG;
 8002558:	2306      	movs	r3, #6
 800255a:	607b      	str	r3, [r7, #4]
			inputData.song_data = 1;
 800255c:	2301      	movs	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
		}
		inputData.uart_data = '1';
 8002560:	2331      	movs	r3, #49	@ 0x31
 8002562:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 8002564:	466a      	mov	r2, sp
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800256e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002576:	f7ff fd2b 	bl	8001fd0 <Controller_SetInputData>
 800257a:	e0da      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '2') {
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b32      	cmp	r3, #50	@ 0x32
 8002580:	d11e      	bne.n	80025c0 <Listener_CheckUart+0x108>
		if (flag == 1) {
 8002582:	4b6e      	ldr	r3, [pc, #440]	@ (800273c <Listener_CheckUart+0x284>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d104      	bne.n	8002594 <Listener_CheckUart+0xdc>
			inputData.id = SPEED;
 800258a:	2304      	movs	r3, #4
 800258c:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 2;
 800258e:	2302      	movs	r3, #2
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e007      	b.n	80025a4 <Listener_CheckUart+0xec>
		} else if (flag == 2) {
 8002594:	4b69      	ldr	r3, [pc, #420]	@ (800273c <Listener_CheckUart+0x284>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d103      	bne.n	80025a4 <Listener_CheckUart+0xec>
			inputData.id = SONG;
 800259c:	2306      	movs	r3, #6
 800259e:	607b      	str	r3, [r7, #4]
			inputData.song_data = 2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	617b      	str	r3, [r7, #20]
		}
		inputData.uart_data = '2';
 80025a4:	2332      	movs	r3, #50	@ 0x32
 80025a6:	763b      	strb	r3, [r7, #24]

		Controller_SetInputData(inputData);
 80025a8:	466a      	mov	r2, sp
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025b2:	e882 0003 	stmia.w	r2, {r0, r1}
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ba:	f7ff fd09 	bl	8001fd0 <Controller_SetInputData>
 80025be:	e0b8      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '3') {
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b33      	cmp	r3, #51	@ 0x33
 80025c4:	d11e      	bne.n	8002604 <Listener_CheckUart+0x14c>
		if (flag == 1) {
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <Listener_CheckUart+0x284>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d104      	bne.n	80025d8 <Listener_CheckUart+0x120>
			inputData.id = SPEED;
 80025ce:	2304      	movs	r3, #4
 80025d0:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 3;
 80025d2:	2303      	movs	r3, #3
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e007      	b.n	80025e8 <Listener_CheckUart+0x130>
		} else if (flag == 2) {
 80025d8:	4b58      	ldr	r3, [pc, #352]	@ (800273c <Listener_CheckUart+0x284>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d103      	bne.n	80025e8 <Listener_CheckUart+0x130>
			inputData.id = SONG;
 80025e0:	2306      	movs	r3, #6
 80025e2:	607b      	str	r3, [r7, #4]
			inputData.song_data = 3;
 80025e4:	2303      	movs	r3, #3
 80025e6:	617b      	str	r3, [r7, #20]
		}
		inputData.uart_data = '3';
 80025e8:	2333      	movs	r3, #51	@ 0x33
 80025ea:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 80025ec:	466a      	mov	r2, sp
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025fe:	f7ff fce7 	bl	8001fd0 <Controller_SetInputData>
 8002602:	e096      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '4') {
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b34      	cmp	r3, #52	@ 0x34
 8002608:	d115      	bne.n	8002636 <Listener_CheckUart+0x17e>
		if (flag == 1) {
 800260a:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <Listener_CheckUart+0x284>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d103      	bne.n	800261a <Listener_CheckUart+0x162>
			inputData.id = SPEED;
 8002612:	2304      	movs	r3, #4
 8002614:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 4;
 8002616:	2304      	movs	r3, #4
 8002618:	613b      	str	r3, [r7, #16]
		}
		inputData.uart_data = '4';
 800261a:	2334      	movs	r3, #52	@ 0x34
 800261c:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 800261e:	466a      	mov	r2, sp
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002628:	e882 0003 	stmia.w	r2, {r0, r1}
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	f7ff fcce 	bl	8001fd0 <Controller_SetInputData>
 8002634:	e07d      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '5') {
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	2b35      	cmp	r3, #53	@ 0x35
 800263a:	d115      	bne.n	8002668 <Listener_CheckUart+0x1b0>

		if (flag == 1) {
 800263c:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <Listener_CheckUart+0x284>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d103      	bne.n	800264c <Listener_CheckUart+0x194>
			inputData.id = SPEED;
 8002644:	2304      	movs	r3, #4
 8002646:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 5;
 8002648:	2305      	movs	r3, #5
 800264a:	613b      	str	r3, [r7, #16]
		}

		inputData.uart_data = '5';
 800264c:	2335      	movs	r3, #53	@ 0x35
 800264e:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 8002650:	466a      	mov	r2, sp
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800265a:	e882 0003 	stmia.w	r2, {r0, r1}
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002662:	f7ff fcb5 	bl	8001fd0 <Controller_SetInputData>
 8002666:	e064      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '6') {
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b36      	cmp	r3, #54	@ 0x36
 800266c:	d115      	bne.n	800269a <Listener_CheckUart+0x1e2>

		if (flag == 1) {
 800266e:	4b33      	ldr	r3, [pc, #204]	@ (800273c <Listener_CheckUart+0x284>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d103      	bne.n	800267e <Listener_CheckUart+0x1c6>
			inputData.id = SPEED;
 8002676:	2304      	movs	r3, #4
 8002678:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 6;
 800267a:	2306      	movs	r3, #6
 800267c:	613b      	str	r3, [r7, #16]
		}
		inputData.uart_data = '6';
 800267e:	2336      	movs	r3, #54	@ 0x36
 8002680:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 8002682:	466a      	mov	r2, sp
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	e893 0003 	ldmia.w	r3, {r0, r1}
 800268c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002694:	f7ff fc9c 	bl	8001fd0 <Controller_SetInputData>
 8002698:	e04b      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '7') {
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b37      	cmp	r3, #55	@ 0x37
 800269e:	d115      	bne.n	80026cc <Listener_CheckUart+0x214>

		if (flag == 1) {
 80026a0:	4b26      	ldr	r3, [pc, #152]	@ (800273c <Listener_CheckUart+0x284>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d103      	bne.n	80026b0 <Listener_CheckUart+0x1f8>
			inputData.id = SPEED;
 80026a8:	2304      	movs	r3, #4
 80026aa:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 7;
 80026ac:	2307      	movs	r3, #7
 80026ae:	613b      	str	r3, [r7, #16]
		}
		inputData.uart_data = '7';
 80026b0:	2337      	movs	r3, #55	@ 0x37
 80026b2:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 80026b4:	466a      	mov	r2, sp
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026be:	e882 0003 	stmia.w	r2, {r0, r1}
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026c6:	f7ff fc83 	bl	8001fd0 <Controller_SetInputData>
 80026ca:	e032      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '8') {
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b38      	cmp	r3, #56	@ 0x38
 80026d0:	d115      	bne.n	80026fe <Listener_CheckUart+0x246>

		if (flag == 1) {
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <Listener_CheckUart+0x284>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d103      	bne.n	80026e2 <Listener_CheckUart+0x22a>
			inputData.id = SPEED;
 80026da:	2304      	movs	r3, #4
 80026dc:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 8;
 80026de:	2308      	movs	r3, #8
 80026e0:	613b      	str	r3, [r7, #16]
		}
		inputData.uart_data = '8';
 80026e2:	2338      	movs	r3, #56	@ 0x38
 80026e4:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 80026e6:	466a      	mov	r2, sp
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f8:	f7ff fc6a 	bl	8001fd0 <Controller_SetInputData>
 80026fc:	e019      	b.n	8002732 <Listener_CheckUart+0x27a>
	} else if (uartRxData == '9') {
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b39      	cmp	r3, #57	@ 0x39
 8002702:	d116      	bne.n	8002732 <Listener_CheckUart+0x27a>

		if (flag == 1) {
 8002704:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <Listener_CheckUart+0x284>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d103      	bne.n	8002714 <Listener_CheckUart+0x25c>
			inputData.id = SPEED;
 800270c:	2304      	movs	r3, #4
 800270e:	607b      	str	r3, [r7, #4]
			inputData.speed_data = 9;
 8002710:	2309      	movs	r3, #9
 8002712:	613b      	str	r3, [r7, #16]
		}
		inputData.uart_data = '9';
 8002714:	2339      	movs	r3, #57	@ 0x39
 8002716:	763b      	strb	r3, [r7, #24]
		Controller_SetInputData(inputData);
 8002718:	466a      	mov	r2, sp
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002722:	e882 0003 	stmia.w	r2, {r0, r1}
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800272a:	f7ff fc51 	bl	8001fd0 <Controller_SetInputData>
 800272e:	e000      	b.n	8002732 <Listener_CheckUart+0x27a>
		return;
 8002730:	bf00      	nop
	}
}
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200005fc 	.word	0x200005fc
 800273c:	20000618 	.word	0x20000618

08002740 <Listener_UartCallBack>:

void Listener_UartCallBack() {
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <Listener_UartCallBack+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <Listener_UartCallBack+0x24>)
 800274c:	f000 fd86 	bl	800325c <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8002750:	2201      	movs	r2, #1
 8002752:	4903      	ldr	r1, [pc, #12]	@ (8002760 <Listener_UartCallBack+0x20>)
 8002754:	4804      	ldr	r0, [pc, #16]	@ (8002768 <Listener_UartCallBack+0x28>)
 8002756:	f004 fdbe 	bl	80072d6 <HAL_UART_Receive_IT>
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200005f9 	.word	0x200005f9
 8002764:	200005fc 	.word	0x200005fc
 8002768:	20000594 	.word	0x20000594

0800276c <Listener_CheckUltra>:

void Listener_CheckUltra() {
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b085      	sub	sp, #20
 8002770:	af02      	add	r7, sp, #8
	int getDist = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
	getDist = ultra_execute();
 8002776:	f001 fb8b 	bl	8003e90 <ultra_execute>
 800277a:	4603      	mov	r3, r0
 800277c:	607b      	str	r3, [r7, #4]
	if (getDist) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <Listener_CheckUltra+0x1e>
		inputData.ultra_data = getDist;
 8002784:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <Listener_CheckUltra+0x3c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6053      	str	r3, [r2, #4]
	}
	Controller_SetInputData(inputData);
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <Listener_CheckUltra+0x3c>)
 800278c:	466c      	mov	r4, sp
 800278e:	f103 0210 	add.w	r2, r3, #16
 8002792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002796:	e884 0003 	stmia.w	r4, {r0, r1}
 800279a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800279c:	f7ff fc18 	bl	8001fd0 <Controller_SetInputData>
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	2000061c 	.word	0x2000061c

080027ac <Motor_Init>:
 */

#include "Motor_Speed.h"

void Motor_Init()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	DC_Motor_Init(&htim1, TIM_CHANNEL_2);
 80027b0:	2104      	movs	r1, #4
 80027b2:	4802      	ldr	r0, [pc, #8]	@ (80027bc <Motor_Init+0x10>)
 80027b4:	f000 fed6 	bl	8003564 <DC_Motor_Init>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000039c 	.word	0x2000039c

080027c0 <Motor_Start>:

void Motor_Start(uint32_t speed)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	DC_Motor_SetFreq(speed);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fee1 	bl	8003590 <DC_Motor_SetFreq>
	DC_Motor_Start();
 80027ce:	f000 ff43 	bl	8003658 <DC_Motor_Start>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <Motor_Stop>:

void Motor_Stop()
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
	DC_Motor_Stop();
 80027de:	f000 ff4b 	bl	8003678 <DC_Motor_Stop>
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <Presenter_Init>:
// Controller to Presenter Data
static C2P_Data p_data;

// Initial Func
void Presenter_Init()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 80027ec:	4805      	ldr	r0, [pc, #20]	@ (8002804 <Presenter_Init+0x1c>)
 80027ee:	f001 f91d 	bl	8003a2c <LCD_Init>
	Motor_Init();
 80027f2:	f7ff ffdb 	bl	80027ac <Motor_Init>
	Sound_Init();
 80027f6:	f000 fbd9 	bl	8002fac <Sound_Init>
	Presenter_DispMonitorInfo();
 80027fa:	f000 fa1f 	bl	8002c3c <Presenter_DispMonitorInfo>
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200002e4 	.word	0x200002e4

08002808 <Presenter_Excute>:


// Behavior Func at ap_main.c
void Presenter_Excute()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	if (p_data.runstop == 1 && onOffFlag == 0) {
 800280c:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <Presenter_Excute+0x80>)
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <Presenter_Excute+0x1e>
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <Presenter_Excute+0x84>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <Presenter_Excute+0x1e>
		onOffFlag = 1;
 800281e:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <Presenter_Excute+0x84>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e00b      	b.n	800283e <Presenter_Excute+0x36>
		//Sound_POWERON();
	}
	else if (p_data.runstop == 0 && onOffFlag == 1) {
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <Presenter_Excute+0x80>)
 8002828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <Presenter_Excute+0x36>
 8002830:	4b16      	ldr	r3, [pc, #88]	@ (800288c <Presenter_Excute+0x84>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <Presenter_Excute+0x36>
		onOffFlag = 0;
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <Presenter_Excute+0x84>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
		//Sound_POWEROFF();
	}
	Controller_OutData(&p_data);
 800283e:	4812      	ldr	r0, [pc, #72]	@ (8002888 <Presenter_Excute+0x80>)
 8002840:	f7ff fbb6 	bl	8001fb0 <Controller_OutData>
	Presenter_DispLCD(p_data.lcd_mode);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <Presenter_Excute+0x80>)
 8002846:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f820 	bl	8002890 <Presenter_DispLCD>
	Presenter_DispMonitor(p_data.uartRxData);
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <Presenter_Excute+0x80>)
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f876 	bl	8002948 <Presenter_DispMonitor>
	Presenter_DispFnd_CurrentTime(p_data.current_time);
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <Presenter_Excute+0x80>)
 800285e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002862:	f000 f9bf 	bl	8002be4 <Presenter_DispFnd_CurrentTime>
	Presenter_DispLED_Dist(p_data.distance);
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <Presenter_Excute+0x80>)
 8002868:	ed93 7b04 	vldr	d7, [r3, #16]
 800286c:	eeb0 0a47 	vmov.f32	s0, s14
 8002870:	eef0 0a67 	vmov.f32	s1, s15
 8002874:	f000 fb00 	bl	8002e78 <Presenter_DispLED_Dist>
	Presenter_SpeedMotor(p_data.speed);
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <Presenter_Excute+0x80>)
 800287a:	7b1b      	ldrb	r3, [r3, #12]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f997 	bl	8002bb0 <Presenter_SpeedMotor>
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000648 	.word	0x20000648
 800288c:	20000638 	.word	0x20000638

08002890 <Presenter_DispLCD>:

// LCD DISP
void Presenter_DispLCD(uint8_t lcd_mode)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
	if (prev_lcd_mode != lcd_mode) {
 800289a:	4b28      	ldr	r3, [pc, #160]	@ (800293c <Presenter_DispLCD+0xac>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	79fa      	ldrb	r2, [r7, #7]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d009      	beq.n	80028b8 <Presenter_DispLCD+0x28>
		LCD_writeStringXY(0, 0, "                ");
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <Presenter_DispLCD+0xb0>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	2000      	movs	r0, #0
 80028aa:	f001 fa0c 	bl	8003cc6 <LCD_writeStringXY>
		LCD_writeStringXY(1, 0, "                ");
 80028ae:	4a24      	ldr	r2, [pc, #144]	@ (8002940 <Presenter_DispLCD+0xb0>)
 80028b0:	2100      	movs	r1, #0
 80028b2:	2001      	movs	r0, #1
 80028b4:	f001 fa07 	bl	8003cc6 <LCD_writeStringXY>
	}
	switch (lcd_mode) {
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d837      	bhi.n	800292e <Presenter_DispLCD+0x9e>
 80028be:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <Presenter_DispLCD+0x34>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	0800292f 	.word	0x0800292f
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	08002901 	.word	0x08002901
 80028d0:	0800291b 	.word	0x0800291b
 80028d4:	08002929 	.word	0x08002929
	case LCD_OFF:
		break;
	case RUN_DIST:
		Presenter_DispLCD_RUN_DIST(p_data.running_time, p_data.distance);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <Presenter_DispLCD+0xb4>)
 80028da:	ed93 7b04 	vldr	d7, [r3, #16]
 80028de:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <Presenter_DispLCD+0xb4>)
 80028e0:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80028e4:	4611      	mov	r1, r2
 80028e6:	895a      	ldrh	r2, [r3, #10]
 80028e8:	2300      	movs	r3, #0
 80028ea:	f362 030f 	bfi	r3, r2, #0, #16
 80028ee:	eeb0 0a47 	vmov.f32	s0, s14
 80028f2:	eef0 0a67 	vmov.f32	s1, s15
 80028f6:	4608      	mov	r0, r1
 80028f8:	4619      	mov	r1, r3
 80028fa:	f000 fa25 	bl	8002d48 <Presenter_DispLCD_RUN_DIST>
		break;
 80028fe:	e016      	b.n	800292e <Presenter_DispLCD+0x9e>
	case CAL_SPEED:
		Presenter_DispLCD_CAL_SPEED(p_data.calories, p_data.speed);
 8002900:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <Presenter_DispLCD+0xb4>)
 8002902:	ed93 7b06 	vldr	d7, [r3, #24]
 8002906:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <Presenter_DispLCD+0xb4>)
 8002908:	7b1b      	ldrb	r3, [r3, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	eeb0 0a47 	vmov.f32	s0, s14
 8002910:	eef0 0a67 	vmov.f32	s1, s15
 8002914:	f000 fa4a 	bl	8002dac <Presenter_DispLCD_CAL_SPEED>
		break;
 8002918:	e009      	b.n	800292e <Presenter_DispLCD+0x9e>
	case SONG_TITLE:
		Presenter_DispLCD_SONG_TITLE(p_data.song);
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <Presenter_DispLCD+0xb4>)
 800291c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa6f 	bl	8002e04 <Presenter_DispLCD_SONG_TITLE>
		break;
 8002926:	e002      	b.n	800292e <Presenter_DispLCD+0x9e>
	case WARNING:
		Presenter_DispLCD_WARNING();
 8002928:	f000 fa98 	bl	8002e5c <Presenter_DispLCD_WARNING>
		break;
 800292c:	bf00      	nop
	}
	prev_lcd_mode = lcd_mode;
 800292e:	4a03      	ldr	r2, [pc, #12]	@ (800293c <Presenter_DispLCD+0xac>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	7013      	strb	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000644 	.word	0x20000644
 8002940:	0800c8e0 	.word	0x0800c8e0
 8002944:	20000648 	.word	0x20000648

08002948 <Presenter_DispMonitor>:

// UART DISP
void Presenter_DispMonitor(char uartRxData)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	switch (uartRxData) {
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	3b31      	subs	r3, #49	@ 0x31
 8002956:	2b45      	cmp	r3, #69	@ 0x45
 8002958:	f200 8110 	bhi.w	8002b7c <Presenter_DispMonitor+0x234>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <Presenter_DispMonitor+0x1c>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002aa5 	.word	0x08002aa5
 8002968:	08002abd 	.word	0x08002abd
 800296c:	08002ad5 	.word	0x08002ad5
 8002970:	08002aed 	.word	0x08002aed
 8002974:	08002b05 	.word	0x08002b05
 8002978:	08002b1d 	.word	0x08002b1d
 800297c:	08002b35 	.word	0x08002b35
 8002980:	08002b4d 	.word	0x08002b4d
 8002984:	08002b65 	.word	0x08002b65
 8002988:	08002b7d 	.word	0x08002b7d
 800298c:	08002b7d 	.word	0x08002b7d
 8002990:	08002b7d 	.word	0x08002b7d
 8002994:	08002b7d 	.word	0x08002b7d
 8002998:	08002b7d 	.word	0x08002b7d
 800299c:	08002b7d 	.word	0x08002b7d
 80029a0:	08002b7d 	.word	0x08002b7d
 80029a4:	08002b7d 	.word	0x08002b7d
 80029a8:	08002b7d 	.word	0x08002b7d
 80029ac:	08002b7d 	.word	0x08002b7d
 80029b0:	08002b7d 	.word	0x08002b7d
 80029b4:	08002b7d 	.word	0x08002b7d
 80029b8:	08002b7d 	.word	0x08002b7d
 80029bc:	08002b7d 	.word	0x08002b7d
 80029c0:	08002b7d 	.word	0x08002b7d
 80029c4:	08002b7d 	.word	0x08002b7d
 80029c8:	08002b7d 	.word	0x08002b7d
 80029cc:	08002b7d 	.word	0x08002b7d
 80029d0:	08002b7d 	.word	0x08002b7d
 80029d4:	08002b7d 	.word	0x08002b7d
 80029d8:	08002b7d 	.word	0x08002b7d
 80029dc:	08002b7d 	.word	0x08002b7d
 80029e0:	08002b7d 	.word	0x08002b7d
 80029e4:	08002b7d 	.word	0x08002b7d
 80029e8:	08002b7d 	.word	0x08002b7d
 80029ec:	08002b7d 	.word	0x08002b7d
 80029f0:	08002b7d 	.word	0x08002b7d
 80029f4:	08002b7d 	.word	0x08002b7d
 80029f8:	08002b7d 	.word	0x08002b7d
 80029fc:	08002b7d 	.word	0x08002b7d
 8002a00:	08002b7d 	.word	0x08002b7d
 8002a04:	08002b7d 	.word	0x08002b7d
 8002a08:	08002b7d 	.word	0x08002b7d
 8002a0c:	08002b7d 	.word	0x08002b7d
 8002a10:	08002b7d 	.word	0x08002b7d
 8002a14:	08002b7d 	.word	0x08002b7d
 8002a18:	08002b7d 	.word	0x08002b7d
 8002a1c:	08002b7d 	.word	0x08002b7d
 8002a20:	08002b7d 	.word	0x08002b7d
 8002a24:	08002b7d 	.word	0x08002b7d
 8002a28:	08002b7d 	.word	0x08002b7d
 8002a2c:	08002b7d 	.word	0x08002b7d
 8002a30:	08002b7d 	.word	0x08002b7d
 8002a34:	08002b7d 	.word	0x08002b7d
 8002a38:	08002b7d 	.word	0x08002b7d
 8002a3c:	08002b7d 	.word	0x08002b7d
 8002a40:	08002b7d 	.word	0x08002b7d
 8002a44:	08002b7d 	.word	0x08002b7d
 8002a48:	08002b7d 	.word	0x08002b7d
 8002a4c:	08002b7d 	.word	0x08002b7d
 8002a50:	08002b7d 	.word	0x08002b7d
 8002a54:	08002b7d 	.word	0x08002b7d
 8002a58:	08002b7d 	.word	0x08002b7d
 8002a5c:	08002b7d 	.word	0x08002b7d
 8002a60:	08002b7d 	.word	0x08002b7d
 8002a64:	08002b7d 	.word	0x08002b7d
 8002a68:	08002b7d 	.word	0x08002b7d
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002b7d 	.word	0x08002b7d
 8002a74:	08002b7d 	.word	0x08002b7d
 8002a78:	08002a7d 	.word	0x08002a7d
	case 'v':
		if (UartFlag)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <Presenter_DispMonitor+0x140>
			Presenter_DispMonitorSpeedInfo();
 8002a84:	f000 f900 	bl	8002c88 <Presenter_DispMonitorSpeedInfo>
		UartFlag = 0;
 8002a88:	4b48      	ldr	r3, [pc, #288]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
		break;
 8002a8e:	e088      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
	case 's':
		if (UartFlag)
 8002a90:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <Presenter_DispMonitor+0x154>
			Presenter_DispMonitorSongInfo();
 8002a98:	f000 f916 	bl	8002cc8 <Presenter_DispMonitorSongInfo>
		UartFlag = 0;
 8002a9c:	4b43      	ldr	r3, [pc, #268]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
		break;
 8002aa2:	e07e      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
	case '1':
		if (UartFlag == 0){
 8002aa4:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d169      	bne.n	8002b80 <Presenter_DispMonitor+0x238>
			Presenter_DispMonitorDone();
 8002aac:	f000 f930 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002ab0:	f000 f8c4 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
		}
		break;
 8002aba:	e061      	b.n	8002b80 <Presenter_DispMonitor+0x238>
	case '2':
		if (UartFlag == 0){
 8002abc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d15f      	bne.n	8002b84 <Presenter_DispMonitor+0x23c>
			Presenter_DispMonitorDone();
 8002ac4:	f000 f924 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002ac8:	f000 f8b8 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002acc:	4b37      	ldr	r3, [pc, #220]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
		}
		break;
 8002ad2:	e057      	b.n	8002b84 <Presenter_DispMonitor+0x23c>
	case '3':
		if (UartFlag == 0){
 8002ad4:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d155      	bne.n	8002b88 <Presenter_DispMonitor+0x240>
			Presenter_DispMonitorDone();
 8002adc:	f000 f918 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002ae0:	f000 f8ac 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
		}
		break;
 8002aea:	e04d      	b.n	8002b88 <Presenter_DispMonitor+0x240>
	case '4':
		if (UartFlag == 0){
 8002aec:	4b2f      	ldr	r3, [pc, #188]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d14b      	bne.n	8002b8c <Presenter_DispMonitor+0x244>
			Presenter_DispMonitorDone();
 8002af4:	f000 f90c 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002af8:	f000 f8a0 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b02:	e043      	b.n	8002b8c <Presenter_DispMonitor+0x244>
	case '5':
		if (UartFlag == 0){
 8002b04:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d141      	bne.n	8002b90 <Presenter_DispMonitor+0x248>
			Presenter_DispMonitorDone();
 8002b0c:	f000 f900 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002b10:	f000 f894 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b1a:	e039      	b.n	8002b90 <Presenter_DispMonitor+0x248>
	case '6':
		if (UartFlag == 0){
 8002b1c:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d137      	bne.n	8002b94 <Presenter_DispMonitor+0x24c>
			Presenter_DispMonitorDone();
 8002b24:	f000 f8f4 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002b28:	f000 f888 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b32:	e02f      	b.n	8002b94 <Presenter_DispMonitor+0x24c>
	case '7':
		if (UartFlag == 0){
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d12d      	bne.n	8002b98 <Presenter_DispMonitor+0x250>
			Presenter_DispMonitorDone();
 8002b3c:	f000 f8e8 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002b40:	f000 f87c 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b4a:	e025      	b.n	8002b98 <Presenter_DispMonitor+0x250>
	case '8':
		if (UartFlag == 0){
 8002b4c:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d123      	bne.n	8002b9c <Presenter_DispMonitor+0x254>
			Presenter_DispMonitorDone();
 8002b54:	f000 f8dc 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002b58:	f000 f870 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b62:	e01b      	b.n	8002b9c <Presenter_DispMonitor+0x254>
	case '9':
		if (UartFlag == 0){
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d119      	bne.n	8002ba0 <Presenter_DispMonitor+0x258>
			Presenter_DispMonitorDone();
 8002b6c:	f000 f8d0 	bl	8002d10 <Presenter_DispMonitorDone>
			Presenter_DispMonitorInfo();
 8002b70:	f000 f864 	bl	8002c3c <Presenter_DispMonitorInfo>
			UartFlag = 1;
 8002b74:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <Presenter_DispMonitor+0x264>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
		}
		break;
 8002b7a:	e011      	b.n	8002ba0 <Presenter_DispMonitor+0x258>

	default:

		break;
 8002b7c:	bf00      	nop
 8002b7e:	e010      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b80:	bf00      	nop
 8002b82:	e00e      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b84:	bf00      	nop
 8002b86:	e00c      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b88:	bf00      	nop
 8002b8a:	e00a      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b8c:	bf00      	nop
 8002b8e:	e008      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b90:	bf00      	nop
 8002b92:	e006      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b94:	bf00      	nop
 8002b96:	e004      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b98:	bf00      	nop
 8002b9a:	e002      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002b9c:	bf00      	nop
 8002b9e:	e000      	b.n	8002ba2 <Presenter_DispMonitor+0x25a>
		break;
 8002ba0:	bf00      	nop
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000030 	.word	0x20000030

08002bb0 <Presenter_SpeedMotor>:


// MOTOR RUN
void Presenter_SpeedMotor(uint8_t speed)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
	if (speed == 0) Motor_Stop();
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <Presenter_SpeedMotor+0x16>
 8002bc0:	f7ff fe0b 	bl	80027da <Motor_Stop>
	else Motor_Start((5000-(speed*100)));
}
 8002bc4:	e00a      	b.n	8002bdc <Presenter_SpeedMotor+0x2c>
	else Motor_Start((5000-(speed*100)));
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fdf2 	bl	80027c0 <Motor_Start>
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <Presenter_DispFnd_CurrentTime>:

void Presenter_DispFnd_CurrentTime(watch_t current_time)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	463b      	mov	r3, r7
 8002bec:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(current_time.hour*100 + current_time.min);
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	0091      	lsls	r1, r2, #2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	78ba      	ldrb	r2, [r7, #2]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fd6b 	bl	80036e8 <FND_WriteData>

	FND_WriteDp(FND_DP_1000|FND_DP_10|FND_DP_1, FND_DP_OFF);
 8002c12:	2100      	movs	r1, #0
 8002c14:	200b      	movs	r0, #11
 8002c16:	f000 fd3f 	bl	8003698 <FND_WriteDp>

	if (current_time.msec < 500) {
 8002c1a:	88bb      	ldrh	r3, [r7, #4]
 8002c1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c20:	d204      	bcs.n	8002c2c <Presenter_DispFnd_CurrentTime+0x48>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8002c22:	2101      	movs	r1, #1
 8002c24:	2004      	movs	r0, #4
 8002c26:	f000 fd37 	bl	8003698 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 8002c2a:	e003      	b.n	8002c34 <Presenter_DispFnd_CurrentTime+0x50>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2004      	movs	r0, #4
 8002c30:	f000 fd32 	bl	8003698 <FND_WriteDp>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <Presenter_DispMonitorInfo>:


// UART Monitor Info(Speed, Song)
void Presenter_DispMonitorInfo() // start
{
 8002c3c:	b5b0      	push	{r4, r5, r7, lr}
 8002c3e:	b090      	sub	sp, #64	@ 0x40
 8002c40:	af00      	add	r7, sp, #0
	char str[60];
	strcpy(str,"Choose number\n1. Speed Setting(v)\t2. Choose Song(s)\n");
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4a0e      	ldr	r2, [pc, #56]	@ (8002c80 <Presenter_DispMonitorInfo+0x44>)
 8002c46:	461c      	mov	r4, r3
 8002c48:	4615      	mov	r5, r2
 8002c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c5a:	6020      	str	r0, [r4, #0]
 8002c5c:	3404      	adds	r4, #4
 8002c5e:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fb0c 	bl	8000280 <strlen>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	1d39      	adds	r1, r7, #4
 8002c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c72:	4804      	ldr	r0, [pc, #16]	@ (8002c84 <Presenter_DispMonitorInfo+0x48>)
 8002c74:	f004 faa4 	bl	80071c0 <HAL_UART_Transmit>
}
 8002c78:	bf00      	nop
 8002c7a:	3740      	adds	r7, #64	@ 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c80:	0800c8f4 	.word	0x0800c8f4
 8002c84:	20000594 	.word	0x20000594

08002c88 <Presenter_DispMonitorSpeedInfo>:
void Presenter_DispMonitorSpeedInfo()
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b08e      	sub	sp, #56	@ 0x38
 8002c8c:	af00      	add	r7, sp, #0
	char str[50];
	strcpy(str,"Type 0~9 Speed:\n");
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc0 <Presenter_DispMonitorSpeedInfo+0x38>)
 8002c92:	461c      	mov	r4, r3
 8002c94:	4615      	mov	r5, r2
 8002c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd faed 	bl	8000280 <strlen>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	1d39      	adds	r1, r7, #4
 8002cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb0:	4804      	ldr	r0, [pc, #16]	@ (8002cc4 <Presenter_DispMonitorSpeedInfo+0x3c>)
 8002cb2:	f004 fa85 	bl	80071c0 <HAL_UART_Transmit>
}
 8002cb6:	bf00      	nop
 8002cb8:	3738      	adds	r7, #56	@ 0x38
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	0800c92c 	.word	0x0800c92c
 8002cc4:	20000594 	.word	0x20000594

08002cc8 <Presenter_DispMonitorSongInfo>:
void Presenter_DispMonitorSongInfo()
{
 8002cc8:	b5b0      	push	{r4, r5, r7, lr}
 8002cca:	b08e      	sub	sp, #56	@ 0x38
 8002ccc:	af00      	add	r7, sp, #0
	char str[50];
	strcpy(str,"Choose Song\n1. Beethoven\t2. Star\t3. Warning\n");
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <Presenter_DispMonitorSongInfo+0x40>)
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	4615      	mov	r5, r2
 8002cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ce2:	c407      	stmia	r4!, {r0, r1, r2}
 8002ce4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fac9 	bl	8000280 <strlen>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	1d39      	adds	r1, r7, #4
 8002cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf8:	4804      	ldr	r0, [pc, #16]	@ (8002d0c <Presenter_DispMonitorSongInfo+0x44>)
 8002cfa:	f004 fa61 	bl	80071c0 <HAL_UART_Transmit>
}
 8002cfe:	bf00      	nop
 8002d00:	3738      	adds	r7, #56	@ 0x38
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bdb0      	pop	{r4, r5, r7, pc}
 8002d06:	bf00      	nop
 8002d08:	0800c940 	.word	0x0800c940
 8002d0c:	20000594 	.word	0x20000594

08002d10 <Presenter_DispMonitorDone>:
void Presenter_DispMonitorDone()
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af00      	add	r7, sp, #0
	char str[50];
	strcpy(str,"Complete\n");
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <Presenter_DispMonitorDone+0x30>)
 8002d1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1c:	c303      	stmia	r3!, {r0, r1}
 8002d1e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd faac 	bl	8000280 <strlen>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	1d39      	adds	r1, r7, #4
 8002d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d32:	4804      	ldr	r0, [pc, #16]	@ (8002d44 <Presenter_DispMonitorDone+0x34>)
 8002d34:	f004 fa44 	bl	80071c0 <HAL_UART_Transmit>
}
 8002d38:	bf00      	nop
 8002d3a:	3738      	adds	r7, #56	@ 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	0800c970 	.word	0x0800c970
 8002d44:	20000594 	.word	0x20000594

08002d48 <Presenter_DispLCD_RUN_DIST>:


void Presenter_DispLCD_RUN_DIST(watch_t running_time, double distance)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0a0      	sub	sp, #128	@ 0x80
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	e883 0003 	stmia.w	r3, {r0, r1}
 8002d56:	ed87 0b00 	vstr	d0, [r7]
		char str1[50];
		char str2[50];

		sprintf(str1, "RunTime:%02d:%02d:%02d", running_time.hour, running_time.min, running_time.sec);
 8002d5a:	7a7b      	ldrb	r3, [r7, #9]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	7abb      	ldrb	r3, [r7, #10]
 8002d60:	4619      	mov	r1, r3
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	490d      	ldr	r1, [pc, #52]	@ (8002da4 <Presenter_DispLCD_RUN_DIST+0x5c>)
 8002d6e:	f006 f969 	bl	8009044 <siprintf>
		sprintf(str2, "distance:%.2fm", distance);
 8002d72:	f107 0010 	add.w	r0, r7, #16
 8002d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d7a:	490b      	ldr	r1, [pc, #44]	@ (8002da8 <Presenter_DispLCD_RUN_DIST+0x60>)
 8002d7c:	f006 f962 	bl	8009044 <siprintf>

		LCD_writeStringXY(0, 0, str1);
 8002d80:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d84:	461a      	mov	r2, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f000 ff9c 	bl	8003cc6 <LCD_writeStringXY>
		LCD_writeStringXY(1, 0, str2);
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	461a      	mov	r2, r3
 8002d94:	2100      	movs	r1, #0
 8002d96:	2001      	movs	r0, #1
 8002d98:	f000 ff95 	bl	8003cc6 <LCD_writeStringXY>
}
 8002d9c:	bf00      	nop
 8002d9e:	3778      	adds	r7, #120	@ 0x78
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0800c97c 	.word	0x0800c97c
 8002da8:	0800c994 	.word	0x0800c994

08002dac <Presenter_DispLCD_CAL_SPEED>:


void Presenter_DispLCD_CAL_SPEED(double calories, uint8_t speed)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b09e      	sub	sp, #120	@ 0x78
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
	char str1[50];
	char str2[50];

	sprintf(str1, "calories:%.2f", calories);
 8002dba:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dc2:	490e      	ldr	r1, [pc, #56]	@ (8002dfc <Presenter_DispLCD_CAL_SPEED+0x50>)
 8002dc4:	f006 f93e 	bl	8009044 <siprintf>
	sprintf(str2, "speed:%d", speed);
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <Presenter_DispLCD_CAL_SPEED+0x54>)
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 f937 	bl	8009044 <siprintf>

	LCD_writeStringXY(0, 0, str1);
 8002dd6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 ff71 	bl	8003cc6 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	461a      	mov	r2, r3
 8002dea:	2100      	movs	r1, #0
 8002dec:	2001      	movs	r0, #1
 8002dee:	f000 ff6a 	bl	8003cc6 <LCD_writeStringXY>

}
 8002df2:	bf00      	nop
 8002df4:	3778      	adds	r7, #120	@ 0x78
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800c9a4 	.word	0x0800c9a4
 8002e00:	0800c9b4 	.word	0x0800c9b4

08002e04 <Presenter_DispLCD_SONG_TITLE>:

void Presenter_DispLCD_SONG_TITLE(uint8_t song)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
	switch (song) {
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d012      	beq.n	8002e3a <Presenter_DispLCD_SONG_TITLE+0x36>
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	dc16      	bgt.n	8002e46 <Presenter_DispLCD_SONG_TITLE+0x42>
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d002      	beq.n	8002e22 <Presenter_DispLCD_SONG_TITLE+0x1e>
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d006      	beq.n	8002e2e <Presenter_DispLCD_SONG_TITLE+0x2a>
		break;
	case 3:
		LCD_writeStringXY(0, 0, "Warning");
		break;
	}
}
 8002e20:	e011      	b.n	8002e46 <Presenter_DispLCD_SONG_TITLE+0x42>
		LCD_writeStringXY(0, 0, "Beethoven");
 8002e22:	4a0b      	ldr	r2, [pc, #44]	@ (8002e50 <Presenter_DispLCD_SONG_TITLE+0x4c>)
 8002e24:	2100      	movs	r1, #0
 8002e26:	2000      	movs	r0, #0
 8002e28:	f000 ff4d 	bl	8003cc6 <LCD_writeStringXY>
		break;
 8002e2c:	e00b      	b.n	8002e46 <Presenter_DispLCD_SONG_TITLE+0x42>
		LCD_writeStringXY(0, 0, "Star");
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <Presenter_DispLCD_SONG_TITLE+0x50>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f000 ff47 	bl	8003cc6 <LCD_writeStringXY>
		break;
 8002e38:	e005      	b.n	8002e46 <Presenter_DispLCD_SONG_TITLE+0x42>
		LCD_writeStringXY(0, 0, "Warning");
 8002e3a:	4a07      	ldr	r2, [pc, #28]	@ (8002e58 <Presenter_DispLCD_SONG_TITLE+0x54>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 ff41 	bl	8003cc6 <LCD_writeStringXY>
		break;
 8002e44:	bf00      	nop
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	0800c9c0 	.word	0x0800c9c0
 8002e54:	0800c9cc 	.word	0x0800c9cc
 8002e58:	0800c9d4 	.word	0x0800c9d4

08002e5c <Presenter_DispLCD_WARNING>:

void Presenter_DispLCD_WARNING()
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	@ 0x38
 8002e60:	af00      	add	r7, sp, #0
	char str1[50];
	LCD_writeStringXY(0, 0, "TOO FAR!!!");
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <Presenter_DispLCD_WARNING+0x18>)
 8002e64:	2100      	movs	r1, #0
 8002e66:	2000      	movs	r0, #0
 8002e68:	f000 ff2d 	bl	8003cc6 <LCD_writeStringXY>
}
 8002e6c:	bf00      	nop
 8002e6e:	3738      	adds	r7, #56	@ 0x38
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	0800c9dc 	.word	0x0800c9dc

08002e78 <Presenter_DispLED_Dist>:



// LED (Dist)
void Presenter_DispLED_Dist(double dist)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	ed87 0b00 	vstr	d0, [r7]
    static double sum = 0.0;
    static double prev = 0.0;
    static double prev2 = 0.0;
    prev += dist;
 8002e82:	4b36      	ldr	r3, [pc, #216]	@ (8002f5c <Presenter_DispLED_Dist+0xe4>)
 8002e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e8c:	f7fd fa06 	bl	800029c <__adddf3>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4931      	ldr	r1, [pc, #196]	@ (8002f5c <Presenter_DispLED_Dist+0xe4>)
 8002e96:	e9c1 2300 	strd	r2, r3, [r1]
    prev2 = prev - prev2;
 8002e9a:	4b30      	ldr	r3, [pc, #192]	@ (8002f5c <Presenter_DispLED_Dist+0xe4>)
 8002e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <Presenter_DispLED_Dist+0xe8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd f9f7 	bl	8000298 <__aeabi_dsub>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	492c      	ldr	r1, [pc, #176]	@ (8002f60 <Presenter_DispLED_Dist+0xe8>)
 8002eb0:	e9c1 2300 	strd	r2, r3, [r1]

    sum += prev2;
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f64 <Presenter_DispLED_Dist+0xec>)
 8002eb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <Presenter_DispLED_Dist+0xe8>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f7fd f9ec 	bl	800029c <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4926      	ldr	r1, [pc, #152]	@ (8002f64 <Presenter_DispLED_Dist+0xec>)
 8002eca:	e9c1 2300 	strd	r2, r3, [r1]

    if(sum >= 50.0)
 8002ece:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <Presenter_DispLED_Dist+0xec>)
 8002ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <Presenter_DispLED_Dist+0xf0>)
 8002eda:	f7fd fe1b 	bl	8000b14 <__aeabi_dcmpge>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01a      	beq.n	8002f1a <Presenter_DispLED_Dist+0xa2>
    {
        if(led_data == 0xff) led_data = 0;
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2bff      	cmp	r3, #255	@ 0xff
 8002eea:	d103      	bne.n	8002ef4 <Presenter_DispLED_Dist+0x7c>
 8002eec:	4b1f      	ldr	r3, [pc, #124]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e005      	b.n	8002f00 <Presenter_DispLED_Dist+0x88>
        else led_data = (led_data << 1) + 1;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	3301      	adds	r3, #1
 8002efc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002efe:	6013      	str	r3, [r2, #0]
        sum -= 50.0;
 8002f00:	4b18      	ldr	r3, [pc, #96]	@ (8002f64 <Presenter_DispLED_Dist+0xec>)
 8002f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	4b17      	ldr	r3, [pc, #92]	@ (8002f68 <Presenter_DispLED_Dist+0xf0>)
 8002f0c:	f7fd f9c4 	bl	8000298 <__aeabi_dsub>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4913      	ldr	r1, [pc, #76]	@ (8002f64 <Presenter_DispLED_Dist+0xec>)
 8002f16:	e9c1 2300 	strd	r2, r3, [r1]
    }

    for (int i = 6; i >= 0; i--) {
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	e010      	b.n	8002f42 <Presenter_DispLED_Dist+0xca>
		if ((led_data >> i) & 1) {
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	fa42 f303 	asr.w	r3, r2, r3
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <Presenter_DispLED_Dist+0xc4>
			msb_pos = i+1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <Presenter_DispLED_Dist+0xf8>)
 8002f38:	6013      	str	r3, [r2, #0]
			break;
 8002f3a:	e005      	b.n	8002f48 <Presenter_DispLED_Dist+0xd0>
    for (int i = 6; i >= 0; i--) {
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	daeb      	bge.n	8002f20 <Presenter_DispLED_Dist+0xa8>
		}
	}

    LedBar_Write(led_data);
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <Presenter_DispLED_Dist+0xf4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fece 	bl	8003cf0 <LedBar_Write>
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000670 	.word	0x20000670
 8002f60:	20000678 	.word	0x20000678
 8002f64:	20000680 	.word	0x20000680
 8002f68:	40490000 	.word	0x40490000
 8002f6c:	20000640 	.word	0x20000640
 8002f70:	2000063c 	.word	0x2000063c

08002f74 <Presenter_DispLEDMsbToggle>:

// timer 사용해서 해야할듯
void Presenter_DispLEDMsbToggle()
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
	if (msb_pos == -1) return;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <Presenter_DispLEDMsbToggle+0x30>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d00b      	beq.n	8002f9a <Presenter_DispLEDMsbToggle+0x26>

	led_data &= ~(1 << msb_pos);
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <Presenter_DispLEDMsbToggle+0x30>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <Presenter_DispLEDMsbToggle+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <Presenter_DispLEDMsbToggle+0x34>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e000      	b.n	8002f9c <Presenter_DispLEDMsbToggle+0x28>
	if (msb_pos == -1) return;
 8002f9a:	bf00      	nop
}
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	2000063c 	.word	0x2000063c
 8002fa8:	20000640 	.word	0x20000640

08002fac <Sound_Init>:
 */

#include "Sound.h"

void Sound_Init()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	Buzzer_Init(&htim3, TIM_CHANNEL_1);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <Sound_Init+0x10>)
 8002fb4:	f000 ffa2 	bl	8003efc <Buzzer_Init>
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000042c 	.word	0x2000042c

08002fc0 <HAL_TIM_PeriodElapsedCallback>:
C2P_Data c2p;
static int pre_song = 0;
static int ultraCnt=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	Controller_OutData(&c2p);
 8002fc8:	485f      	ldr	r0, [pc, #380]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002fca:	f7fe fff1 	bl	8001fb0 <Controller_OutData>
	//ultra_execute();
	if(htim->Instance == TIM2) {
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_TIM_PeriodElapsedCallback+0x24>
		FND_DispDataCallBack();
 8002fd8:	f000 fb96 	bl	8003708 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 8002fdc:	f000 fa26 	bl	800342c <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 8002fe0:	f000 f984 	bl	80032ec <StopWatch_IncTimeCallBack>

	}

	if(htim->Instance == TIM5 && c2p.runstop && pre_song == c2p.song){ // buzzer
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d17e      	bne.n	80030ec <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002fee:	4b56      	ldr	r3, [pc, #344]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d079      	beq.n	80030ec <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002ff8:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002ffa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b53      	ldr	r3, [pc, #332]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d171      	bne.n	80030ec <HAL_TIM_PeriodElapsedCallback+0x12c>
		if (ind >= 50) {
 8003008:	4b52      	ldr	r3, [pc, #328]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b31      	cmp	r3, #49	@ 0x31
 800300e:	dd55      	ble.n	80030bc <HAL_TIM_PeriodElapsedCallback+0xfc>
			if (c2p.song == 1){
 8003010:	4b4d      	ldr	r3, [pc, #308]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003012:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003016:	2b01      	cmp	r3, #1
 8003018:	d115      	bne.n	8003046 <HAL_TIM_PeriodElapsedCallback+0x86>
				Buzzer_SetFreq(Song1[inde]);
 800301a:	4b4f      	ldr	r3, [pc, #316]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4f      	ldr	r2, [pc, #316]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 ff7f 	bl	8003f28 <Buzzer_SetFreq>
				if (inde == 95){
 800302a:	4b4b      	ldr	r3, [pc, #300]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b5f      	cmp	r3, #95	@ 0x5f
 8003030:	d103      	bne.n	800303a <HAL_TIM_PeriodElapsedCallback+0x7a>
					inde = 0;
 8003032:	4b49      	ldr	r3, [pc, #292]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e03a      	b.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				}
				else{
					inde ++;
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	4a45      	ldr	r2, [pc, #276]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e034      	b.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				}
			}
			else if (c2p.song == 2){
 8003046:	4b40      	ldr	r3, [pc, #256]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003048:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800304c:	2b02      	cmp	r3, #2
 800304e:	d115      	bne.n	800307c <HAL_TIM_PeriodElapsedCallback+0xbc>
				Buzzer_SetFreq(song2[inde]);
 8003050:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a42      	ldr	r2, [pc, #264]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 ff64 	bl	8003f28 <Buzzer_SetFreq>
				if (inde == 15){
 8003060:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d103      	bne.n	8003070 <HAL_TIM_PeriodElapsedCallback+0xb0>
					inde = 0;
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e01f      	b.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				}
				else{
					inde ++;
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a38      	ldr	r2, [pc, #224]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e019      	b.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				}
			}
			else if (c2p.song == 3){
 800307c:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800307e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003082:	2b03      	cmp	r3, #3
 8003084:	d114      	bne.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				Buzzer_SetFreq(song2[inde]);
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a35      	ldr	r2, [pc, #212]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 ff49 	bl	8003f28 <Buzzer_SetFreq>
				if (inde == 15){
 8003096:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d103      	bne.n	80030a6 <HAL_TIM_PeriodElapsedCallback+0xe6>
					inde = 0;
 800309e:	4b2e      	ldr	r3, [pc, #184]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e004      	b.n	80030b0 <HAL_TIM_PeriodElapsedCallback+0xf0>
				}
				else{
					inde ++;
 80030a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80030ae:	6013      	str	r3, [r2, #0]
				}
			}
			Buzzer_Start();
 80030b0:	f000 ff9e 	bl	8003ff0 <Buzzer_Start>
			ind = 0;
 80030b4:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
		if (ind >= 50) {
 80030ba:	e032      	b.n	8003122 <HAL_TIM_PeriodElapsedCallback+0x162>
		}
		else if (ind >= 25)
 80030bc:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b18      	cmp	r3, #24
 80030c2:	dd0a      	ble.n	80030da <HAL_TIM_PeriodElapsedCallback+0x11a>
		{
			Buzzer_Stop();
 80030c4:	f000 ffa4 	bl	8004010 <Buzzer_Stop>
			ind += c2p.speed;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80030ca:	7b1b      	ldrb	r3, [r3, #12]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b21      	ldr	r3, [pc, #132]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030d6:	6013      	str	r3, [r2, #0]
		if (ind >= 50) {
 80030d8:	e023      	b.n	8003122 <HAL_TIM_PeriodElapsedCallback+0x162>
		}
		else ind += c2p.speed;
 80030da:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80030dc:	7b1b      	ldrb	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80030e8:	6013      	str	r3, [r2, #0]
		if (ind >= 50) {
 80030ea:	e01a      	b.n	8003122 <HAL_TIM_PeriodElapsedCallback+0x162>
	}
	else if (c2p.runstop == 0 || pre_song != c2p.song){
 80030ec:	4b16      	ldr	r3, [pc, #88]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80030ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_TIM_PeriodElapsedCallback+0x146>
 80030f6:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80030f8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d00d      	beq.n	8003122 <HAL_TIM_PeriodElapsedCallback+0x162>
		ind = 0;
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
		inde = 0;
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
		Buzzer_Stop();
 8003112:	f000 ff7d 	bl	8004010 <Buzzer_Stop>
		pre_song = c2p.song;
 8003116:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003118:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800311c:	461a      	mov	r2, r3
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003120:	601a      	str	r2, [r3, #0]
	}

	// LED MSB Toggle
	if (htim->Instance == TIM11) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0f      	ldr	r2, [pc, #60]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_TIM_PeriodElapsedCallback+0x170>
		Presenter_DispLEDMsbToggle();
 800312c:	f7ff ff22 	bl	8002f74 <Presenter_DispLEDMsbToggle>
	}

	if (htim->Instance == TIM10)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0c      	ldr	r2, [pc, #48]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d102      	bne.n	8003140 <HAL_TIM_PeriodElapsedCallback+0x180>
	{
		ultra_flag = 1;
 800313a:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
	}

}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000690 	.word	0x20000690
 800314c:	40000c00 	.word	0x40000c00
 8003150:	200006b8 	.word	0x200006b8
 8003154:	2000068c 	.word	0x2000068c
 8003158:	20000688 	.word	0x20000688
 800315c:	0800ca0c 	.word	0x0800ca0c
 8003160:	0800cb88 	.word	0x0800cb88
 8003164:	40014800 	.word	0x40014800
 8003168:	40014400 	.word	0x40014400
 800316c:	20000708 	.word	0x20000708

08003170 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_UART_RxCpltCallback+0x20>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8003182:	f7ff fadd 	bl	8002740 <Listener_UartCallBack>
	}
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40004400 	.word	0x40004400

08003194 <ap_main>:


int ap_main()
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003198:	4809      	ldr	r0, [pc, #36]	@ (80031c0 <ap_main+0x2c>)
 800319a:	f002 ffa9 	bl	80060f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800319e:	4809      	ldr	r0, [pc, #36]	@ (80031c4 <ap_main+0x30>)
 80031a0:	f002 ffa6 	bl	80060f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 80031a4:	4808      	ldr	r0, [pc, #32]	@ (80031c8 <ap_main+0x34>)
 80031a6:	f002 ffa3 	bl	80060f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80031aa:	4808      	ldr	r0, [pc, #32]	@ (80031cc <ap_main+0x38>)
 80031ac:	f002 ffa0 	bl	80060f0 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		Listener_Excute();
 80031b0:	f7ff f8be 	bl	8002330 <Listener_Excute>
		Controller_Excute();
 80031b4:	f7fe fef5 	bl	8001fa2 <Controller_Excute>
		Presenter_Excute();
 80031b8:	f7ff fb26 	bl	8002808 <Presenter_Excute>
		Listener_Excute();
 80031bc:	bf00      	nop
 80031be:	e7f7      	b.n	80031b0 <ap_main+0x1c>
 80031c0:	200003e4 	.word	0x200003e4
 80031c4:	200004bc 	.word	0x200004bc
 80031c8:	20000504 	.word	0x20000504
 80031cc:	2000054c 	.word	0x2000054c

080031d0 <ap_init>:

	return 0;
}

void ap_init()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
	Listener_Init();
 80031d4:	f7ff f878 	bl	80022c8 <Listener_Init>
	Presenter_Init();
 80031d8:	f7ff fb06 	bl	80027e8 <Presenter_Init>
}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}

080031e0 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	3301      	adds	r3, #1
 8003212:	4259      	negs	r1, r3
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	f001 0103 	and.w	r1, r1, #3
 800321c:	bf58      	it	pl
 800321e:	424b      	negpl	r3, r1
 8003220:	429a      	cmp	r2, r3
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffca 	bl	8003200 <isQueFull>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d113      	bne.n	800329a <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3202      	adds	r2, #2
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	3301      	adds	r3, #1
 8003286:	425a      	negs	r2, r3
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	bf58      	it	pl
 8003292:	4253      	negpl	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6053      	str	r3, [r2, #4]
 8003298:	e000      	b.n	800329c <enQue+0x40>
		return;
 800329a:	bf00      	nop
}
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <deQue>:

int deQue(Que_TypeDef *q)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff ffc3 	bl	8003236 <isQueEmpty>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d114      	bne.n	80032e0 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3202      	adds	r2, #2
 80032be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c2:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	425a      	negs	r2, r3
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	f002 0203 	and.w	r2, r2, #3
 80032d4:	bf58      	it	pl
 80032d6:	4253      	negpl	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6013      	str	r3, [r2, #0]
	return data;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	e001      	b.n	80032e4 <deQue+0x42>
		return;
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 80032f0:	4b03      	ldr	r3, [pc, #12]	@ (8003300 <StopWatch_IncTimeCallBack+0x14>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 80032f8:	f000 f804 	bl	8003304 <StopWatch_IncTime>
	}
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200006bc 	.word	0x200006bc

08003304 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8003308:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <StopWatch_IncTime+0x80>)
 800330a:	889b      	ldrh	r3, [r3, #4]
 800330c:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8003310:	4293      	cmp	r3, r2
 8003312:	d806      	bhi.n	8003322 <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 8003314:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003316:	889b      	ldrh	r3, [r3, #4]
 8003318:	3301      	adds	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <StopWatch_IncTime+0x80>)
 800331e:	809a      	strh	r2, [r3, #4]
		return;
 8003320:	e02c      	b.n	800337c <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 8003322:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003324:	2200      	movs	r2, #0
 8003326:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <StopWatch_IncTime+0x80>)
 800332a:	78db      	ldrb	r3, [r3, #3]
 800332c:	2b3a      	cmp	r3, #58	@ 0x3a
 800332e:	d806      	bhi.n	800333e <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003332:	78db      	ldrb	r3, [r3, #3]
 8003334:	3301      	adds	r3, #1
 8003336:	b2da      	uxtb	r2, r3
 8003338:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <StopWatch_IncTime+0x80>)
 800333a:	70da      	strb	r2, [r3, #3]
		return;
 800333c:	e01e      	b.n	800337c <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003340:	2200      	movs	r2, #0
 8003342:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 8003344:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003346:	789b      	ldrb	r3, [r3, #2]
 8003348:	2b3a      	cmp	r3, #58	@ 0x3a
 800334a:	d806      	bhi.n	800335a <StopWatch_IncTime+0x56>
		stopWatch.min++;
 800334c:	4b0d      	ldr	r3, [pc, #52]	@ (8003384 <StopWatch_IncTime+0x80>)
 800334e:	789b      	ldrb	r3, [r3, #2]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003356:	709a      	strb	r2, [r3, #2]
		return;
 8003358:	e010      	b.n	800337c <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <StopWatch_IncTime+0x80>)
 800335c:	2200      	movs	r2, #0
 800335e:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8003360:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003362:	785b      	ldrb	r3, [r3, #1]
 8003364:	2b16      	cmp	r3, #22
 8003366:	d806      	bhi.n	8003376 <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <StopWatch_IncTime+0x80>)
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	3301      	adds	r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003372:	705a      	strb	r2, [r3, #1]
		return;
 8003374:	e002      	b.n	800337c <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8003376:	4b03      	ldr	r3, [pc, #12]	@ (8003384 <StopWatch_IncTime+0x80>)
 8003378:	2200      	movs	r2, #0
 800337a:	705a      	strb	r2, [r3, #1]
}
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	20000034 	.word	0x20000034

08003388 <StopWatch_Excute>:

watch_t StopWatch_Excute()
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	switch (stopWatchState)
 8003390:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <StopWatch_Excute+0x38>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <StopWatch_Excute+0x16>
 8003398:	2b01      	cmp	r3, #1
 800339a:	d003      	beq.n	80033a4 <StopWatch_Excute+0x1c>
 800339c:	e005      	b.n	80033aa <StopWatch_Excute+0x22>
	{
	case STOP:
		StopWatch_Stop();
 800339e:	f000 f825 	bl	80033ec <StopWatch_Stop>
		break;
 80033a2:	e002      	b.n	80033aa <StopWatch_Excute+0x22>
	case RUN:
		StopWatch_Run();
 80033a4:	f000 f810 	bl	80033c8 <StopWatch_Run>
		break;
 80033a8:	bf00      	nop
	}
	return stopWatch;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <StopWatch_Excute+0x3c>)
 80033ae:	6810      	ldr	r0, [r2, #0]
 80033b0:	6018      	str	r0, [r3, #0]
 80033b2:	8892      	ldrh	r2, [r2, #4]
 80033b4:	809a      	strh	r2, [r3, #4]
}
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200006bc 	.word	0x200006bc
 80033c4:	20000034 	.word	0x20000034

080033c8 <StopWatch_Run>:


void StopWatch_Run()
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
	if (controlData.id == RUN_STOP) {
 80033cc:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <StopWatch_Run+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d102      	bne.n	80033da <StopWatch_Run+0x12>
		stopWatchState = STOP;
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <StopWatch_Run+0x20>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
	//		FND_WriteDp(FND_DP_1000, FND_DP_ON);
	//	}
	//	else {
	//		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	//	}
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	200005e0 	.word	0x200005e0
 80033e8:	200006bc 	.word	0x200006bc

080033ec <StopWatch_Stop>:

void StopWatch_Stop()
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0

	stopWatch.msec = 0;
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <StopWatch_Stop+0x34>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <StopWatch_Stop+0x34>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <StopWatch_Stop+0x34>)
 80033fe:	2200      	movs	r2, #0
 8003400:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <StopWatch_Stop+0x34>)
 8003404:	2200      	movs	r2, #0
 8003406:	705a      	strb	r2, [r3, #1]
	if (controlData.id == RUN_STOP) {
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <StopWatch_Stop+0x38>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d102      	bne.n	8003416 <StopWatch_Stop+0x2a>
		stopWatchState = RUN;
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <StopWatch_Stop+0x3c>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
	}

	//FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20000034 	.word	0x20000034
 8003424:	200005e0 	.word	0x200005e0
 8003428:	200006bc 	.word	0x200006bc

0800342c <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003432:	889b      	ldrh	r3, [r3, #4]
 8003434:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8003438:	4293      	cmp	r3, r2
 800343a:	d806      	bhi.n	800344a <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800343e:	889b      	ldrh	r3, [r3, #4]
 8003440:	3301      	adds	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003446:	809a      	strh	r2, [r3, #4]
		return;
 8003448:	e02c      	b.n	80034a4 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800344c:	2200      	movs	r2, #0
 800344e:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8003450:	4b16      	ldr	r3, [pc, #88]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003452:	78db      	ldrb	r3, [r3, #3]
 8003454:	2b3a      	cmp	r3, #58	@ 0x3a
 8003456:	d806      	bhi.n	8003466 <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b12      	ldr	r3, [pc, #72]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003462:	70da      	strb	r2, [r3, #3]
		return;
 8003464:	e01e      	b.n	80034a4 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 8003466:	4b11      	ldr	r3, [pc, #68]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003468:	2200      	movs	r2, #0
 800346a:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 800346c:	4b0f      	ldr	r3, [pc, #60]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800346e:	789b      	ldrb	r3, [r3, #2]
 8003470:	2b3a      	cmp	r3, #58	@ 0x3a
 8003472:	d806      	bhi.n	8003482 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8003474:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	3301      	adds	r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800347e:	709a      	strb	r2, [r3, #2]
		return;
 8003480:	e010      	b.n	80034a4 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003484:	2200      	movs	r2, #0
 8003486:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8003488:	4b08      	ldr	r3, [pc, #32]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	2b16      	cmp	r3, #22
 800348e:	d806      	bhi.n	800349e <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	3301      	adds	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 800349a:	705a      	strb	r2, [r3, #1]
		return;
 800349c:	e002      	b.n	80034a4 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 800349e:	4b03      	ldr	r3, [pc, #12]	@ (80034ac <TimeWatch_IncTimeCallBack+0x80>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	705a      	strb	r2, [r3, #1]
}
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	2000003c 	.word	0x2000003c

080034b0 <TimeWatch_Excute>:

watch_t TimeWatch_Excute()
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	return timeWatch;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <TimeWatch_Excute+0x20>)
 80034bc:	6810      	ldr	r0, [r2, #0]
 80034be:	6018      	str	r0, [r3, #0]
 80034c0:	8892      	ldrh	r2, [r2, #4]
 80034c2:	809a      	strh	r2, [r3, #4]
//		FND_WriteDp(FND_DP_100, FND_DP_ON);
//	}
//	else {
//		FND_WriteDp(FND_DP_100, FND_DP_OFF);
//	}
}
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	2000003c 	.word	0x2000003c

080034d4 <Button_Init>:
Button_Handler_t hBtnSpeedUp;
Button_Handler_t hBtnSpeedDown;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	889b      	ldrh	r3, [r3, #4]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f001 fc34 	bl	8004d80 <HAL_GPIO_ReadPin>
 8003518:	4603      	mov	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10a      	bne.n	800353a <Button_GetState+0x3a>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 800352a:	2002      	movs	r0, #2
 800352c:	f000 fdf2 	bl	8004114 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8003536:	2301      	movs	r3, #1
 8003538:	e00f      	b.n	800355a <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <Button_GetState+0x58>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8003548:	2002      	movs	r0, #2
 800354a:	f000 fde3 	bl	8004114 <HAL_Delay>
		hbtn->prevState = RELEASED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8003554:	2302      	movs	r3, #2
 8003556:	e000      	b.n	800355a <Button_GetState+0x5a>
	}
	return NO_ACT;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 800356e:	4a06      	ldr	r2, [pc, #24]	@ (8003588 <DC_Motor_Init+0x24>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8003574:	4a05      	ldr	r2, [pc, #20]	@ (800358c <DC_Motor_Init+0x28>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6013      	str	r3, [r2, #0]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	200006f0 	.word	0x200006f0
 800358c:	200006f4 	.word	0x200006f4

08003590 <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	if (freq < 1) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <DC_Motor_SetFreq+0x14>
		freq = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e007      	b.n	80035b4 <DC_Motor_SetFreq+0x24>
	}
	else if (freq > 10000) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d902      	bls.n	80035b4 <DC_Motor_SetFreq+0x24>
		freq = 10000;
 80035ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 80035b2:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(hmotorTim, 1000000/freq-1);
 80035b4:	4a24      	ldr	r2, [pc, #144]	@ (8003648 <DC_Motor_SetFreq+0xb8>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035bc:	4b23      	ldr	r3, [pc, #140]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3a01      	subs	r2, #1
 80035c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035c6:	4a20      	ldr	r2, [pc, #128]	@ (8003648 <DC_Motor_SetFreq+0xb8>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ce:	4b1f      	ldr	r3, [pc, #124]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3a01      	subs	r2, #1
 80035d4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <DC_Motor_SetFreq+0xc0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <DC_Motor_SetFreq+0x62>
 80035de:	4a1d      	ldr	r2, [pc, #116]	@ (8003654 <DC_Motor_SetFreq+0xc4>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e6:	4b19      	ldr	r3, [pc, #100]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3a01      	subs	r2, #1
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035f0:	e024      	b.n	800363c <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 80035f2:	4b17      	ldr	r3, [pc, #92]	@ (8003650 <DC_Motor_SetFreq+0xc0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d109      	bne.n	800360e <DC_Motor_SetFreq+0x7e>
 80035fa:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <DC_Motor_SetFreq+0xc4>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	4a12      	ldr	r2, [pc, #72]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	3b01      	subs	r3, #1
 800360a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800360c:	e016      	b.n	800363c <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <DC_Motor_SetFreq+0xc0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d109      	bne.n	800362a <DC_Motor_SetFreq+0x9a>
 8003616:	4a0f      	ldr	r2, [pc, #60]	@ (8003654 <DC_Motor_SetFreq+0xc4>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	4a0b      	ldr	r2, [pc, #44]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003628:	e008      	b.n	800363c <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <DC_Motor_SetFreq+0xc4>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	4a06      	ldr	r2, [pc, #24]	@ (800364c <DC_Motor_SetFreq+0xbc>)
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	000f4240 	.word	0x000f4240
 800364c:	200006f0 	.word	0x200006f0
 8003650:	200006f4 	.word	0x200006f4
 8003654:	0007a120 	.word	0x0007a120

08003658 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 800365c:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <DC_Motor_Start+0x18>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <DC_Motor_Start+0x1c>)
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f002 fdfe 	bl	8006268 <HAL_TIM_PWM_Start>
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	200006f0 	.word	0x200006f0
 8003674:	200006f4 	.word	0x200006f4

08003678 <DC_Motor_Stop>:
void DC_Motor_Stop()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <DC_Motor_Stop+0x18>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a04      	ldr	r2, [pc, #16]	@ (8003694 <DC_Motor_Stop+0x1c>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f002 fe9e 	bl	80063c8 <HAL_TIM_PWM_Stop>
}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200006f0 	.word	0x200006f0
 8003694:	200006f4 	.word	0x200006f4

08003698 <FND_WriteDp>:
static uint8_t fndDispDp = 0;   // fnd dp data, xxxx1111 -> xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	460a      	mov	r2, r1
 80036a2:	71fb      	strb	r3, [r7, #7]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 80036a8:	79bb      	ldrb	r3, [r7, #6]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <FND_WriteDp+0x4c>)
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <FND_WriteDp+0x4c>)
 80036ba:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 80036bc:	e00b      	b.n	80036d6 <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	b25a      	sxtb	r2, r3
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <FND_WriteDp+0x4c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	4013      	ands	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <FND_WriteDp+0x4c>)
 80036d4:	701a      	strb	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	200006fa 	.word	0x200006fa

080036e8 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <FND_WriteData+0x1c>)
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	8013      	strh	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	200006f8 	.word	0x200006f8

08003708 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 800370c:	4b80      	ldr	r3, [pc, #512]	@ (8003910 <FND_DispDataCallBack+0x208>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	425a      	negs	r2, r3
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	f002 0207 	and.w	r2, r2, #7
 800371c:	bf58      	it	pl
 800371e:	4253      	negpl	r3, r2
 8003720:	4a7b      	ldr	r2, [pc, #492]	@ (8003910 <FND_DispDataCallBack+0x208>)
 8003722:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8003724:	4b7a      	ldr	r3, [pc, #488]	@ (8003910 <FND_DispDataCallBack+0x208>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b07      	cmp	r3, #7
 800372a:	f200 80ee 	bhi.w	800390a <FND_DispDataCallBack+0x202>
 800372e:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <FND_DispDataCallBack+0x2c>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003755 	.word	0x08003755
 8003738:	08003783 	.word	0x08003783
 800373c:	080037bb 	.word	0x080037bb
 8003740:	080037f3 	.word	0x080037f3
 8003744:	0800382b 	.word	0x0800382b
 8003748:	08003863 	.word	0x08003863
 800374c:	0800389b 	.word	0x0800389b
 8003750:	080038d3 	.word	0x080038d3
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8003754:	f000 f900 	bl	8003958 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8003758:	4b6e      	ldr	r3, [pc, #440]	@ (8003914 <FND_DispDataCallBack+0x20c>)
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4b6e      	ldr	r3, [pc, #440]	@ (8003918 <FND_DispDataCallBack+0x210>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	08d9      	lsrs	r1, r3, #3
 8003764:	460b      	mov	r3, r1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f913 	bl	800399c <FND_DispDigit>
		FND_DispOn(digitPos);
 8003776:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <FND_DispDataCallBack+0x208>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f8d4 	bl	8003928 <FND_DispOn>
		break;
 8003780:	e0c3      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8003782:	f000 f8e9 	bl	8003958 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 8003786:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <FND_DispDataCallBack+0x20c>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	4a63      	ldr	r2, [pc, #396]	@ (8003918 <FND_DispDataCallBack+0x210>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	b29a      	uxth	r2, r3
 8003794:	4b60      	ldr	r3, [pc, #384]	@ (8003918 <FND_DispDataCallBack+0x210>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	08d9      	lsrs	r1, r3, #3
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f8f7 	bl	800399c <FND_DispDigit>
		FND_DispOn(digitPos);
 80037ae:	4b58      	ldr	r3, [pc, #352]	@ (8003910 <FND_DispDataCallBack+0x208>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f8b8 	bl	8003928 <FND_DispOn>
		break;
 80037b8:	e0a7      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80037ba:	f000 f8cd 	bl	8003958 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 80037be:	4b55      	ldr	r3, [pc, #340]	@ (8003914 <FND_DispDataCallBack+0x20c>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	4a56      	ldr	r2, [pc, #344]	@ (800391c <FND_DispDataCallBack+0x214>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	4b52      	ldr	r3, [pc, #328]	@ (8003918 <FND_DispDataCallBack+0x210>)
 80037ce:	fba3 1302 	umull	r1, r3, r3, r2
 80037d2:	08d9      	lsrs	r1, r3, #3
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f8db 	bl	800399c <FND_DispDigit>
		FND_DispOn(digitPos);
 80037e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <FND_DispDataCallBack+0x208>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f89c 	bl	8003928 <FND_DispOn>
		break;
 80037f0:	e08b      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80037f2:	f000 f8b1 	bl	8003958 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 80037f6:	4b47      	ldr	r3, [pc, #284]	@ (8003914 <FND_DispDataCallBack+0x20c>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	4a49      	ldr	r2, [pc, #292]	@ (8003920 <FND_DispDataCallBack+0x218>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	b29a      	uxth	r2, r3
 8003804:	4b44      	ldr	r3, [pc, #272]	@ (8003918 <FND_DispDataCallBack+0x210>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	08d9      	lsrs	r1, r3, #3
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f8bf 	bl	800399c <FND_DispDigit>
		FND_DispOn(digitPos);
 800381e:	4b3c      	ldr	r3, [pc, #240]	@ (8003910 <FND_DispDataCallBack+0x208>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f880 	bl	8003928 <FND_DispOn>
		break;
 8003828:	e06f      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800382a:	f000 f895 	bl	8003958 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 800382e:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <FND_DispDataCallBack+0x21c>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 800383a:	200a      	movs	r0, #10
 800383c:	f000 f8ae 	bl	800399c <FND_DispDigit>
 8003840:	e002      	b.n	8003848 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8003842:	200b      	movs	r0, #11
 8003844:	f000 f8aa 	bl	800399c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <FND_DispDataCallBack+0x208>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	425a      	negs	r2, r3
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	f002 0203 	and.w	r2, r2, #3
 8003856:	bf58      	it	pl
 8003858:	4253      	negpl	r3, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f864 	bl	8003928 <FND_DispOn>
		break;
 8003860:	e053      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8003862:	f000 f879 	bl	8003958 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8003866:	4b2f      	ldr	r3, [pc, #188]	@ (8003924 <FND_DispDataCallBack+0x21c>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8003872:	200a      	movs	r0, #10
 8003874:	f000 f892 	bl	800399c <FND_DispDigit>
 8003878:	e002      	b.n	8003880 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800387a:	200b      	movs	r0, #11
 800387c:	f000 f88e 	bl	800399c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8003880:	4b23      	ldr	r3, [pc, #140]	@ (8003910 <FND_DispDataCallBack+0x208>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	425a      	negs	r2, r3
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	bf58      	it	pl
 8003890:	4253      	negpl	r3, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f848 	bl	8003928 <FND_DispOn>
		break;
 8003898:	e037      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800389a:	f000 f85d 	bl	8003958 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 800389e:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <FND_DispDataCallBack+0x21c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 80038aa:	200a      	movs	r0, #10
 80038ac:	f000 f876 	bl	800399c <FND_DispDigit>
 80038b0:	e002      	b.n	80038b8 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80038b2:	200b      	movs	r0, #11
 80038b4:	f000 f872 	bl	800399c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80038b8:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <FND_DispDataCallBack+0x208>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	425a      	negs	r2, r3
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	bf58      	it	pl
 80038c8:	4253      	negpl	r3, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f82c 	bl	8003928 <FND_DispOn>
		break;
 80038d0:	e01b      	b.n	800390a <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 80038d2:	f000 f841 	bl	8003958 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 80038d6:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <FND_DispDataCallBack+0x21c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 80038e2:	200a      	movs	r0, #10
 80038e4:	f000 f85a 	bl	800399c <FND_DispDigit>
 80038e8:	e002      	b.n	80038f0 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 80038ea:	200b      	movs	r0, #11
 80038ec:	f000 f856 	bl	800399c <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <FND_DispDataCallBack+0x208>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	425a      	negs	r2, r3
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	bf58      	it	pl
 8003900:	4253      	negpl	r3, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f810 	bl	8003928 <FND_DispOn>
		break;
 8003908:	bf00      	nop
	}
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200006fc 	.word	0x200006fc
 8003914:	200006f8 	.word	0x200006f8
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	51eb851f 	.word	0x51eb851f
 8003920:	10624dd3 	.word	0x10624dd3
 8003924:	200006fa 	.word	0x200006fa

08003928 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8003930:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <FND_DispOn+0x2c>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003938:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <FND_DispOn+0x2c>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b29b      	uxth	r3, r3
 8003944:	2200      	movs	r2, #0
 8003946:	4619      	mov	r1, r3
 8003948:	f001 fa32 	bl	8004db0 <HAL_GPIO_WritePin>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000044 	.word	0x20000044

08003958 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	e010      	b.n	8003986 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <FND_DispOffAll+0x40>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800396c:	4a0a      	ldr	r2, [pc, #40]	@ (8003998 <FND_DispOffAll+0x40>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	b29b      	uxth	r3, r3
 8003978:	2201      	movs	r2, #1
 800397a:	4619      	mov	r1, r3
 800397c:	f001 fa18 	bl	8004db0 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3301      	adds	r3, #1
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b03      	cmp	r3, #3
 800398a:	ddeb      	ble.n	8003964 <FND_DispOffAll+0xc>
	}
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000044 	.word	0x20000044

0800399c <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80039a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a24 <FND_DispDigit+0x88>)
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e02c      	b.n	8003a12 <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	3318      	adds	r3, #24
 80039bc:	443b      	add	r3, r7
 80039be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80039c2:	461a      	mov	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	fa42 f303 	asr.w	r3, r2, r3
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10e      	bne.n	80039f0 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 80039d2:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <FND_DispDigit+0x8c>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <FND_DispDigit+0x8c>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	4619      	mov	r1, r3
 80039ea:	f001 f9e1 	bl	8004db0 <HAL_GPIO_WritePin>
 80039ee:	e00d      	b.n	8003a0c <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 80039f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <FND_DispDigit+0x8c>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80039f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a28 <FND_DispDigit+0x8c>)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2201      	movs	r2, #1
 8003a06:	4619      	mov	r1, r3
 8003a08:	f001 f9d2 	bl	8004db0 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b07      	cmp	r3, #7
 8003a16:	ddcf      	ble.n	80039b8 <FND_DispDigit+0x1c>
		}
	}
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	0800c9e8 	.word	0x0800c9e8
 8003a28:	20000064 	.word	0x20000064

08003a2c <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8003a34:	4a18      	ldr	r2, [pc, #96]	@ (8003a98 <LCD_Init+0x6c>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8003a3a:	2032      	movs	r0, #50	@ 0x32
 8003a3c:	f000 fb6a 	bl	8004114 <HAL_Delay>
	LCD_cmdMode();
 8003a40:	f000 f850 	bl	8003ae4 <LCD_cmdMode>
	LCD_writeMode();
 8003a44:	f000 f872 	bl	8003b2c <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8003a48:	2030      	movs	r0, #48	@ 0x30
 8003a4a:	f000 f8a5 	bl	8003b98 <LCD_sendNibbleData>
	HAL_Delay(5);
 8003a4e:	2005      	movs	r0, #5
 8003a50:	f000 fb60 	bl	8004114 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8003a54:	2030      	movs	r0, #48	@ 0x30
 8003a56:	f000 f89f 	bl	8003b98 <LCD_sendNibbleData>
	HAL_Delay(1);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f000 fb5a 	bl	8004114 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8003a60:	2030      	movs	r0, #48	@ 0x30
 8003a62:	f000 f899 	bl	8003b98 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8003a66:	2020      	movs	r0, #32
 8003a68:	f000 f896 	bl	8003b98 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8003a6c:	2028      	movs	r0, #40	@ 0x28
 8003a6e:	f000 f8b7 	bl	8003be0 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8003a72:	2008      	movs	r0, #8
 8003a74:	f000 f8b4 	bl	8003be0 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f000 f8b1 	bl	8003be0 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8003a7e:	2006      	movs	r0, #6
 8003a80:	f000 f8ae 	bl	8003be0 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8003a84:	200c      	movs	r0, #12
 8003a86:	f000 f8ab 	bl	8003be0 <LCD_sendData>
	LCD_backLightOn();
 8003a8a:	f000 f81b 	bl	8003ac4 <LCD_backLightOn>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000704 	.word	0x20000704

08003a9c <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 10);
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <LCD_sendI2C+0x24>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	1dfa      	adds	r2, r7, #7
 8003aac:	230a      	movs	r3, #10
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	214e      	movs	r1, #78	@ 0x4e
 8003ab4:	f001 fada 	bl	800506c <HAL_I2C_Master_Transmit>
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000704 	.word	0x20000704

08003ac4 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <LCD_backLightOn+0x1c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <LCD_backLightOn+0x1c>)
 8003ad4:	701a      	strb	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20000700 	.word	0x20000700

08003ae4 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <LCD_cmdMode+0x20>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <LCD_cmdMode+0x20>)
 8003af4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003af6:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <LCD_cmdMode+0x20>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ffce 	bl	8003a9c <LCD_sendI2C>
}
 8003b00:	bf00      	nop
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000700 	.word	0x20000700

08003b08 <LCD_charMode>:

void LCD_charMode()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8003b0c:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <LCD_charMode+0x20>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <LCD_charMode+0x20>)
 8003b18:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003b1a:	4b03      	ldr	r3, [pc, #12]	@ (8003b28 <LCD_charMode+0x20>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffbc 	bl	8003a9c <LCD_sendI2C>
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000700 	.word	0x20000700

08003b2c <LCD_writeMode>:

void LCD_writeMode()
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <LCD_writeMode+0x20>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f023 0302 	bic.w	r3, r3, #2
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <LCD_writeMode+0x20>)
 8003b3c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003b3e:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <LCD_writeMode+0x20>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ffaa 	bl	8003a9c <LCD_sendI2C>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000700 	.word	0x20000700

08003b50 <LCD_E_High>:

void LCD_E_High()
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <LCD_E_High+0x20>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <LCD_E_High+0x20>)
 8003b60:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <LCD_E_High+0x20>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff98 	bl	8003a9c <LCD_sendI2C>
}
 8003b6c:	bf00      	nop
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000700 	.word	0x20000700

08003b74 <LCD_E_Low>:

void LCD_E_Low()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <LCD_E_Low+0x20>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <LCD_E_Low+0x20>)
 8003b84:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003b86:	4b03      	ldr	r3, [pc, #12]	@ (8003b94 <LCD_E_Low+0x20>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff86 	bl	8003a9c <LCD_sendI2C>
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000700 	.word	0x20000700

08003b98 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8003ba2:	f7ff ffd5 	bl	8003b50 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	f023 030f 	bic.w	r3, r3, #15
 8003bae:	b25a      	sxtb	r2, r3
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <LCD_sendNibbleData+0x44>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <LCD_sendNibbleData+0x44>)
 8003bc4:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8003bc6:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <LCD_sendNibbleData+0x44>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff66 	bl	8003a9c <LCD_sendI2C>
	LCD_E_Low();
 8003bd0:	f7ff ffd0 	bl	8003b74 <LCD_E_Low>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000700 	.word	0x20000700

08003be0 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ffd3 	bl	8003b98 <LCD_sendNibbleData>

	data = data << 4;
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ffcc 	bl	8003b98 <LCD_sendNibbleData>
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8003c12:	f7ff ff8b 	bl	8003b2c <LCD_writeMode>
	LCD_cmdMode();
 8003c16:	f7ff ff65 	bl	8003ae4 <LCD_cmdMode>
	LCD_sendData(data);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ffdf 	bl	8003be0 <LCD_sendData>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8003c34:	f7ff ff7a 	bl	8003b2c <LCD_writeMode>
	LCD_charMode();
 8003c38:	f7ff ff66 	bl	8003b08 <LCD_charMode>
	LCD_sendData(data);
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff ffce 	bl	8003be0 <LCD_sendData>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <LCD_writeString>:

void LCD_writeString(char *str)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e009      	b.n	8003c6e <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ffe1 	bl	8003c2a <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4413      	add	r3, r2
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1ef      	bne.n	8003c5a <LCD_writeString+0xe>
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	71fb      	strb	r3, [r7, #7]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	019b      	lsls	r3, r3, #6
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	79bb      	ldrb	r3, [r7, #6]
 8003cac:	4413      	add	r3, r2
 8003cae:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	3b80      	subs	r3, #128	@ 0x80
 8003cb4:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ffa5 	bl	8003c08 <LCD_writeCmdData>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	603a      	str	r2, [r7, #0]
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8003cd6:	79ba      	ldrb	r2, [r7, #6]
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ffd1 	bl	8003c84 <LCD_gotoXY>
	LCD_writeString(str);
 8003ce2:	6838      	ldr	r0, [r7, #0]
 8003ce4:	f7ff ffb2 	bl	8003c4c <LCD_writeString>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <LedBar_Write>:
void LedBar_Init(){

}

void LedBar_Write(uint8_t data)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e027      	b.n	8003d50 <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 8003d00:	79fa      	ldrb	r2, [r7, #7]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	fa42 f303 	asr.w	r3, r2, r3
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10e      	bne.n	8003d2e <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 8003d10:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <LedBar_Write+0x70>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003d18:	4a11      	ldr	r2, [pc, #68]	@ (8003d60 <LedBar_Write+0x70>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2200      	movs	r2, #0
 8003d26:	4619      	mov	r1, r3
 8003d28:	f001 f842 	bl	8004db0 <HAL_GPIO_WritePin>
 8003d2c:	e00d      	b.n	8003d4a <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <LedBar_Write+0x70>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <LedBar_Write+0x70>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	4619      	mov	r1, r3
 8003d46:	f001 f833 	bl	8004db0 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	ddd4      	ble.n	8003d00 <LedBar_Write+0x10>
		}
	}
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200000a4 	.word	0x200000a4

08003d64 <ultra_trig_set>:
static int distance = 0;
static uint32_t echoStart = 0;
static uint32_t echoEnd = 0;
static int d = 15;

int ultra_trig_set() {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
//	static uint32_t cnt = 0;
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003d68:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <ultra_trig_set+0x70>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_GPIO_WritePin(Ultra_Trig.GPIOx, Ultra_Trig.pinNum, GPIO_PIN_RESET);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003d76:	6852      	ldr	r2, [r2, #4]
 8003d78:	b291      	uxth	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f817 	bl	8004db0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003d82:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <ultra_trig_set+0x70>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24
	while ( __HAL_TIM_GET_COUNTER(&htim10) < 10) {
 8003d8a:	bf00      	nop
 8003d8c:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <ultra_trig_set+0x70>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	2b09      	cmp	r3, #9
 8003d94:	d9fa      	bls.n	8003d8c <ultra_trig_set+0x28>
	}
	HAL_GPIO_WritePin(Ultra_Trig.GPIOx, Ultra_Trig.pinNum, GPIO_PIN_SET);
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003d9c:	6852      	ldr	r2, [r2, #4]
 8003d9e:	b291      	uxth	r1, r2
 8003da0:	2201      	movs	r2, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f804 	bl	8004db0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003da8:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <ultra_trig_set+0x70>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2200      	movs	r2, #0
 8003dae:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < 10) {
 8003db0:	bf00      	nop
 8003db2:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <ultra_trig_set+0x70>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d9fa      	bls.n	8003db2 <ultra_trig_set+0x4e>
	}
	HAL_GPIO_WritePin(Ultra_Trig.GPIOx, Ultra_Trig.pinNum, GPIO_PIN_RESET);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <ultra_trig_set+0x74>)
 8003dc2:	6852      	ldr	r2, [r2, #4]
 8003dc4:	b291      	uxth	r1, r2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fff1 	bl	8004db0 <HAL_GPIO_WritePin>
	return 1;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000504 	.word	0x20000504
 8003dd8:	200000e4 	.word	0x200000e4

08003ddc <ultra_start>:

int ultra_start() {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003de2:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <ultra_start+0x9c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(Ultra_Echo.GPIOx, Ultra_Echo.pinNum)
 8003dea:	bf00      	nop
 8003dec:	4b23      	ldr	r3, [pc, #140]	@ (8003e7c <ultra_start+0xa0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <ultra_start+0xa0>)
 8003df2:	6852      	ldr	r2, [r2, #4]
 8003df4:	b292      	uxth	r2, r2
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 ffc1 	bl	8004d80 <HAL_GPIO_ReadPin>
 8003dfe:	4603      	mov	r3, r0
			== GPIO_PIN_RESET) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f3      	beq.n	8003dec <ultra_start+0x10>
	}
	echoStart = __HAL_TIM_GET_COUNTER(&htim10);
 8003e04:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <ultra_start+0x9c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003e80 <ultra_start+0xa4>)
 8003e0c:	6013      	str	r3, [r2, #0]
	while (HAL_GPIO_ReadPin(Ultra_Echo.GPIOx, Ultra_Echo.pinNum) == GPIO_PIN_SET) {
 8003e0e:	bf00      	nop
 8003e10:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <ultra_start+0xa0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <ultra_start+0xa0>)
 8003e16:	6852      	ldr	r2, [r2, #4]
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 ffaf 	bl	8004d80 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d0f3      	beq.n	8003e10 <ultra_start+0x34>
	}
	echoEnd = __HAL_TIM_GET_COUNTER(&htim10);
 8003e28:	4b13      	ldr	r3, [pc, #76]	@ (8003e78 <ultra_start+0x9c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <ultra_start+0xa8>)
 8003e30:	6013      	str	r3, [r2, #0]

	uint32_t diff =
			(echoEnd >= echoStart) ?
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <ultra_start+0xa8>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <ultra_start+0xa4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
					(echoEnd - echoStart) : (0xFFFF - echoStart + echoEnd);
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d305      	bcc.n	8003e4a <ultra_start+0x6e>
 8003e3e:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <ultra_start+0xa8>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <ultra_start+0xa4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	e007      	b.n	8003e5a <ultra_start+0x7e>
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <ultra_start+0xa8>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <ultra_start+0xa4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003e58:	33ff      	adds	r3, #255	@ 0xff
	uint32_t diff =
 8003e5a:	607b      	str	r3, [r7, #4]
	distance = diff / 58;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e88 <ultra_start+0xac>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <ultra_start+0xb0>)
 8003e6a:	601a      	str	r2, [r3, #0]

	return distance;  // 측정 성공
 8003e6c:	4b07      	ldr	r3, [pc, #28]	@ (8003e8c <ultra_start+0xb0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000504 	.word	0x20000504
 8003e7c:	200000ec 	.word	0x200000ec
 8003e80:	20000710 	.word	0x20000710
 8003e84:	20000714 	.word	0x20000714
 8003e88:	8d3dcb09 	.word	0x8d3dcb09
 8003e8c:	2000070c 	.word	0x2000070c

08003e90 <ultra_execute>:

uint8_t ultra_execute() {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	static int intrCnt = 0;
	if (!ultra_flag)
 8003e94:	4b16      	ldr	r3, [pc, #88]	@ (8003ef0 <ultra_execute+0x60>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <ultra_execute+0x10>
		return 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e024      	b.n	8003eea <ultra_execute+0x5a>
	ultra_flag = 0;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <ultra_execute+0x60>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
	intrCnt++;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <ultra_execute+0x64>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <ultra_execute+0x64>)
 8003eae:	6013      	str	r3, [r2, #0]
	if (intrCnt < 10) {
 8003eb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <ultra_execute+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	dc01      	bgt.n	8003ebc <ultra_execute+0x2c>
		return 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e016      	b.n	8003eea <ultra_execute+0x5a>
	}
	intrCnt = 0;
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <ultra_execute+0x64>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
	if (ultra_trig_set()) {
 8003ec2:	f7ff ff4f 	bl	8003d64 <ultra_trig_set>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00d      	beq.n	8003ee8 <ultra_execute+0x58>
		d = ultra_start();  // 거리 측정 시작
 8003ecc:	f7ff ff86 	bl	8003ddc <ultra_start>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <ultra_execute+0x68>)
 8003ed4:	6013      	str	r3, [r2, #0]
		if (d != -1) {
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <ultra_execute+0x68>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d003      	beq.n	8003ee8 <ultra_execute+0x58>
			return d;
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <ultra_execute+0x68>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e000      	b.n	8003eea <ultra_execute+0x5a>
		}
	}
	return 0;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000708 	.word	0x20000708
 8003ef4:	20000718 	.word	0x20000718
 8003ef8:	200000f4 	.word	0x200000f4

08003efc <Buzzer_Init>:

static TIM_HandleTypeDef *hbuzzerTim;
static uint32_t buzzerTimChannel;

void Buzzer_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
	hbuzzerTim = htim;
 8003f06:	4a06      	ldr	r2, [pc, #24]	@ (8003f20 <Buzzer_Init+0x24>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6013      	str	r3, [r2, #0]
	buzzerTimChannel = channel;
 8003f0c:	4a05      	ldr	r2, [pc, #20]	@ (8003f24 <Buzzer_Init+0x28>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6013      	str	r3, [r2, #0]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	2000071c 	.word	0x2000071c
 8003f24:	20000720 	.word	0x20000720

08003f28 <Buzzer_SetFreq>:

void Buzzer_SetFreq(uint32_t freq)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	if (freq < 100) {
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b63      	cmp	r3, #99	@ 0x63
 8003f34:	d802      	bhi.n	8003f3c <Buzzer_SetFreq+0x14>
		freq = 100;
 8003f36:	2364      	movs	r3, #100	@ 0x64
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e007      	b.n	8003f4c <Buzzer_SetFreq+0x24>
	}
	else if (freq > 10000) {
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d902      	bls.n	8003f4c <Buzzer_SetFreq+0x24>
		freq = 10000;
 8003f46:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003f4a:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(hbuzzerTim, 1000000/freq-1);
 8003f4c:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <Buzzer_SetFreq+0xb8>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f54:	4b23      	ldr	r3, [pc, #140]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3a01      	subs	r2, #1
 8003f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f5e:	4a20      	ldr	r2, [pc, #128]	@ (8003fe0 <Buzzer_SetFreq+0xb8>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f66:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3a01      	subs	r2, #1
 8003f6c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hbuzzerTim, buzzerTimChannel, 1000000/freq/2-1);
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <Buzzer_SetFreq+0xc0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <Buzzer_SetFreq+0x62>
 8003f76:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <Buzzer_SetFreq+0xc4>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7e:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3a01      	subs	r2, #1
 8003f86:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003f88:	e024      	b.n	8003fd4 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim, buzzerTimChannel, 1000000/freq/2-1);
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <Buzzer_SetFreq+0xc0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d109      	bne.n	8003fa6 <Buzzer_SetFreq+0x7e>
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <Buzzer_SetFreq+0xc4>)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	4a12      	ldr	r2, [pc, #72]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003fa4:	e016      	b.n	8003fd4 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim, buzzerTimChannel, 1000000/freq/2-1);
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <Buzzer_SetFreq+0xc0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d109      	bne.n	8003fc2 <Buzzer_SetFreq+0x9a>
 8003fae:	4a0f      	ldr	r2, [pc, #60]	@ (8003fec <Buzzer_SetFreq+0xc4>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003fc0:	e008      	b.n	8003fd4 <Buzzer_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hbuzzerTim, buzzerTimChannel, 1000000/freq/2-1);
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <Buzzer_SetFreq+0xc4>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fca:	4a06      	ldr	r2, [pc, #24]	@ (8003fe4 <Buzzer_SetFreq+0xbc>)
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	000f4240 	.word	0x000f4240
 8003fe4:	2000071c 	.word	0x2000071c
 8003fe8:	20000720 	.word	0x20000720
 8003fec:	0007a120 	.word	0x0007a120

08003ff0 <Buzzer_Start>:

void Buzzer_Start()
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hbuzzerTim, buzzerTimChannel);
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <Buzzer_Start+0x18>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <Buzzer_Start+0x1c>)
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 f932 	bl	8006268 <HAL_TIM_PWM_Start>
}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	2000071c 	.word	0x2000071c
 800400c:	20000720 	.word	0x20000720

08004010 <Buzzer_Stop>:
void Buzzer_Stop()
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hbuzzerTim, buzzerTimChannel);
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <Buzzer_Stop+0x18>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <Buzzer_Stop+0x1c>)
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f002 f9d2 	bl	80063c8 <HAL_TIM_PWM_Stop>
}
 8004024:	bf00      	nop
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000071c 	.word	0x2000071c
 800402c:	20000720 	.word	0x20000720

08004030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004034:	4b0e      	ldr	r3, [pc, #56]	@ (8004070 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0d      	ldr	r2, [pc, #52]	@ (8004070 <HAL_Init+0x40>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800403e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <HAL_Init+0x40>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <HAL_Init+0x40>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 f94f 	bl	80042fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	2000      	movs	r0, #0
 8004060:	f000 f808 	bl	8004074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f7fd fa32 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_InitTick+0x54>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_InitTick+0x58>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4619      	mov	r1, r3
 8004086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408a:	fbb3 f3f1 	udiv	r3, r3, r1
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f967 	bl	8004366 <HAL_SYSTICK_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e00e      	b.n	80040c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d80a      	bhi.n	80040be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a8:	2200      	movs	r2, #0
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	f000 f92f 	bl	8004312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b4:	4a06      	ldr	r2, [pc, #24]	@ (80040d0 <HAL_InitTick+0x5c>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000000 	.word	0x20000000
 80040cc:	200000fc 	.word	0x200000fc
 80040d0:	200000f8 	.word	0x200000f8

080040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_IncTick+0x20>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	4a04      	ldr	r2, [pc, #16]	@ (80040f8 <HAL_IncTick+0x24>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	200000fc 	.word	0x200000fc
 80040f8:	20000724 	.word	0x20000724

080040fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004100:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_GetTick+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000724 	.word	0x20000724

08004114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7ff ffee 	bl	80040fc <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d005      	beq.n	800413a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_Delay+0x44>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413a:	bf00      	nop
 800413c:	f7ff ffde 	bl	80040fc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d8f7      	bhi.n	800413c <HAL_Delay+0x28>
  {
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	200000fc 	.word	0x200000fc

0800415c <__NVIC_SetPriorityGrouping>:
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004178:	4013      	ands	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418e:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	60d3      	str	r3, [r2, #12]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_GetPriorityGrouping>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a8:	4b04      	ldr	r3, [pc, #16]	@ (80041bc <__NVIC_GetPriorityGrouping+0x18>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	f003 0307 	and.w	r3, r3, #7
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000ed00 	.word	0xe000ed00

080041c0 <__NVIC_EnableIRQ>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db0b      	blt.n	80041ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	4907      	ldr	r1, [pc, #28]	@ (80041f8 <__NVIC_EnableIRQ+0x38>)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2001      	movs	r0, #1
 80041e2:	fa00 f202 	lsl.w	r2, r0, r2
 80041e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420c:	2b00      	cmp	r3, #0
 800420e:	db0a      	blt.n	8004226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	490c      	ldr	r1, [pc, #48]	@ (8004248 <__NVIC_SetPriority+0x4c>)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	440b      	add	r3, r1
 8004220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004224:	e00a      	b.n	800423c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4908      	ldr	r1, [pc, #32]	@ (800424c <__NVIC_SetPriority+0x50>)
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	3b04      	subs	r3, #4
 8004234:	0112      	lsls	r2, r2, #4
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	440b      	add	r3, r1
 800423a:	761a      	strb	r2, [r3, #24]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000e100 	.word	0xe000e100
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <NVIC_EncodePriority>:
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f1c3 0307 	rsb	r3, r3, #7
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf28      	it	cs
 800426e:	2304      	movcs	r3, #4
 8004270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3304      	adds	r3, #4
 8004276:	2b06      	cmp	r3, #6
 8004278:	d902      	bls.n	8004280 <NVIC_EncodePriority+0x30>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3b03      	subs	r3, #3
 800427e:	e000      	b.n	8004282 <NVIC_EncodePriority+0x32>
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43da      	mvns	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	401a      	ands	r2, r3
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004298:	f04f 31ff 	mov.w	r1, #4294967295
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa01 f303 	lsl.w	r3, r1, r3
 80042a2:	43d9      	mvns	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	4313      	orrs	r3, r2
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3724      	adds	r7, #36	@ 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <SysTick_Config>:
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c8:	d301      	bcc.n	80042ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00f      	b.n	80042ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ce:	4a0a      	ldr	r2, [pc, #40]	@ (80042f8 <SysTick_Config+0x40>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042d6:	210f      	movs	r1, #15
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	f7ff ff8e 	bl	80041fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <SysTick_Config+0x40>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042e6:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <SysTick_Config+0x40>)
 80042e8:	2207      	movs	r2, #7
 80042ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	e000e010 	.word	0xe000e010

080042fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff29 	bl	800415c <__NVIC_SetPriorityGrouping>
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	4603      	mov	r3, r0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004324:	f7ff ff3e 	bl	80041a4 <__NVIC_GetPriorityGrouping>
 8004328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7ff ff8e 	bl	8004250 <NVIC_EncodePriority>
 8004334:	4602      	mov	r2, r0
 8004336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ff5d 	bl	80041fc <__NVIC_SetPriority>
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	4603      	mov	r3, r0
 8004352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff31 	bl	80041c0 <__NVIC_EnableIRQ>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff ffa2 	bl	80042b8 <SysTick_Config>
 8004374:	4603      	mov	r3, r0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff feb6 	bl	80040fc <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e099      	b.n	80044d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043bc:	e00f      	b.n	80043de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043be:	f7ff fe9d 	bl	80040fc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b05      	cmp	r3, #5
 80043ca:	d908      	bls.n	80043de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2203      	movs	r2, #3
 80043d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e078      	b.n	80044d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e8      	bne.n	80043be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4b38      	ldr	r3, [pc, #224]	@ (80044d8 <HAL_DMA_Init+0x158>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	2b04      	cmp	r3, #4
 8004436:	d107      	bne.n	8004448 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	4313      	orrs	r3, r2
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0307 	bic.w	r3, r3, #7
 800445e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	2b04      	cmp	r3, #4
 8004470:	d117      	bne.n	80044a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fa7b 	bl	8004980 <DMA_CheckFifoParam>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2240      	movs	r2, #64	@ 0x40
 8004494:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800449e:	2301      	movs	r3, #1
 80044a0:	e016      	b.n	80044d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa32 	bl	8004914 <DMA_CalcBaseAndBitshift>
 80044b0:	4603      	mov	r3, r0
 80044b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	223f      	movs	r2, #63	@ 0x3f
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	f010803f 	.word	0xf010803f

080044dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7ff fe07 	bl	80040fc <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d008      	beq.n	800450e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2280      	movs	r2, #128	@ 0x80
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e052      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0216 	bic.w	r2, r2, #22
 800451c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_DMA_Abort+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800455e:	e013      	b.n	8004588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004560:	f7ff fdcc 	bl	80040fc <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b05      	cmp	r3, #5
 800456c:	d90c      	bls.n	8004588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e015      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	@ 0x80
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00c      	b.n	80045f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2205      	movs	r2, #5
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800460c:	4b8e      	ldr	r3, [pc, #568]	@ (8004848 <HAL_DMA_IRQHandler+0x248>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a8e      	ldr	r2, [pc, #568]	@ (800484c <HAL_DMA_IRQHandler+0x24c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	2208      	movs	r2, #8
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01a      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	2208      	movs	r2, #8
 800465a:	409a      	lsls	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	2201      	movs	r2, #1
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	2204      	movs	r2, #4
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	2204      	movs	r2, #4
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	2210      	movs	r2, #16
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d043      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	2210      	movs	r2, #16
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d018      	beq.n	8004742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d024      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e01f      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	e016      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0208 	bic.w	r2, r2, #8
 800475e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	2220      	movs	r2, #32
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 808f 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8087 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	2220      	movs	r2, #32
 8004798:	409a      	lsls	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d136      	bne.n	8004818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0216 	bic.w	r2, r2, #22
 80047b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_DMA_IRQHandler+0x1da>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	223f      	movs	r2, #63	@ 0x3f
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d07e      	beq.n	800490c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
        }
        return;
 8004816:	e079      	b.n	800490c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01d      	beq.n	8004862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	2b00      	cmp	r3, #0
 800483a:	d031      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
 8004844:	e02c      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000
 800484c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e01e      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10f      	bne.n	8004890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d032      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2205      	movs	r2, #5
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d307      	bcc.n	80048e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f2      	bne.n	80048cc <HAL_DMA_IRQHandler+0x2cc>
 80048e6:	e000      	b.n	80048ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
 800490a:	e000      	b.n	800490e <HAL_DMA_IRQHandler+0x30e>
        return;
 800490c:	bf00      	nop
    }
  }
}
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	3b10      	subs	r3, #16
 8004924:	4a14      	ldr	r2, [pc, #80]	@ (8004978 <DMA_CalcBaseAndBitshift+0x64>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800492e:	4a13      	ldr	r2, [pc, #76]	@ (800497c <DMA_CalcBaseAndBitshift+0x68>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d909      	bls.n	8004956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	659a      	str	r2, [r3, #88]	@ 0x58
 8004954:	e007      	b.n	8004966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	aaaaaaab 	.word	0xaaaaaaab
 800497c:	0800cbc8 	.word	0x0800cbc8

08004980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11f      	bne.n	80049da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d856      	bhi.n	8004a4e <DMA_CheckFifoParam+0xce>
 80049a0:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <DMA_CheckFifoParam+0x28>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049b9 	.word	0x080049b9
 80049b4:	08004a4f 	.word	0x08004a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d046      	beq.n	8004a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e043      	b.n	8004a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049d2:	d140      	bne.n	8004a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e03d      	b.n	8004a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e2:	d121      	bne.n	8004a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d837      	bhi.n	8004a5a <DMA_CheckFifoParam+0xda>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <DMA_CheckFifoParam+0x70>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a19 	.word	0x08004a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e030      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d025      	beq.n	8004a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e022      	b.n	8004a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a20:	d11f      	bne.n	8004a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a26:	e01c      	b.n	8004a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d903      	bls.n	8004a36 <DMA_CheckFifoParam+0xb6>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a34:	e018      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3a:	e015      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e00b      	b.n	8004a66 <DMA_CheckFifoParam+0xe6>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e00a      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
 8004a54:	e008      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
 8004a58:	e006      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
    }
  } 
  
  return status; 
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e159      	b.n	8004d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a94:	2201      	movs	r2, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	f040 8148 	bne.w	8004d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d005      	beq.n	8004aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d130      	bne.n	8004b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b00:	2201      	movs	r2, #1
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 0201 	and.w	r2, r3, #1
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d017      	beq.n	8004b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d123      	bne.n	8004bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	08da      	lsrs	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3208      	adds	r2, #8
 8004b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	220f      	movs	r2, #15
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	08da      	lsrs	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3208      	adds	r2, #8
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0203 	and.w	r2, r3, #3
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80a2 	beq.w	8004d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b57      	ldr	r3, [pc, #348]	@ (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	4a56      	ldr	r2, [pc, #344]	@ (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c0e:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c1a:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_GPIO_Init+0x2ec>)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	3302      	adds	r3, #2
 8004c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	220f      	movs	r2, #15
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a49      	ldr	r2, [pc, #292]	@ (8004d68 <HAL_GPIO_Init+0x2f0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d019      	beq.n	8004c7a <HAL_GPIO_Init+0x202>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <HAL_GPIO_Init+0x2f4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_GPIO_Init+0x1fe>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a47      	ldr	r2, [pc, #284]	@ (8004d70 <HAL_GPIO_Init+0x2f8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00d      	beq.n	8004c72 <HAL_GPIO_Init+0x1fa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a46      	ldr	r2, [pc, #280]	@ (8004d74 <HAL_GPIO_Init+0x2fc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <HAL_GPIO_Init+0x1f6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a45      	ldr	r2, [pc, #276]	@ (8004d78 <HAL_GPIO_Init+0x300>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_GPIO_Init+0x1f2>
 8004c66:	2304      	movs	r3, #4
 8004c68:	e008      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e006      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e004      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e002      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	f002 0203 	and.w	r2, r2, #3
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	4093      	lsls	r3, r2
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8c:	4935      	ldr	r1, [pc, #212]	@ (8004d64 <HAL_GPIO_Init+0x2ec>)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	3302      	adds	r3, #2
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c9a:	4b38      	ldr	r3, [pc, #224]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ce8:	4a24      	ldr	r2, [pc, #144]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cee:	4b23      	ldr	r3, [pc, #140]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d12:	4a1a      	ldr	r2, [pc, #104]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d18:	4b18      	ldr	r3, [pc, #96]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004d7c <HAL_GPIO_Init+0x304>)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	f67f aea2 	bls.w	8004a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3724      	adds	r7, #36	@ 0x24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40013800 	.word	0x40013800
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	40020400 	.word	0x40020400
 8004d70:	40020800 	.word	0x40020800
 8004d74:	40020c00 	.word	0x40020c00
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40013c00 	.word	0x40013c00

08004d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e001      	b.n	8004da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc0:	787b      	ldrb	r3, [r7, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dcc:	e003      	b.n	8004dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	041a      	lsls	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	619a      	str	r2, [r3, #24]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e12b      	b.n	800504e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc fa12 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2224      	movs	r2, #36	@ 0x24
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e48:	f001 f8da 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4a81      	ldr	r2, [pc, #516]	@ (8005058 <HAL_I2C_Init+0x274>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d807      	bhi.n	8004e68 <HAL_I2C_Init+0x84>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a80      	ldr	r2, [pc, #512]	@ (800505c <HAL_I2C_Init+0x278>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bf94      	ite	ls
 8004e60:	2301      	movls	r3, #1
 8004e62:	2300      	movhi	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e006      	b.n	8004e76 <HAL_I2C_Init+0x92>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8005060 <HAL_I2C_Init+0x27c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bf94      	ite	ls
 8004e70:	2301      	movls	r3, #1
 8004e72:	2300      	movhi	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0e7      	b.n	800504e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a78      	ldr	r2, [pc, #480]	@ (8005064 <HAL_I2C_Init+0x280>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	0c9b      	lsrs	r3, r3, #18
 8004e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a6a      	ldr	r2, [pc, #424]	@ (8005058 <HAL_I2C_Init+0x274>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <HAL_I2C_Init+0xd4>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	e009      	b.n	8004ecc <HAL_I2C_Init+0xe8>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	4a69      	ldr	r2, [pc, #420]	@ (8005068 <HAL_I2C_Init+0x284>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	099b      	lsrs	r3, r3, #6
 8004eca:	3301      	adds	r3, #1
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ede:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	495c      	ldr	r1, [pc, #368]	@ (8005058 <HAL_I2C_Init+0x274>)
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	d819      	bhi.n	8004f20 <HAL_I2C_Init+0x13c>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1e59      	subs	r1, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f00:	400b      	ands	r3, r1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_I2C_Init+0x138>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1e59      	subs	r1, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	e051      	b.n	8004fc0 <HAL_I2C_Init+0x1dc>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	e04f      	b.n	8004fc0 <HAL_I2C_Init+0x1dc>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d111      	bne.n	8004f4c <HAL_I2C_Init+0x168>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1e58      	subs	r0, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	440b      	add	r3, r1
 8004f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e012      	b.n	8004f72 <HAL_I2C_Init+0x18e>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1e58      	subs	r0, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	0099      	lsls	r1, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_I2C_Init+0x196>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e022      	b.n	8004fc0 <HAL_I2C_Init+0x1dc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10e      	bne.n	8004fa0 <HAL_I2C_Init+0x1bc>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1e58      	subs	r0, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	440b      	add	r3, r1
 8004f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9e:	e00f      	b.n	8004fc0 <HAL_I2C_Init+0x1dc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1e58      	subs	r0, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	0099      	lsls	r1, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	6809      	ldr	r1, [r1, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004fee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6911      	ldr	r1, [r2, #16]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68d2      	ldr	r2, [r2, #12]
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	430b      	orrs	r3, r1
 8005002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	000186a0 	.word	0x000186a0
 800505c:	001e847f 	.word	0x001e847f
 8005060:	003d08ff 	.word	0x003d08ff
 8005064:	431bde83 	.word	0x431bde83
 8005068:	10624dd3 	.word	0x10624dd3

0800506c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	460b      	mov	r3, r1
 800507a:	817b      	strh	r3, [r7, #10]
 800507c:	4613      	mov	r3, r2
 800507e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7ff f83c 	bl	80040fc <HAL_GetTick>
 8005084:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	f040 80e0 	bne.w	8005254 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2319      	movs	r3, #25
 800509a:	2201      	movs	r2, #1
 800509c:	4970      	ldr	r1, [pc, #448]	@ (8005260 <HAL_I2C_Master_Transmit+0x1f4>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f964 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e0d3      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x50>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0cc      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d007      	beq.n	80050e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2221      	movs	r2, #33	@ 0x21
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2210      	movs	r2, #16
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	893a      	ldrh	r2, [r7, #8]
 8005112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a50      	ldr	r2, [pc, #320]	@ (8005264 <HAL_I2C_Master_Transmit+0x1f8>)
 8005122:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005124:	8979      	ldrh	r1, [r7, #10]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f89c 	bl	8005268 <I2C_MasterRequestWrite>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e08d      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005150:	e066      	b.n	8005220 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	6a39      	ldr	r1, [r7, #32]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fa22 	bl	80055a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b04      	cmp	r3, #4
 8005168:	d107      	bne.n	800517a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e06b      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d11b      	bne.n	80051f4 <HAL_I2C_Master_Transmit+0x188>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	6a39      	ldr	r1, [r7, #32]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fa19 	bl	8005630 <I2C_WaitOnBTFFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	2b04      	cmp	r3, #4
 800520a:	d107      	bne.n	800521c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800521a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e01a      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d194      	bne.n	8005152 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e000      	b.n	8005256 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	00100002 	.word	0x00100002
 8005264:	ffff0000 	.word	0xffff0000

08005268 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	460b      	mov	r3, r1
 8005276:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d006      	beq.n	8005292 <I2C_MasterRequestWrite+0x2a>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d003      	beq.n	8005292 <I2C_MasterRequestWrite+0x2a>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005290:	d108      	bne.n	80052a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e00b      	b.n	80052bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	2b12      	cmp	r3, #18
 80052aa:	d107      	bne.n	80052bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f84f 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e2:	d103      	bne.n	80052ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e035      	b.n	800535c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f8:	d108      	bne.n	800530c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005308:	611a      	str	r2, [r3, #16]
 800530a:	e01b      	b.n	8005344 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800530c:	897b      	ldrh	r3, [r7, #10]
 800530e:	11db      	asrs	r3, r3, #7
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f063 030f 	orn	r3, r3, #15
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	490e      	ldr	r1, [pc, #56]	@ (8005364 <I2C_MasterRequestWrite+0xfc>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f898 	bl	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e010      	b.n	800535c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4907      	ldr	r1, [pc, #28]	@ (8005368 <I2C_MasterRequestWrite+0x100>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f888 	bl	8005460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	00010008 	.word	0x00010008
 8005368:	00010002 	.word	0x00010002

0800536c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537c:	e048      	b.n	8005410 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d044      	beq.n	8005410 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fe feb9 	bl	80040fc <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d139      	bne.n	8005410 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10d      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	e00c      	b.n	80053dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	43da      	mvns	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d116      	bne.n	8005410 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e023      	b.n	8005458 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	0c1b      	lsrs	r3, r3, #16
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10d      	bne.n	8005436 <I2C_WaitOnFlagUntilTimeout+0xca>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	43da      	mvns	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	e00c      	b.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	43da      	mvns	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4013      	ands	r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	bf0c      	ite	eq
 8005448:	2301      	moveq	r3, #1
 800544a:	2300      	movne	r3, #0
 800544c:	b2db      	uxtb	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	429a      	cmp	r2, r3
 8005454:	d093      	beq.n	800537e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800546e:	e071      	b.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d123      	bne.n	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800548e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e067      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d041      	beq.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d0:	f7fe fe14 	bl	80040fc <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d136      	bne.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10c      	bne.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e00b      	b.n	8005522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	43da      	mvns	r2, r3
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	4013      	ands	r3, r2
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e021      	b.n	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d10c      	bne.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	43da      	mvns	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e00b      	b.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	43da      	mvns	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	b29b      	uxth	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	bf14      	ite	ne
 800558a:	2301      	movne	r3, #1
 800558c:	2300      	moveq	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	f47f af6d 	bne.w	8005470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ac:	e034      	b.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f886 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e034      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d028      	beq.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c6:	f7fe fd99 	bl	80040fc <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d302      	bcc.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11d      	bne.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d016      	beq.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b80      	cmp	r3, #128	@ 0x80
 8005624:	d1c3      	bne.n	80055ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800563c:	e034      	b.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f83e 	bl	80056c0 <I2C_IsAcknowledgeFailed>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e034      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d028      	beq.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fe fd51 	bl	80040fc <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11d      	bne.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b04      	cmp	r3, #4
 8005678:	d016      	beq.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e007      	b.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d1c3      	bne.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d6:	d11b      	bne.n	8005710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	f043 0204 	orr.w	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e267      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d075      	beq.n	800582a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800573e:	4b88      	ldr	r3, [pc, #544]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 030c 	and.w	r3, r3, #12
 8005746:	2b04      	cmp	r3, #4
 8005748:	d00c      	beq.n	8005764 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574a:	4b85      	ldr	r3, [pc, #532]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005752:	2b08      	cmp	r3, #8
 8005754:	d112      	bne.n	800577c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005756:	4b82      	ldr	r3, [pc, #520]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005762:	d10b      	bne.n	800577c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005764:	4b7e      	ldr	r3, [pc, #504]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05b      	beq.n	8005828 <HAL_RCC_OscConfig+0x108>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d157      	bne.n	8005828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e242      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005784:	d106      	bne.n	8005794 <HAL_RCC_OscConfig+0x74>
 8005786:	4b76      	ldr	r3, [pc, #472]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a75      	ldr	r2, [pc, #468]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 800578c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	e01d      	b.n	80057d0 <HAL_RCC_OscConfig+0xb0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x98>
 800579e:	4b70      	ldr	r3, [pc, #448]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a6c      	ldr	r2, [pc, #432]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e00b      	b.n	80057d0 <HAL_RCC_OscConfig+0xb0>
 80057b8:	4b69      	ldr	r3, [pc, #420]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a68      	ldr	r2, [pc, #416]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4b66      	ldr	r3, [pc, #408]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a65      	ldr	r2, [pc, #404]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d013      	beq.n	8005800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fe fc90 	bl	80040fc <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e0:	f7fe fc8c 	bl	80040fc <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	@ 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e207      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0xc0>
 80057fe:	e014      	b.n	800582a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fe fc7c 	bl	80040fc <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005808:	f7fe fc78 	bl	80040fc <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	@ 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e1f3      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	4b51      	ldr	r3, [pc, #324]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0xe8>
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d063      	beq.n	80058fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005836:	4b4a      	ldr	r3, [pc, #296]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 030c 	and.w	r3, r3, #12
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005842:	4b47      	ldr	r3, [pc, #284]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800584a:	2b08      	cmp	r3, #8
 800584c:	d11c      	bne.n	8005888 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584e:	4b44      	ldr	r3, [pc, #272]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d116      	bne.n	8005888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585a:	4b41      	ldr	r3, [pc, #260]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_RCC_OscConfig+0x152>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d001      	beq.n	8005872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e1c7      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005872:	4b3b      	ldr	r3, [pc, #236]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	4937      	ldr	r1, [pc, #220]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005886:	e03a      	b.n	80058fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d020      	beq.n	80058d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005890:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <HAL_RCC_OscConfig+0x244>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fe fc31 	bl	80040fc <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589e:	f7fe fc2d 	bl	80040fc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e1a8      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058bc:	4b28      	ldr	r3, [pc, #160]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4925      	ldr	r1, [pc, #148]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]
 80058d0:	e015      	b.n	80058fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d2:	4b24      	ldr	r3, [pc, #144]	@ (8005964 <HAL_RCC_OscConfig+0x244>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fe fc10 	bl	80040fc <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e0:	f7fe fc0c 	bl	80040fc <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e187      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d036      	beq.n	8005978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <HAL_RCC_OscConfig+0x248>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fe fbf0 	bl	80040fc <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005920:	f7fe fbec 	bl	80040fc <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e167      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005932:	4b0b      	ldr	r3, [pc, #44]	@ (8005960 <HAL_RCC_OscConfig+0x240>)
 8005934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x200>
 800593e:	e01b      	b.n	8005978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005940:	4b09      	ldr	r3, [pc, #36]	@ (8005968 <HAL_RCC_OscConfig+0x248>)
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005946:	f7fe fbd9 	bl	80040fc <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	e00e      	b.n	800596c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594e:	f7fe fbd5 	bl	80040fc <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d907      	bls.n	800596c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e150      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
 8005960:	40023800 	.word	0x40023800
 8005964:	42470000 	.word	0x42470000
 8005968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596c:	4b88      	ldr	r3, [pc, #544]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 800596e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ea      	bne.n	800594e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8097 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598a:	4b81      	ldr	r3, [pc, #516]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	60bb      	str	r3, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b6:	4b77      	ldr	r3, [pc, #476]	@ (8005b94 <HAL_RCC_OscConfig+0x474>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d118      	bne.n	80059f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c2:	4b74      	ldr	r3, [pc, #464]	@ (8005b94 <HAL_RCC_OscConfig+0x474>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a73      	ldr	r2, [pc, #460]	@ (8005b94 <HAL_RCC_OscConfig+0x474>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ce:	f7fe fb95 	bl	80040fc <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fe fb91 	bl	80040fc <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e10c      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b94 <HAL_RCC_OscConfig+0x474>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d106      	bne.n	8005a0a <HAL_RCC_OscConfig+0x2ea>
 80059fc:	4b64      	ldr	r3, [pc, #400]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a00:	4a63      	ldr	r2, [pc, #396]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a08:	e01c      	b.n	8005a44 <HAL_RCC_OscConfig+0x324>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b05      	cmp	r3, #5
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x30c>
 8005a12:	4b5f      	ldr	r3, [pc, #380]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a16:	4a5e      	ldr	r2, [pc, #376]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a18:	f043 0304 	orr.w	r3, r3, #4
 8005a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a22:	4a5b      	ldr	r2, [pc, #364]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a2a:	e00b      	b.n	8005a44 <HAL_RCC_OscConfig+0x324>
 8005a2c:	4b58      	ldr	r3, [pc, #352]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a30:	4a57      	ldr	r2, [pc, #348]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a38:	4b55      	ldr	r3, [pc, #340]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3c:	4a54      	ldr	r2, [pc, #336]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	f023 0304 	bic.w	r3, r3, #4
 8005a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fe fb56 	bl	80040fc <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fe fb52 	bl	80040fc <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e0cb      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6a:	4b49      	ldr	r3, [pc, #292]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ee      	beq.n	8005a54 <HAL_RCC_OscConfig+0x334>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a78:	f7fe fb40 	bl	80040fc <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a7e:	e00a      	b.n	8005a96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a80:	f7fe fb3c 	bl	80040fc <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0b5      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a96:	4b3e      	ldr	r3, [pc, #248]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ee      	bne.n	8005a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa8:	4b39      	ldr	r3, [pc, #228]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	4a38      	ldr	r2, [pc, #224]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80a1 	beq.w	8005c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005abe:	4b34      	ldr	r3, [pc, #208]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d05c      	beq.n	8005b84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d141      	bne.n	8005b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad2:	4b31      	ldr	r3, [pc, #196]	@ (8005b98 <HAL_RCC_OscConfig+0x478>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe fb10 	bl	80040fc <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fe fb0c 	bl	80040fc <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e087      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af2:	4b27      	ldr	r3, [pc, #156]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	019b      	lsls	r3, r3, #6
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	3b01      	subs	r3, #1
 8005b18:	041b      	lsls	r3, r3, #16
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	491b      	ldr	r1, [pc, #108]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b28:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <HAL_RCC_OscConfig+0x478>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2e:	f7fe fae5 	bl	80040fc <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fe fae1 	bl	80040fc <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e05c      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b48:	4b11      	ldr	r3, [pc, #68]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCC_OscConfig+0x416>
 8005b54:	e054      	b.n	8005c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b56:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <HAL_RCC_OscConfig+0x478>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7fe face 	bl	80040fc <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b64:	f7fe faca 	bl	80040fc <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e045      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b76:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_RCC_OscConfig+0x470>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x444>
 8005b82:	e03d      	b.n	8005c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e038      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40007000 	.word	0x40007000
 8005b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <HAL_RCC_OscConfig+0x4ec>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d028      	beq.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d121      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d11a      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d111      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	3b01      	subs	r3, #1
 8005be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800

08005c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0cc      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c24:	4b68      	ldr	r3, [pc, #416]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d90c      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b65      	ldr	r3, [pc, #404]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3a:	4b63      	ldr	r3, [pc, #396]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0b8      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d020      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c64:	4b59      	ldr	r3, [pc, #356]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4a58      	ldr	r2, [pc, #352]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c7c:	4b53      	ldr	r3, [pc, #332]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a52      	ldr	r2, [pc, #328]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c88:	4b50      	ldr	r3, [pc, #320]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	494d      	ldr	r1, [pc, #308]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d044      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cae:	4b47      	ldr	r3, [pc, #284]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d119      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e07f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d003      	beq.n	8005cce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cce:	4b3f      	ldr	r3, [pc, #252]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e06f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cde:	4b3b      	ldr	r3, [pc, #236]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e067      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cee:	4b37      	ldr	r3, [pc, #220]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4934      	ldr	r1, [pc, #208]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d00:	f7fe f9fc 	bl	80040fc <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fe f9f8 	bl	80040fc <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e04f      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 020c 	and.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d1eb      	bne.n	8005d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d30:	4b25      	ldr	r3, [pc, #148]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d20c      	bcs.n	8005d58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b22      	ldr	r3, [pc, #136]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d46:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d001      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e032      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d64:	4b19      	ldr	r3, [pc, #100]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4916      	ldr	r1, [pc, #88]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d009      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d82:	4b12      	ldr	r3, [pc, #72]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	490e      	ldr	r1, [pc, #56]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d96:	f000 f821 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	490a      	ldr	r1, [pc, #40]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	5ccb      	ldrb	r3, [r1, r3]
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005db2:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f95c 	bl	8004074 <HAL_InitTick>

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40023c00 	.word	0x40023c00
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	0800c9f4 	.word	0x0800c9f4
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	200000f8 	.word	0x200000f8

08005ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de0:	b094      	sub	sp, #80	@ 0x50
 8005de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df4:	4b79      	ldr	r3, [pc, #484]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d00d      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x40>
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	f200 80e1 	bhi.w	8005fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x34>
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d003      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e0e:	e0db      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e10:	4b73      	ldr	r3, [pc, #460]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e14:	e0db      	b.n	8005fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e16:	4b73      	ldr	r3, [pc, #460]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e1a:	e0d8      	b.n	8005fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e26:	4b6d      	ldr	r3, [pc, #436]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d063      	beq.n	8005efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e32:	4b6a      	ldr	r3, [pc, #424]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	2200      	movs	r2, #0
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e46:	2300      	movs	r3, #0
 8005e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e4e:	4622      	mov	r2, r4
 8005e50:	462b      	mov	r3, r5
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	0159      	lsls	r1, r3, #5
 8005e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e60:	0150      	lsls	r0, r2, #5
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4621      	mov	r1, r4
 8005e68:	1a51      	subs	r1, r2, r1
 8005e6a:	6139      	str	r1, [r7, #16]
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e80:	4659      	mov	r1, fp
 8005e82:	018b      	lsls	r3, r1, #6
 8005e84:	4651      	mov	r1, sl
 8005e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e8a:	4651      	mov	r1, sl
 8005e8c:	018a      	lsls	r2, r1, #6
 8005e8e:	4651      	mov	r1, sl
 8005e90:	ebb2 0801 	subs.w	r8, r2, r1
 8005e94:	4659      	mov	r1, fp
 8005e96:	eb63 0901 	sbc.w	r9, r3, r1
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eae:	4690      	mov	r8, r2
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	eb18 0303 	adds.w	r3, r8, r3
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	462b      	mov	r3, r5
 8005ebc:	eb49 0303 	adc.w	r3, r9, r3
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ece:	4629      	mov	r1, r5
 8005ed0:	024b      	lsls	r3, r1, #9
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ed8:	4621      	mov	r1, r4
 8005eda:	024a      	lsls	r2, r1, #9
 8005edc:	4610      	mov	r0, r2
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eec:	f7fa fed4 	bl	8000c98 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ef8:	e058      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efa:	4b38      	ldr	r3, [pc, #224]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	099b      	lsrs	r3, r3, #6
 8005f00:	2200      	movs	r2, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	4611      	mov	r1, r2
 8005f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	f04f 0000 	mov.w	r0, #0
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	0159      	lsls	r1, r3, #5
 8005f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f26:	0150      	lsls	r0, r2, #5
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f32:	4649      	mov	r1, r9
 8005f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f50:	eb63 050b 	sbc.w	r5, r3, fp
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	00eb      	lsls	r3, r5, #3
 8005f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f62:	00e2      	lsls	r2, r4, #3
 8005f64:	4614      	mov	r4, r2
 8005f66:	461d      	mov	r5, r3
 8005f68:	4643      	mov	r3, r8
 8005f6a:	18e3      	adds	r3, r4, r3
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	464b      	mov	r3, r9
 8005f70:	eb45 0303 	adc.w	r3, r5, r3
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f82:	4629      	mov	r1, r5
 8005f84:	028b      	lsls	r3, r1, #10
 8005f86:	4621      	mov	r1, r4
 8005f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	028a      	lsls	r2, r1, #10
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f96:	2200      	movs	r2, #0
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	61fa      	str	r2, [r7, #28]
 8005f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa0:	f7fa fe7a 	bl	8000c98 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4613      	mov	r3, r2
 8005faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fac:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fc6:	e002      	b.n	8005fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3750      	adds	r7, #80	@ 0x50
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fda:	bf00      	nop
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	00f42400 	.word	0x00f42400
 8005fe4:	007a1200 	.word	0x007a1200

08005fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fec:	4b03      	ldr	r3, [pc, #12]	@ (8005ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000000 	.word	0x20000000

08006000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006004:	f7ff fff0 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0a9b      	lsrs	r3, r3, #10
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4903      	ldr	r1, [pc, #12]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40023800 	.word	0x40023800
 8006024:	0800ca04 	.word	0x0800ca04

08006028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800602c:	f7ff ffdc 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	0b5b      	lsrs	r3, r3, #13
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	4903      	ldr	r1, [pc, #12]	@ (800604c <HAL_RCC_GetPCLK2Freq+0x24>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40023800 	.word	0x40023800
 800604c:	0800ca04 	.word	0x0800ca04

08006050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e041      	b.n	80060e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fb fdc4 	bl	8001c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f000 fca0 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e044      	b.n	8006192 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1e      	ldr	r2, [pc, #120]	@ (80061a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d018      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x6c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006132:	d013      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x6c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	@ (80061a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00e      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x6c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d009      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x6c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a17      	ldr	r2, [pc, #92]	@ (80061ac <HAL_TIM_Base_Start_IT+0xbc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d004      	beq.n	800615c <HAL_TIM_Base_Start_IT+0x6c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a16      	ldr	r2, [pc, #88]	@ (80061b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d111      	bne.n	8006180 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d010      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	e007      	b.n	8006190 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40014000 	.word	0x40014000

080061b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e041      	b.n	800624a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f839 	bl	8006252 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f000 fbee 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_TIM_PWM_Start+0x24>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e022      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b04      	cmp	r3, #4
 8006290:	d109      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x3e>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e015      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d109      	bne.n	80062c0 <HAL_TIM_PWM_Start+0x58>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	bf14      	ite	ne
 80062b8:	2301      	movne	r3, #1
 80062ba:	2300      	moveq	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e008      	b.n	80062d2 <HAL_TIM_PWM_Start+0x6a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e068      	b.n	80063ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <HAL_TIM_PWM_Start+0x82>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e8:	e013      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Start+0x92>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f8:	e00b      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Start+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006308:	e003      	b.n	8006312 <HAL_TIM_PWM_Start+0xaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2201      	movs	r2, #1
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fe06 	bl	8006f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	@ (80063b4 <HAL_TIM_PWM_Start+0x14c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d107      	bne.n	800633a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006338:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <HAL_TIM_PWM_Start+0x14c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634c:	d013      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <HAL_TIM_PWM_Start+0x150>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a17      	ldr	r2, [pc, #92]	@ (80063bc <HAL_TIM_PWM_Start+0x154>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a16      	ldr	r2, [pc, #88]	@ (80063c0 <HAL_TIM_PWM_Start+0x158>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_TIM_PWM_Start+0x10e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a14      	ldr	r2, [pc, #80]	@ (80063c4 <HAL_TIM_PWM_Start+0x15c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d111      	bne.n	800639a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b06      	cmp	r3, #6
 8006386:	d010      	beq.n	80063aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	e007      	b.n	80063aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40014000 	.word	0x40014000

080063c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fda6 	bl	8006f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a29      	ldr	r2, [pc, #164]	@ (800648c <HAL_TIM_PWM_Stop+0xc4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d117      	bne.n	800641a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10f      	bne.n	800641a <HAL_TIM_PWM_Stop+0x52>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	f240 4344 	movw	r3, #1092	@ 0x444
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d107      	bne.n	800641a <HAL_TIM_PWM_Stop+0x52>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006424:	4013      	ands	r3, r2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <HAL_TIM_PWM_Stop+0x82>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f240 4344 	movw	r3, #1092	@ 0x444
 8006434:	4013      	ands	r3, r2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d107      	bne.n	800644a <HAL_TIM_PWM_Stop+0x82>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Stop+0x92>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006458:	e013      	b.n	8006482 <HAL_TIM_PWM_Stop+0xba>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Stop+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006468:	e00b      	b.n	8006482 <HAL_TIM_PWM_Stop+0xba>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b08      	cmp	r3, #8
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Stop+0xb2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006478:	e003      	b.n	8006482 <HAL_TIM_PWM_Stop+0xba>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40010000 	.word	0x40010000

08006490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0202 	mvn.w	r2, #2
 80064c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa5b 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa4d 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fa5e 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d020      	beq.n	8006540 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01b      	beq.n	8006540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0204 	mvn.w	r2, #4
 8006510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa35 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa27 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa38 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d020      	beq.n	800658c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0208 	mvn.w	r2, #8
 800655c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2204      	movs	r2, #4
 8006562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa0f 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 8006578:	e005      	b.n	8006586 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa01 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa12 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d020      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0210 	mvn.w	r2, #16
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2208      	movs	r2, #8
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9e9 	bl	8006996 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f9db 	bl	8006982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9ec 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0201 	mvn.w	r2, #1
 80065f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fc fce2 	bl	8002fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fd76 	bl	800710c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f9bd 	bl	80069be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0220 	mvn.w	r2, #32
 8006660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fd48 	bl	80070f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800668a:	2302      	movs	r3, #2
 800668c:	e0ae      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b0c      	cmp	r3, #12
 800669a:	f200 809f 	bhi.w	80067dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800669e:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080067dd 	.word	0x080067dd
 80066ac:	080067dd 	.word	0x080067dd
 80066b0:	080067dd 	.word	0x080067dd
 80066b4:	08006719 	.word	0x08006719
 80066b8:	080067dd 	.word	0x080067dd
 80066bc:	080067dd 	.word	0x080067dd
 80066c0:	080067dd 	.word	0x080067dd
 80066c4:	0800675b 	.word	0x0800675b
 80066c8:	080067dd 	.word	0x080067dd
 80066cc:	080067dd 	.word	0x080067dd
 80066d0:	080067dd 	.word	0x080067dd
 80066d4:	0800679b 	.word	0x0800679b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f9fe 	bl	8006ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e064      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fa44 	bl	8006bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e043      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fa8f 	bl	8006c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e023      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fad9 	bl	8006d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e002      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIM_ConfigClockSource+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e0b4      	b.n	800697a <HAL_TIM_ConfigClockSource+0x186>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800682e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	d03e      	beq.n	80068c8 <HAL_TIM_ConfigClockSource+0xd4>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	f200 8087 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006856:	f000 8086 	beq.w	8006966 <HAL_TIM_ConfigClockSource+0x172>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685e:	d87f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b70      	cmp	r3, #112	@ 0x70
 8006862:	d01a      	beq.n	800689a <HAL_TIM_ConfigClockSource+0xa6>
 8006864:	2b70      	cmp	r3, #112	@ 0x70
 8006866:	d87b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b60      	cmp	r3, #96	@ 0x60
 800686a:	d050      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x11a>
 800686c:	2b60      	cmp	r3, #96	@ 0x60
 800686e:	d877      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b50      	cmp	r3, #80	@ 0x50
 8006872:	d03c      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xfa>
 8006874:	2b50      	cmp	r3, #80	@ 0x50
 8006876:	d873      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d058      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x13a>
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d86f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b30      	cmp	r3, #48	@ 0x30
 8006882:	d064      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b30      	cmp	r3, #48	@ 0x30
 8006886:	d86b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d060      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b20      	cmp	r3, #32
 800688e:	d867      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b10      	cmp	r3, #16
 8006896:	d05a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006898:	e062      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068aa:	f000 fb1f 	bl	8006eec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
      break;
 80068c6:	e04f      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	f000 fb08 	bl	8006eec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ea:	609a      	str	r2, [r3, #8]
      break;
 80068ec:	e03c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 fa7c 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2150      	movs	r1, #80	@ 0x50
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fad5 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 800690c:	e02c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 fa9b 	bl	8006e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2160      	movs	r1, #96	@ 0x60
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fac5 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 800692c:	e01c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fa5c 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fab5 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 800694c:	e00c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 faac 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 800695e:	e003      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e000      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a37      	ldr	r2, [pc, #220]	@ (8006ac4 <TIM_Base_SetConfig+0xf0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00f      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f2:	d00b      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a34      	ldr	r2, [pc, #208]	@ (8006ac8 <TIM_Base_SetConfig+0xf4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a33      	ldr	r2, [pc, #204]	@ (8006acc <TIM_Base_SetConfig+0xf8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a32      	ldr	r2, [pc, #200]	@ (8006ad0 <TIM_Base_SetConfig+0xfc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a28      	ldr	r2, [pc, #160]	@ (8006ac4 <TIM_Base_SetConfig+0xf0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01b      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2c:	d017      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a25      	ldr	r2, [pc, #148]	@ (8006ac8 <TIM_Base_SetConfig+0xf4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a24      	ldr	r2, [pc, #144]	@ (8006acc <TIM_Base_SetConfig+0xf8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a23      	ldr	r2, [pc, #140]	@ (8006ad0 <TIM_Base_SetConfig+0xfc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a22      	ldr	r2, [pc, #136]	@ (8006ad4 <TIM_Base_SetConfig+0x100>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <TIM_Base_SetConfig+0x104>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a20      	ldr	r2, [pc, #128]	@ (8006adc <TIM_Base_SetConfig+0x108>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d108      	bne.n	8006a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac4 <TIM_Base_SetConfig+0xf0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d103      	bne.n	8006a9e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f043 0204 	orr.w	r2, r3, #4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	601a      	str	r2, [r3, #0]
}
 8006ab6:	bf00      	nop
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800

08006ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f023 0201 	bic.w	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0302 	bic.w	r3, r3, #2
 8006b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba8 <TIM_OC1_SetConfig+0xc8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10c      	bne.n	8006b56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0308 	bic.w	r3, r3, #8
 8006b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 0304 	bic.w	r3, r3, #4
 8006b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a13      	ldr	r2, [pc, #76]	@ (8006ba8 <TIM_OC1_SetConfig+0xc8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d111      	bne.n	8006b82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40010000 	.word	0x40010000

08006bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f023 0210 	bic.w	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f023 0320 	bic.w	r3, r3, #32
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1e      	ldr	r2, [pc, #120]	@ (8006c80 <TIM_OC2_SetConfig+0xd4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d10d      	bne.n	8006c28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <TIM_OC2_SetConfig+0xd4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d113      	bne.n	8006c58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40010000 	.word	0x40010000

08006c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <TIM_OC3_SetConfig+0xd0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d10d      	bne.n	8006cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a14      	ldr	r2, [pc, #80]	@ (8006d54 <TIM_OC3_SetConfig+0xd0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d113      	bne.n	8006d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	40010000 	.word	0x40010000

08006d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a10      	ldr	r2, [pc, #64]	@ (8006df4 <TIM_OC4_SetConfig+0x9c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d109      	bne.n	8006dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010000 	.word	0x40010000

08006df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 030a 	bic.w	r3, r3, #10
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f023 0210 	bic.w	r2, r3, #16
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f043 0307 	orr.w	r3, r3, #7
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	609a      	str	r2, [r3, #8]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	021a      	lsls	r2, r3, #8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	609a      	str	r2, [r3, #8]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	401a      	ands	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e050      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1c      	ldr	r2, [pc, #112]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a16      	ldr	r2, [pc, #88]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a15      	ldr	r2, [pc, #84]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a13      	ldr	r2, [pc, #76]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40014000 	.word	0x40014000

08007054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e03d      	b.n	80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e042      	b.n	80071b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa feb2 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	@ 0x24
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fdd3 	bl	8007d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	@ 0x28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b20      	cmp	r3, #32
 80071de:	d175      	bne.n	80072cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <HAL_UART_Transmit+0x2c>
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e06e      	b.n	80072ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2221      	movs	r2, #33	@ 0x21
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071fe:	f7fc ff7d 	bl	80040fc <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	88fa      	ldrh	r2, [r7, #6]
 800720e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007218:	d108      	bne.n	800722c <HAL_UART_Transmit+0x6c>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e003      	b.n	8007234 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007234:	e02e      	b.n	8007294 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2180      	movs	r1, #128	@ 0x80
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fb37 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e03a      	b.n	80072ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10b      	bne.n	8007276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800726c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3302      	adds	r3, #2
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	e007      	b.n	8007286 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1cb      	bne.n	8007236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2140      	movs	r1, #64	@ 0x40
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fb03 	bl	80078b4 <UART_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e006      	b.n	80072ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	e000      	b.n	80072ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80072cc:	2302      	movs	r3, #2
  }
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3720      	adds	r7, #32
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	4613      	mov	r3, r2
 80072e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d112      	bne.n	8007316 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_UART_Receive_IT+0x26>
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e00b      	b.n	8007318 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	461a      	mov	r2, r3
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fb2a 	bl	8007966 <UART_Start_Receive_IT>
 8007312:	4603      	mov	r3, r0
 8007314:	e000      	b.n	8007318 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b0ba      	sub	sp, #232	@ 0xe8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007346:	2300      	movs	r3, #0
 8007348:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800734c:	2300      	movs	r3, #0
 800734e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800735e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <HAL_UART_IRQHandler+0x66>
 8007372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fc07 	bl	8007b92 <UART_Receive_IT>
      return;
 8007384:	e273      	b.n	800786e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80de 	beq.w	800754c <HAL_UART_IRQHandler+0x22c>
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d106      	bne.n	80073aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 80d1 	beq.w	800754c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_UART_IRQHandler+0xae>
 80073b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	f043 0201 	orr.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_UART_IRQHandler+0xd2>
 80073da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	f043 0202 	orr.w	r2, r3, #2
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0xf6>
 80073fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740e:	f043 0204 	orr.w	r2, r3, #4
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d011      	beq.n	8007446 <HAL_UART_IRQHandler+0x126>
 8007422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d105      	bne.n	800743a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800742e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	f043 0208 	orr.w	r2, r3, #8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 820a 	beq.w	8007864 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <HAL_UART_IRQHandler+0x14e>
 800745c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb92 	bl	8007b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	bf0c      	ite	eq
 800747c:	2301      	moveq	r3, #1
 800747e:	2300      	movne	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <HAL_UART_IRQHandler+0x17a>
 8007492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04f      	beq.n	800753a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa9d 	bl	80079da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b40      	cmp	r3, #64	@ 0x40
 80074ac:	d141      	bne.n	8007532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3314      	adds	r3, #20
 80074d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1d9      	bne.n	80074ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d013      	beq.n	800752a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007506:	4a8a      	ldr	r2, [pc, #552]	@ (8007730 <HAL_UART_IRQHandler+0x410>)
 8007508:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750e:	4618      	mov	r0, r3
 8007510:	f7fd f854 	bl	80045bc <HAL_DMA_Abort_IT>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d016      	beq.n	8007548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	e00e      	b.n	8007548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9ac 	bl	8007888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	e00a      	b.n	8007548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f9a8 	bl	8007888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	e006      	b.n	8007548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9a4 	bl	8007888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007546:	e18d      	b.n	8007864 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	bf00      	nop
    return;
 800754a:	e18b      	b.n	8007864 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	2b01      	cmp	r3, #1
 8007552:	f040 8167 	bne.w	8007824 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8160 	beq.w	8007824 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8159 	beq.w	8007824 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007572:	2300      	movs	r3, #0
 8007574:	60bb      	str	r3, [r7, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007592:	2b40      	cmp	r3, #64	@ 0x40
 8007594:	f040 80ce 	bne.w	8007734 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80a9 	beq.w	8007700 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f080 80a2 	bcs.w	8007700 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ce:	f000 8088 	beq.w	80076e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80075fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800760a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1d9      	bne.n	80075d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800762e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3314      	adds	r3, #20
 800763e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007642:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007646:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800764a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e1      	bne.n	800761e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3314      	adds	r3, #20
 8007660:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800766a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800766c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3314      	adds	r3, #20
 800767a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800767e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e3      	bne.n	800765a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	330c      	adds	r3, #12
 80076a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076b2:	f023 0310 	bic.w	r3, r3, #16
 80076b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80076c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80076c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076cc:	e841 2300 	strex	r3, r2, [r1]
 80076d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1e3      	bne.n	80076a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fc fefd 	bl	80044dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f8cf 	bl	800789c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80076fe:	e0b3      	b.n	8007868 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007708:	429a      	cmp	r2, r3
 800770a:	f040 80ad 	bne.w	8007868 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007718:	f040 80a6 	bne.w	8007868 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f8b7 	bl	800789c <HAL_UARTEx_RxEventCallback>
      return;
 800772e:	e09b      	b.n	8007868 <HAL_UART_IRQHandler+0x548>
 8007730:	08007aa1 	.word	0x08007aa1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 808e 	beq.w	800786c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8089 	beq.w	800786c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800776a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800777e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800778c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e3      	bne.n	800775a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	623b      	str	r3, [r7, #32]
   return(result);
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3314      	adds	r3, #20
 80077b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80077b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e3      	bne.n	8007792 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0310 	bic.w	r3, r3, #16
 80077ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80077fc:	61fa      	str	r2, [r7, #28]
 80077fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	69b9      	ldr	r1, [r7, #24]
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	617b      	str	r3, [r7, #20]
   return(result);
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f83d 	bl	800789c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007822:	e023      	b.n	800786c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <HAL_UART_IRQHandler+0x524>
 8007830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f940 	bl	8007ac2 <UART_Transmit_IT>
    return;
 8007842:	e014      	b.n	800786e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00e      	beq.n	800786e <HAL_UART_IRQHandler+0x54e>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f980 	bl	8007b62 <UART_EndTransmit_IT>
    return;
 8007862:	e004      	b.n	800786e <HAL_UART_IRQHandler+0x54e>
    return;
 8007864:	bf00      	nop
 8007866:	e002      	b.n	800786e <HAL_UART_IRQHandler+0x54e>
      return;
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <HAL_UART_IRQHandler+0x54e>
      return;
 800786c:	bf00      	nop
  }
}
 800786e:	37e8      	adds	r7, #232	@ 0xe8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	603b      	str	r3, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c4:	e03b      	b.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078cc:	d037      	beq.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ce:	f7fc fc15 	bl	80040fc <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d302      	bcc.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e03a      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d023      	beq.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b80      	cmp	r3, #128	@ 0x80
 80078fa:	d020      	beq.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d01d      	beq.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d116      	bne.n	800793e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 f857 	bl	80079da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2208      	movs	r2, #8
 8007930:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e00f      	b.n	800795e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4013      	ands	r3, r2
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	bf0c      	ite	eq
 800794e:	2301      	moveq	r3, #1
 8007950:	2300      	movne	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	429a      	cmp	r2, r3
 800795a:	d0b4      	beq.n	80078c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4613      	mov	r3, r2
 8007972:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2222      	movs	r2, #34	@ 0x22
 8007990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0201 	orr.w	r2, r2, #1
 80079ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0220 	orr.w	r2, r2, #32
 80079ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079da:	b480      	push	{r7}
 80079dc:	b095      	sub	sp, #84	@ 0x54
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	330c      	adds	r3, #12
 8007a00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a02:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a0a:	e841 2300 	strex	r3, r2, [r1]
 8007a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e5      	bne.n	80079e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3314      	adds	r3, #20
 8007a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d119      	bne.n	8007a86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	330c      	adds	r3, #12
 8007a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f023 0310 	bic.w	r3, r3, #16
 8007a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a72:	61ba      	str	r2, [r7, #24]
 8007a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6979      	ldr	r1, [r7, #20]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e5      	bne.n	8007a52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a94:	bf00      	nop
 8007a96:	3754      	adds	r7, #84	@ 0x54
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7ff fee7 	bl	8007888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b21      	cmp	r3, #33	@ 0x21
 8007ad4:	d13e      	bne.n	8007b54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ade:	d114      	bne.n	8007b0a <UART_Transmit_IT+0x48>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d110      	bne.n	8007b0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007afc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	621a      	str	r2, [r3, #32]
 8007b08:	e008      	b.n	8007b1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	1c59      	adds	r1, r3, #1
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6211      	str	r1, [r2, #32]
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10f      	bne.n	8007b50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e000      	b.n	8007b56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b54:	2302      	movs	r3, #2
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff fe76 	bl	8007874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b08c      	sub	sp, #48	@ 0x30
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b22      	cmp	r3, #34	@ 0x22
 8007bac:	f040 80aa 	bne.w	8007d04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb8:	d115      	bne.n	8007be6 <UART_Receive_IT+0x54>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d111      	bne.n	8007be6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007be4:	e024      	b.n	8007c30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf4:	d007      	beq.n	8007c06 <UART_Receive_IT+0x74>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <UART_Receive_IT+0x82>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e008      	b.n	8007c26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d15d      	bne.n	8007d00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0220 	bic.w	r2, r2, #32
 8007c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d135      	bne.n	8007cf6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f023 0310 	bic.w	r3, r3, #16
 8007ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb0:	623a      	str	r2, [r7, #32]
 8007cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d10a      	bne.n	8007ce8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fdd4 	bl	800789c <HAL_UARTEx_RxEventCallback>
 8007cf4:	e002      	b.n	8007cfc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fb fa3a 	bl	8003170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e002      	b.n	8007d06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	e000      	b.n	8007d06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d04:	2302      	movs	r3, #2
  }
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3730      	adds	r7, #48	@ 0x30
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d14:	b0c0      	sub	sp, #256	@ 0x100
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	68d9      	ldr	r1, [r3, #12]
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	ea40 0301 	orr.w	r3, r0, r1
 8007d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d68:	f021 010c 	bic.w	r1, r1, #12
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d76:	430b      	orrs	r3, r1
 8007d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8a:	6999      	ldr	r1, [r3, #24]
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	ea40 0301 	orr.w	r3, r0, r1
 8007d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8007fdc <UART_SetConfig+0x2cc>)
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d005      	beq.n	8007db0 <UART_SetConfig+0xa0>
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b8d      	ldr	r3, [pc, #564]	@ (8007fe0 <UART_SetConfig+0x2d0>)
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d104      	bne.n	8007dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007db0:	f7fe f93a 	bl	8006028 <HAL_RCC_GetPCLK2Freq>
 8007db4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007db8:	e003      	b.n	8007dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dba:	f7fe f921 	bl	8006000 <HAL_RCC_GetPCLK1Freq>
 8007dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dcc:	f040 810c 	bne.w	8007fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007dda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007de2:	4622      	mov	r2, r4
 8007de4:	462b      	mov	r3, r5
 8007de6:	1891      	adds	r1, r2, r2
 8007de8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007dea:	415b      	adcs	r3, r3
 8007dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007df2:	4621      	mov	r1, r4
 8007df4:	eb12 0801 	adds.w	r8, r2, r1
 8007df8:	4629      	mov	r1, r5
 8007dfa:	eb43 0901 	adc.w	r9, r3, r1
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e12:	4690      	mov	r8, r2
 8007e14:	4699      	mov	r9, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	eb18 0303 	adds.w	r3, r8, r3
 8007e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e20:	462b      	mov	r3, r5
 8007e22:	eb49 0303 	adc.w	r3, r9, r3
 8007e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e3e:	460b      	mov	r3, r1
 8007e40:	18db      	adds	r3, r3, r3
 8007e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e44:	4613      	mov	r3, r2
 8007e46:	eb42 0303 	adc.w	r3, r2, r3
 8007e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e54:	f7f8 ff20 	bl	8000c98 <__aeabi_uldivmod>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4b61      	ldr	r3, [pc, #388]	@ (8007fe4 <UART_SetConfig+0x2d4>)
 8007e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	011c      	lsls	r4, r3, #4
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e78:	4642      	mov	r2, r8
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e80:	415b      	adcs	r3, r3
 8007e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e88:	4641      	mov	r1, r8
 8007e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e8e:	4649      	mov	r1, r9
 8007e90:	eb43 0b01 	adc.w	fp, r3, r1
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	f04f 0300 	mov.w	r3, #0
 8007e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ea8:	4692      	mov	sl, r2
 8007eaa:	469b      	mov	fp, r3
 8007eac:	4643      	mov	r3, r8
 8007eae:	eb1a 0303 	adds.w	r3, sl, r3
 8007eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8007ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	18db      	adds	r3, r3, r3
 8007ed8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eda:	4613      	mov	r3, r2
 8007edc:	eb42 0303 	adc.w	r3, r2, r3
 8007ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007eea:	f7f8 fed5 	bl	8000c98 <__aeabi_uldivmod>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fe4 <UART_SetConfig+0x2d4>)
 8007ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	2264      	movs	r2, #100	@ 0x64
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	1acb      	subs	r3, r1, r3
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f0a:	4b36      	ldr	r3, [pc, #216]	@ (8007fe4 <UART_SetConfig+0x2d4>)
 8007f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f18:	441c      	add	r4, r3
 8007f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	1891      	adds	r1, r2, r2
 8007f32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f34:	415b      	adcs	r3, r3
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	1851      	adds	r1, r2, r1
 8007f40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007f42:	4649      	mov	r1, r9
 8007f44:	414b      	adcs	r3, r1
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f54:	4659      	mov	r1, fp
 8007f56:	00cb      	lsls	r3, r1, #3
 8007f58:	4651      	mov	r1, sl
 8007f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f5e:	4651      	mov	r1, sl
 8007f60:	00ca      	lsls	r2, r1, #3
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	4642      	mov	r2, r8
 8007f6a:	189b      	adds	r3, r3, r2
 8007f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f70:	464b      	mov	r3, r9
 8007f72:	460a      	mov	r2, r1
 8007f74:	eb42 0303 	adc.w	r3, r2, r3
 8007f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f90:	460b      	mov	r3, r1
 8007f92:	18db      	adds	r3, r3, r3
 8007f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f96:	4613      	mov	r3, r2
 8007f98:	eb42 0303 	adc.w	r3, r2, r3
 8007f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007fa6:	f7f8 fe77 	bl	8000c98 <__aeabi_uldivmod>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe4 <UART_SetConfig+0x2d4>)
 8007fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	2164      	movs	r1, #100	@ 0x64
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	3332      	adds	r3, #50	@ 0x32
 8007fc2:	4a08      	ldr	r2, [pc, #32]	@ (8007fe4 <UART_SetConfig+0x2d4>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f003 0207 	and.w	r2, r3, #7
 8007fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4422      	add	r2, r4
 8007fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fd8:	e106      	b.n	80081e8 <UART_SetConfig+0x4d8>
 8007fda:	bf00      	nop
 8007fdc:	40011000 	.word	0x40011000
 8007fe0:	40011400 	.word	0x40011400
 8007fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	1891      	adds	r1, r2, r2
 8008000:	6239      	str	r1, [r7, #32]
 8008002:	415b      	adcs	r3, r3
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
 8008006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800800a:	4641      	mov	r1, r8
 800800c:	1854      	adds	r4, r2, r1
 800800e:	4649      	mov	r1, r9
 8008010:	eb43 0501 	adc.w	r5, r3, r1
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	00eb      	lsls	r3, r5, #3
 800801e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008022:	00e2      	lsls	r2, r4, #3
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	4643      	mov	r3, r8
 800802a:	18e3      	adds	r3, r4, r3
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008030:	464b      	mov	r3, r9
 8008032:	eb45 0303 	adc.w	r3, r5, r3
 8008036:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008046:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800804a:	f04f 0200 	mov.w	r2, #0
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008056:	4629      	mov	r1, r5
 8008058:	008b      	lsls	r3, r1, #2
 800805a:	4621      	mov	r1, r4
 800805c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008060:	4621      	mov	r1, r4
 8008062:	008a      	lsls	r2, r1, #2
 8008064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008068:	f7f8 fe16 	bl	8000c98 <__aeabi_uldivmod>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4b60      	ldr	r3, [pc, #384]	@ (80081f4 <UART_SetConfig+0x4e4>)
 8008072:	fba3 2302 	umull	r2, r3, r3, r2
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	011c      	lsls	r4, r3, #4
 800807a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800807e:	2200      	movs	r2, #0
 8008080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008084:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800808c:	4642      	mov	r2, r8
 800808e:	464b      	mov	r3, r9
 8008090:	1891      	adds	r1, r2, r2
 8008092:	61b9      	str	r1, [r7, #24]
 8008094:	415b      	adcs	r3, r3
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800809c:	4641      	mov	r1, r8
 800809e:	1851      	adds	r1, r2, r1
 80080a0:	6139      	str	r1, [r7, #16]
 80080a2:	4649      	mov	r1, r9
 80080a4:	414b      	adcs	r3, r1
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080b4:	4659      	mov	r1, fp
 80080b6:	00cb      	lsls	r3, r1, #3
 80080b8:	4651      	mov	r1, sl
 80080ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080be:	4651      	mov	r1, sl
 80080c0:	00ca      	lsls	r2, r1, #3
 80080c2:	4610      	mov	r0, r2
 80080c4:	4619      	mov	r1, r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	4642      	mov	r2, r8
 80080ca:	189b      	adds	r3, r3, r2
 80080cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080d0:	464b      	mov	r3, r9
 80080d2:	460a      	mov	r2, r1
 80080d4:	eb42 0303 	adc.w	r3, r2, r3
 80080d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080e8:	f04f 0200 	mov.w	r2, #0
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080f4:	4649      	mov	r1, r9
 80080f6:	008b      	lsls	r3, r1, #2
 80080f8:	4641      	mov	r1, r8
 80080fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080fe:	4641      	mov	r1, r8
 8008100:	008a      	lsls	r2, r1, #2
 8008102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008106:	f7f8 fdc7 	bl	8000c98 <__aeabi_uldivmod>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4611      	mov	r1, r2
 8008110:	4b38      	ldr	r3, [pc, #224]	@ (80081f4 <UART_SetConfig+0x4e4>)
 8008112:	fba3 2301 	umull	r2, r3, r3, r1
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	2264      	movs	r2, #100	@ 0x64
 800811a:	fb02 f303 	mul.w	r3, r2, r3
 800811e:	1acb      	subs	r3, r1, r3
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	3332      	adds	r3, #50	@ 0x32
 8008124:	4a33      	ldr	r2, [pc, #204]	@ (80081f4 <UART_SetConfig+0x4e4>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008130:	441c      	add	r4, r3
 8008132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008136:	2200      	movs	r2, #0
 8008138:	673b      	str	r3, [r7, #112]	@ 0x70
 800813a:	677a      	str	r2, [r7, #116]	@ 0x74
 800813c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008140:	4642      	mov	r2, r8
 8008142:	464b      	mov	r3, r9
 8008144:	1891      	adds	r1, r2, r2
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	415b      	adcs	r3, r3
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008150:	4641      	mov	r1, r8
 8008152:	1851      	adds	r1, r2, r1
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	4649      	mov	r1, r9
 8008158:	414b      	adcs	r3, r1
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008168:	4659      	mov	r1, fp
 800816a:	00cb      	lsls	r3, r1, #3
 800816c:	4651      	mov	r1, sl
 800816e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008172:	4651      	mov	r1, sl
 8008174:	00ca      	lsls	r2, r1, #3
 8008176:	4610      	mov	r0, r2
 8008178:	4619      	mov	r1, r3
 800817a:	4603      	mov	r3, r0
 800817c:	4642      	mov	r2, r8
 800817e:	189b      	adds	r3, r3, r2
 8008180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008182:	464b      	mov	r3, r9
 8008184:	460a      	mov	r2, r1
 8008186:	eb42 0303 	adc.w	r3, r2, r3
 800818a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800818c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	663b      	str	r3, [r7, #96]	@ 0x60
 8008196:	667a      	str	r2, [r7, #100]	@ 0x64
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80081a4:	4649      	mov	r1, r9
 80081a6:	008b      	lsls	r3, r1, #2
 80081a8:	4641      	mov	r1, r8
 80081aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ae:	4641      	mov	r1, r8
 80081b0:	008a      	lsls	r2, r1, #2
 80081b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80081b6:	f7f8 fd6f 	bl	8000c98 <__aeabi_uldivmod>
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <UART_SetConfig+0x4e4>)
 80081c0:	fba3 1302 	umull	r1, r3, r3, r2
 80081c4:	095b      	lsrs	r3, r3, #5
 80081c6:	2164      	movs	r1, #100	@ 0x64
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	3332      	adds	r3, #50	@ 0x32
 80081d2:	4a08      	ldr	r2, [pc, #32]	@ (80081f4 <UART_SetConfig+0x4e4>)
 80081d4:	fba2 2303 	umull	r2, r3, r2, r3
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	f003 020f 	and.w	r2, r3, #15
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4422      	add	r2, r4
 80081e6:	609a      	str	r2, [r3, #8]
}
 80081e8:	bf00      	nop
 80081ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081ee:	46bd      	mov	sp, r7
 80081f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f4:	51eb851f 	.word	0x51eb851f

080081f8 <__cvt>:
 80081f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	ec57 6b10 	vmov	r6, r7, d0
 8008200:	2f00      	cmp	r7, #0
 8008202:	460c      	mov	r4, r1
 8008204:	4619      	mov	r1, r3
 8008206:	463b      	mov	r3, r7
 8008208:	bfbb      	ittet	lt
 800820a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800820e:	461f      	movlt	r7, r3
 8008210:	2300      	movge	r3, #0
 8008212:	232d      	movlt	r3, #45	@ 0x2d
 8008214:	700b      	strb	r3, [r1, #0]
 8008216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008218:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800821c:	4691      	mov	r9, r2
 800821e:	f023 0820 	bic.w	r8, r3, #32
 8008222:	bfbc      	itt	lt
 8008224:	4632      	movlt	r2, r6
 8008226:	4616      	movlt	r6, r2
 8008228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800822c:	d005      	beq.n	800823a <__cvt+0x42>
 800822e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008232:	d100      	bne.n	8008236 <__cvt+0x3e>
 8008234:	3401      	adds	r4, #1
 8008236:	2102      	movs	r1, #2
 8008238:	e000      	b.n	800823c <__cvt+0x44>
 800823a:	2103      	movs	r1, #3
 800823c:	ab03      	add	r3, sp, #12
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	ab02      	add	r3, sp, #8
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	ec47 6b10 	vmov	d0, r6, r7
 8008248:	4653      	mov	r3, sl
 800824a:	4622      	mov	r2, r4
 800824c:	f001 f87c 	bl	8009348 <_dtoa_r>
 8008250:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008254:	4605      	mov	r5, r0
 8008256:	d119      	bne.n	800828c <__cvt+0x94>
 8008258:	f019 0f01 	tst.w	r9, #1
 800825c:	d00e      	beq.n	800827c <__cvt+0x84>
 800825e:	eb00 0904 	add.w	r9, r0, r4
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 fc35 	bl	8000ad8 <__aeabi_dcmpeq>
 800826e:	b108      	cbz	r0, 8008274 <__cvt+0x7c>
 8008270:	f8cd 900c 	str.w	r9, [sp, #12]
 8008274:	2230      	movs	r2, #48	@ 0x30
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	454b      	cmp	r3, r9
 800827a:	d31e      	bcc.n	80082ba <__cvt+0xc2>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008280:	1b5b      	subs	r3, r3, r5
 8008282:	4628      	mov	r0, r5
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	b004      	add	sp, #16
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008290:	eb00 0904 	add.w	r9, r0, r4
 8008294:	d1e5      	bne.n	8008262 <__cvt+0x6a>
 8008296:	7803      	ldrb	r3, [r0, #0]
 8008298:	2b30      	cmp	r3, #48	@ 0x30
 800829a:	d10a      	bne.n	80082b2 <__cvt+0xba>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f8 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 80082a8:	b918      	cbnz	r0, 80082b2 <__cvt+0xba>
 80082aa:	f1c4 0401 	rsb	r4, r4, #1
 80082ae:	f8ca 4000 	str.w	r4, [sl]
 80082b2:	f8da 3000 	ldr.w	r3, [sl]
 80082b6:	4499      	add	r9, r3
 80082b8:	e7d3      	b.n	8008262 <__cvt+0x6a>
 80082ba:	1c59      	adds	r1, r3, #1
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	e7d9      	b.n	8008276 <__cvt+0x7e>

080082c2 <__exponent>:
 80082c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c4:	2900      	cmp	r1, #0
 80082c6:	bfba      	itte	lt
 80082c8:	4249      	neglt	r1, r1
 80082ca:	232d      	movlt	r3, #45	@ 0x2d
 80082cc:	232b      	movge	r3, #43	@ 0x2b
 80082ce:	2909      	cmp	r1, #9
 80082d0:	7002      	strb	r2, [r0, #0]
 80082d2:	7043      	strb	r3, [r0, #1]
 80082d4:	dd29      	ble.n	800832a <__exponent+0x68>
 80082d6:	f10d 0307 	add.w	r3, sp, #7
 80082da:	461d      	mov	r5, r3
 80082dc:	270a      	movs	r7, #10
 80082de:	461a      	mov	r2, r3
 80082e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80082e4:	fb07 1416 	mls	r4, r7, r6, r1
 80082e8:	3430      	adds	r4, #48	@ 0x30
 80082ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082ee:	460c      	mov	r4, r1
 80082f0:	2c63      	cmp	r4, #99	@ 0x63
 80082f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082f6:	4631      	mov	r1, r6
 80082f8:	dcf1      	bgt.n	80082de <__exponent+0x1c>
 80082fa:	3130      	adds	r1, #48	@ 0x30
 80082fc:	1e94      	subs	r4, r2, #2
 80082fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008302:	1c41      	adds	r1, r0, #1
 8008304:	4623      	mov	r3, r4
 8008306:	42ab      	cmp	r3, r5
 8008308:	d30a      	bcc.n	8008320 <__exponent+0x5e>
 800830a:	f10d 0309 	add.w	r3, sp, #9
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ac      	cmp	r4, r5
 8008312:	bf88      	it	hi
 8008314:	2300      	movhi	r3, #0
 8008316:	3302      	adds	r3, #2
 8008318:	4403      	add	r3, r0
 800831a:	1a18      	subs	r0, r3, r0
 800831c:	b003      	add	sp, #12
 800831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008320:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008324:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008328:	e7ed      	b.n	8008306 <__exponent+0x44>
 800832a:	2330      	movs	r3, #48	@ 0x30
 800832c:	3130      	adds	r1, #48	@ 0x30
 800832e:	7083      	strb	r3, [r0, #2]
 8008330:	70c1      	strb	r1, [r0, #3]
 8008332:	1d03      	adds	r3, r0, #4
 8008334:	e7f1      	b.n	800831a <__exponent+0x58>
	...

08008338 <_printf_float>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	b08d      	sub	sp, #52	@ 0x34
 800833e:	460c      	mov	r4, r1
 8008340:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008344:	4616      	mov	r6, r2
 8008346:	461f      	mov	r7, r3
 8008348:	4605      	mov	r5, r0
 800834a:	f000 fee9 	bl	8009120 <_localeconv_r>
 800834e:	6803      	ldr	r3, [r0, #0]
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	4618      	mov	r0, r3
 8008354:	f7f7 ff94 	bl	8000280 <strlen>
 8008358:	2300      	movs	r3, #0
 800835a:	930a      	str	r3, [sp, #40]	@ 0x28
 800835c:	f8d8 3000 	ldr.w	r3, [r8]
 8008360:	9005      	str	r0, [sp, #20]
 8008362:	3307      	adds	r3, #7
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	f103 0208 	add.w	r2, r3, #8
 800836c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008370:	f8d4 b000 	ldr.w	fp, [r4]
 8008374:	f8c8 2000 	str.w	r2, [r8]
 8008378:	e9d3 8900 	ldrd	r8, r9, [r3]
 800837c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	f8cd 8018 	str.w	r8, [sp, #24]
 8008386:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800838a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800838e:	4b9c      	ldr	r3, [pc, #624]	@ (8008600 <_printf_float+0x2c8>)
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	f7f8 fbd2 	bl	8000b3c <__aeabi_dcmpun>
 8008398:	bb70      	cbnz	r0, 80083f8 <_printf_float+0xc0>
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	4b98      	ldr	r3, [pc, #608]	@ (8008600 <_printf_float+0x2c8>)
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295
 80083a4:	f7f8 fbac 	bl	8000b00 <__aeabi_dcmple>
 80083a8:	bb30      	cbnz	r0, 80083f8 <_printf_float+0xc0>
 80083aa:	2200      	movs	r2, #0
 80083ac:	2300      	movs	r3, #0
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 fb9b 	bl	8000aec <__aeabi_dcmplt>
 80083b6:	b110      	cbz	r0, 80083be <_printf_float+0x86>
 80083b8:	232d      	movs	r3, #45	@ 0x2d
 80083ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083be:	4a91      	ldr	r2, [pc, #580]	@ (8008604 <_printf_float+0x2cc>)
 80083c0:	4b91      	ldr	r3, [pc, #580]	@ (8008608 <_printf_float+0x2d0>)
 80083c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083c6:	bf8c      	ite	hi
 80083c8:	4690      	movhi	r8, r2
 80083ca:	4698      	movls	r8, r3
 80083cc:	2303      	movs	r3, #3
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	f02b 0304 	bic.w	r3, fp, #4
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	9700      	str	r7, [sp, #0]
 80083dc:	4633      	mov	r3, r6
 80083de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f9d2 	bl	800878c <_printf_common>
 80083e8:	3001      	adds	r0, #1
 80083ea:	f040 808d 	bne.w	8008508 <_printf_float+0x1d0>
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295
 80083f2:	b00d      	add	sp, #52	@ 0x34
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f8 fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8008404:	b140      	cbz	r0, 8008418 <_printf_float+0xe0>
 8008406:	464b      	mov	r3, r9
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfbc      	itt	lt
 800840c:	232d      	movlt	r3, #45	@ 0x2d
 800840e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008412:	4a7e      	ldr	r2, [pc, #504]	@ (800860c <_printf_float+0x2d4>)
 8008414:	4b7e      	ldr	r3, [pc, #504]	@ (8008610 <_printf_float+0x2d8>)
 8008416:	e7d4      	b.n	80083c2 <_printf_float+0x8a>
 8008418:	6863      	ldr	r3, [r4, #4]
 800841a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800841e:	9206      	str	r2, [sp, #24]
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	d13b      	bne.n	800849c <_printf_float+0x164>
 8008424:	2306      	movs	r3, #6
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800842c:	2300      	movs	r3, #0
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	9303      	str	r3, [sp, #12]
 8008432:	ab0a      	add	r3, sp, #40	@ 0x28
 8008434:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008438:	ab09      	add	r3, sp, #36	@ 0x24
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	6861      	ldr	r1, [r4, #4]
 800843e:	ec49 8b10 	vmov	d0, r8, r9
 8008442:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008446:	4628      	mov	r0, r5
 8008448:	f7ff fed6 	bl	80081f8 <__cvt>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008450:	2b47      	cmp	r3, #71	@ 0x47
 8008452:	4680      	mov	r8, r0
 8008454:	d129      	bne.n	80084aa <_printf_float+0x172>
 8008456:	1cc8      	adds	r0, r1, #3
 8008458:	db02      	blt.n	8008460 <_printf_float+0x128>
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	4299      	cmp	r1, r3
 800845e:	dd41      	ble.n	80084e4 <_printf_float+0x1ac>
 8008460:	f1aa 0a02 	sub.w	sl, sl, #2
 8008464:	fa5f fa8a 	uxtb.w	sl, sl
 8008468:	3901      	subs	r1, #1
 800846a:	4652      	mov	r2, sl
 800846c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008470:	9109      	str	r1, [sp, #36]	@ 0x24
 8008472:	f7ff ff26 	bl	80082c2 <__exponent>
 8008476:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008478:	1813      	adds	r3, r2, r0
 800847a:	2a01      	cmp	r2, #1
 800847c:	4681      	mov	r9, r0
 800847e:	6123      	str	r3, [r4, #16]
 8008480:	dc02      	bgt.n	8008488 <_printf_float+0x150>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	07d2      	lsls	r2, r2, #31
 8008486:	d501      	bpl.n	800848c <_printf_float+0x154>
 8008488:	3301      	adds	r3, #1
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0a2      	beq.n	80083da <_printf_float+0xa2>
 8008494:	232d      	movs	r3, #45	@ 0x2d
 8008496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849a:	e79e      	b.n	80083da <_printf_float+0xa2>
 800849c:	9a06      	ldr	r2, [sp, #24]
 800849e:	2a47      	cmp	r2, #71	@ 0x47
 80084a0:	d1c2      	bne.n	8008428 <_printf_float+0xf0>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1c0      	bne.n	8008428 <_printf_float+0xf0>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e7bd      	b.n	8008426 <_printf_float+0xee>
 80084aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084ae:	d9db      	bls.n	8008468 <_printf_float+0x130>
 80084b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084b4:	d118      	bne.n	80084e8 <_printf_float+0x1b0>
 80084b6:	2900      	cmp	r1, #0
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	dd0b      	ble.n	80084d4 <_printf_float+0x19c>
 80084bc:	6121      	str	r1, [r4, #16]
 80084be:	b913      	cbnz	r3, 80084c6 <_printf_float+0x18e>
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	07d0      	lsls	r0, r2, #31
 80084c4:	d502      	bpl.n	80084cc <_printf_float+0x194>
 80084c6:	3301      	adds	r3, #1
 80084c8:	440b      	add	r3, r1
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084ce:	f04f 0900 	mov.w	r9, #0
 80084d2:	e7db      	b.n	800848c <_printf_float+0x154>
 80084d4:	b913      	cbnz	r3, 80084dc <_printf_float+0x1a4>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	07d2      	lsls	r2, r2, #31
 80084da:	d501      	bpl.n	80084e0 <_printf_float+0x1a8>
 80084dc:	3302      	adds	r3, #2
 80084de:	e7f4      	b.n	80084ca <_printf_float+0x192>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e7f2      	b.n	80084ca <_printf_float+0x192>
 80084e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ea:	4299      	cmp	r1, r3
 80084ec:	db05      	blt.n	80084fa <_printf_float+0x1c2>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	6121      	str	r1, [r4, #16]
 80084f2:	07d8      	lsls	r0, r3, #31
 80084f4:	d5ea      	bpl.n	80084cc <_printf_float+0x194>
 80084f6:	1c4b      	adds	r3, r1, #1
 80084f8:	e7e7      	b.n	80084ca <_printf_float+0x192>
 80084fa:	2900      	cmp	r1, #0
 80084fc:	bfd4      	ite	le
 80084fe:	f1c1 0202 	rsble	r2, r1, #2
 8008502:	2201      	movgt	r2, #1
 8008504:	4413      	add	r3, r2
 8008506:	e7e0      	b.n	80084ca <_printf_float+0x192>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	055a      	lsls	r2, r3, #21
 800850c:	d407      	bmi.n	800851e <_printf_float+0x1e6>
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	4642      	mov	r2, r8
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	d12b      	bne.n	8008574 <_printf_float+0x23c>
 800851c:	e767      	b.n	80083ee <_printf_float+0xb6>
 800851e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008522:	f240 80dd 	bls.w	80086e0 <_printf_float+0x3a8>
 8008526:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800852a:	2200      	movs	r2, #0
 800852c:	2300      	movs	r3, #0
 800852e:	f7f8 fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008532:	2800      	cmp	r0, #0
 8008534:	d033      	beq.n	800859e <_printf_float+0x266>
 8008536:	4a37      	ldr	r2, [pc, #220]	@ (8008614 <_printf_float+0x2dc>)
 8008538:	2301      	movs	r3, #1
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f af54 	beq.w	80083ee <_printf_float+0xb6>
 8008546:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800854a:	4543      	cmp	r3, r8
 800854c:	db02      	blt.n	8008554 <_printf_float+0x21c>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	07d8      	lsls	r0, r3, #31
 8008552:	d50f      	bpl.n	8008574 <_printf_float+0x23c>
 8008554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	47b8      	blx	r7
 800855e:	3001      	adds	r0, #1
 8008560:	f43f af45 	beq.w	80083ee <_printf_float+0xb6>
 8008564:	f04f 0900 	mov.w	r9, #0
 8008568:	f108 38ff 	add.w	r8, r8, #4294967295
 800856c:	f104 0a1a 	add.w	sl, r4, #26
 8008570:	45c8      	cmp	r8, r9
 8008572:	dc09      	bgt.n	8008588 <_printf_float+0x250>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	079b      	lsls	r3, r3, #30
 8008578:	f100 8103 	bmi.w	8008782 <_printf_float+0x44a>
 800857c:	68e0      	ldr	r0, [r4, #12]
 800857e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008580:	4298      	cmp	r0, r3
 8008582:	bfb8      	it	lt
 8008584:	4618      	movlt	r0, r3
 8008586:	e734      	b.n	80083f2 <_printf_float+0xba>
 8008588:	2301      	movs	r3, #1
 800858a:	4652      	mov	r2, sl
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f af2b 	beq.w	80083ee <_printf_float+0xb6>
 8008598:	f109 0901 	add.w	r9, r9, #1
 800859c:	e7e8      	b.n	8008570 <_printf_float+0x238>
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dc39      	bgt.n	8008618 <_printf_float+0x2e0>
 80085a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <_printf_float+0x2dc>)
 80085a6:	2301      	movs	r3, #1
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	f43f af1d 	beq.w	80083ee <_printf_float+0xb6>
 80085b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085b8:	ea59 0303 	orrs.w	r3, r9, r3
 80085bc:	d102      	bne.n	80085c4 <_printf_float+0x28c>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	07d9      	lsls	r1, r3, #31
 80085c2:	d5d7      	bpl.n	8008574 <_printf_float+0x23c>
 80085c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f af0d 	beq.w	80083ee <_printf_float+0xb6>
 80085d4:	f04f 0a00 	mov.w	sl, #0
 80085d8:	f104 0b1a 	add.w	fp, r4, #26
 80085dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085de:	425b      	negs	r3, r3
 80085e0:	4553      	cmp	r3, sl
 80085e2:	dc01      	bgt.n	80085e8 <_printf_float+0x2b0>
 80085e4:	464b      	mov	r3, r9
 80085e6:	e793      	b.n	8008510 <_printf_float+0x1d8>
 80085e8:	2301      	movs	r3, #1
 80085ea:	465a      	mov	r2, fp
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f aefb 	beq.w	80083ee <_printf_float+0xb6>
 80085f8:	f10a 0a01 	add.w	sl, sl, #1
 80085fc:	e7ee      	b.n	80085dc <_printf_float+0x2a4>
 80085fe:	bf00      	nop
 8008600:	7fefffff 	.word	0x7fefffff
 8008604:	0800cbd4 	.word	0x0800cbd4
 8008608:	0800cbd0 	.word	0x0800cbd0
 800860c:	0800cbdc 	.word	0x0800cbdc
 8008610:	0800cbd8 	.word	0x0800cbd8
 8008614:	0800cbe0 	.word	0x0800cbe0
 8008618:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800861a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800861e:	4553      	cmp	r3, sl
 8008620:	bfa8      	it	ge
 8008622:	4653      	movge	r3, sl
 8008624:	2b00      	cmp	r3, #0
 8008626:	4699      	mov	r9, r3
 8008628:	dc36      	bgt.n	8008698 <_printf_float+0x360>
 800862a:	f04f 0b00 	mov.w	fp, #0
 800862e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008632:	f104 021a 	add.w	r2, r4, #26
 8008636:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008638:	9306      	str	r3, [sp, #24]
 800863a:	eba3 0309 	sub.w	r3, r3, r9
 800863e:	455b      	cmp	r3, fp
 8008640:	dc31      	bgt.n	80086a6 <_printf_float+0x36e>
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	459a      	cmp	sl, r3
 8008646:	dc3a      	bgt.n	80086be <_printf_float+0x386>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	d437      	bmi.n	80086be <_printf_float+0x386>
 800864e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008650:	ebaa 0903 	sub.w	r9, sl, r3
 8008654:	9b06      	ldr	r3, [sp, #24]
 8008656:	ebaa 0303 	sub.w	r3, sl, r3
 800865a:	4599      	cmp	r9, r3
 800865c:	bfa8      	it	ge
 800865e:	4699      	movge	r9, r3
 8008660:	f1b9 0f00 	cmp.w	r9, #0
 8008664:	dc33      	bgt.n	80086ce <_printf_float+0x396>
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800866e:	f104 0b1a 	add.w	fp, r4, #26
 8008672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008674:	ebaa 0303 	sub.w	r3, sl, r3
 8008678:	eba3 0309 	sub.w	r3, r3, r9
 800867c:	4543      	cmp	r3, r8
 800867e:	f77f af79 	ble.w	8008574 <_printf_float+0x23c>
 8008682:	2301      	movs	r3, #1
 8008684:	465a      	mov	r2, fp
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	f43f aeae 	beq.w	80083ee <_printf_float+0xb6>
 8008692:	f108 0801 	add.w	r8, r8, #1
 8008696:	e7ec      	b.n	8008672 <_printf_float+0x33a>
 8008698:	4642      	mov	r2, r8
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1c2      	bne.n	800862a <_printf_float+0x2f2>
 80086a4:	e6a3      	b.n	80083ee <_printf_float+0xb6>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4631      	mov	r1, r6
 80086aa:	4628      	mov	r0, r5
 80086ac:	9206      	str	r2, [sp, #24]
 80086ae:	47b8      	blx	r7
 80086b0:	3001      	adds	r0, #1
 80086b2:	f43f ae9c 	beq.w	80083ee <_printf_float+0xb6>
 80086b6:	9a06      	ldr	r2, [sp, #24]
 80086b8:	f10b 0b01 	add.w	fp, fp, #1
 80086bc:	e7bb      	b.n	8008636 <_printf_float+0x2fe>
 80086be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1c0      	bne.n	800864e <_printf_float+0x316>
 80086cc:	e68f      	b.n	80083ee <_printf_float+0xb6>
 80086ce:	9a06      	ldr	r2, [sp, #24]
 80086d0:	464b      	mov	r3, r9
 80086d2:	4442      	add	r2, r8
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d1c3      	bne.n	8008666 <_printf_float+0x32e>
 80086de:	e686      	b.n	80083ee <_printf_float+0xb6>
 80086e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086e4:	f1ba 0f01 	cmp.w	sl, #1
 80086e8:	dc01      	bgt.n	80086ee <_printf_float+0x3b6>
 80086ea:	07db      	lsls	r3, r3, #31
 80086ec:	d536      	bpl.n	800875c <_printf_float+0x424>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4642      	mov	r2, r8
 80086f2:	4631      	mov	r1, r6
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b8      	blx	r7
 80086f8:	3001      	adds	r0, #1
 80086fa:	f43f ae78 	beq.w	80083ee <_printf_float+0xb6>
 80086fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	f43f ae70 	beq.w	80083ee <_printf_float+0xb6>
 800870e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800871a:	f7f8 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800871e:	b9c0      	cbnz	r0, 8008752 <_printf_float+0x41a>
 8008720:	4653      	mov	r3, sl
 8008722:	f108 0201 	add.w	r2, r8, #1
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	d10c      	bne.n	800874a <_printf_float+0x412>
 8008730:	e65d      	b.n	80083ee <_printf_float+0xb6>
 8008732:	2301      	movs	r3, #1
 8008734:	465a      	mov	r2, fp
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f ae56 	beq.w	80083ee <_printf_float+0xb6>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	45d0      	cmp	r8, sl
 8008748:	dbf3      	blt.n	8008732 <_printf_float+0x3fa>
 800874a:	464b      	mov	r3, r9
 800874c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008750:	e6df      	b.n	8008512 <_printf_float+0x1da>
 8008752:	f04f 0800 	mov.w	r8, #0
 8008756:	f104 0b1a 	add.w	fp, r4, #26
 800875a:	e7f4      	b.n	8008746 <_printf_float+0x40e>
 800875c:	2301      	movs	r3, #1
 800875e:	4642      	mov	r2, r8
 8008760:	e7e1      	b.n	8008726 <_printf_float+0x3ee>
 8008762:	2301      	movs	r3, #1
 8008764:	464a      	mov	r2, r9
 8008766:	4631      	mov	r1, r6
 8008768:	4628      	mov	r0, r5
 800876a:	47b8      	blx	r7
 800876c:	3001      	adds	r0, #1
 800876e:	f43f ae3e 	beq.w	80083ee <_printf_float+0xb6>
 8008772:	f108 0801 	add.w	r8, r8, #1
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800877a:	1a5b      	subs	r3, r3, r1
 800877c:	4543      	cmp	r3, r8
 800877e:	dcf0      	bgt.n	8008762 <_printf_float+0x42a>
 8008780:	e6fc      	b.n	800857c <_printf_float+0x244>
 8008782:	f04f 0800 	mov.w	r8, #0
 8008786:	f104 0919 	add.w	r9, r4, #25
 800878a:	e7f4      	b.n	8008776 <_printf_float+0x43e>

0800878c <_printf_common>:
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	4616      	mov	r6, r2
 8008792:	4698      	mov	r8, r3
 8008794:	688a      	ldr	r2, [r1, #8]
 8008796:	690b      	ldr	r3, [r1, #16]
 8008798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800879c:	4293      	cmp	r3, r2
 800879e:	bfb8      	it	lt
 80087a0:	4613      	movlt	r3, r2
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a8:	4607      	mov	r7, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	b10a      	cbz	r2, 80087b2 <_printf_common+0x26>
 80087ae:	3301      	adds	r3, #1
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	0699      	lsls	r1, r3, #26
 80087b6:	bf42      	ittt	mi
 80087b8:	6833      	ldrmi	r3, [r6, #0]
 80087ba:	3302      	addmi	r3, #2
 80087bc:	6033      	strmi	r3, [r6, #0]
 80087be:	6825      	ldr	r5, [r4, #0]
 80087c0:	f015 0506 	ands.w	r5, r5, #6
 80087c4:	d106      	bne.n	80087d4 <_printf_common+0x48>
 80087c6:	f104 0a19 	add.w	sl, r4, #25
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	6832      	ldr	r2, [r6, #0]
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dc26      	bgt.n	8008822 <_printf_common+0x96>
 80087d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	3b00      	subs	r3, #0
 80087dc:	bf18      	it	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	0692      	lsls	r2, r2, #26
 80087e2:	d42b      	bmi.n	800883c <_printf_common+0xb0>
 80087e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e8:	4641      	mov	r1, r8
 80087ea:	4638      	mov	r0, r7
 80087ec:	47c8      	blx	r9
 80087ee:	3001      	adds	r0, #1
 80087f0:	d01e      	beq.n	8008830 <_printf_common+0xa4>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	f003 0306 	and.w	r3, r3, #6
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	bf02      	ittt	eq
 80087fe:	68e5      	ldreq	r5, [r4, #12]
 8008800:	6833      	ldreq	r3, [r6, #0]
 8008802:	1aed      	subeq	r5, r5, r3
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	bf0c      	ite	eq
 8008808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800880c:	2500      	movne	r5, #0
 800880e:	4293      	cmp	r3, r2
 8008810:	bfc4      	itt	gt
 8008812:	1a9b      	subgt	r3, r3, r2
 8008814:	18ed      	addgt	r5, r5, r3
 8008816:	2600      	movs	r6, #0
 8008818:	341a      	adds	r4, #26
 800881a:	42b5      	cmp	r5, r6
 800881c:	d11a      	bne.n	8008854 <_printf_common+0xc8>
 800881e:	2000      	movs	r0, #0
 8008820:	e008      	b.n	8008834 <_printf_common+0xa8>
 8008822:	2301      	movs	r3, #1
 8008824:	4652      	mov	r2, sl
 8008826:	4641      	mov	r1, r8
 8008828:	4638      	mov	r0, r7
 800882a:	47c8      	blx	r9
 800882c:	3001      	adds	r0, #1
 800882e:	d103      	bne.n	8008838 <_printf_common+0xac>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	3501      	adds	r5, #1
 800883a:	e7c6      	b.n	80087ca <_printf_common+0x3e>
 800883c:	18e1      	adds	r1, r4, r3
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	2030      	movs	r0, #48	@ 0x30
 8008842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008846:	4422      	add	r2, r4
 8008848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800884c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008850:	3302      	adds	r3, #2
 8008852:	e7c7      	b.n	80087e4 <_printf_common+0x58>
 8008854:	2301      	movs	r3, #1
 8008856:	4622      	mov	r2, r4
 8008858:	4641      	mov	r1, r8
 800885a:	4638      	mov	r0, r7
 800885c:	47c8      	blx	r9
 800885e:	3001      	adds	r0, #1
 8008860:	d0e6      	beq.n	8008830 <_printf_common+0xa4>
 8008862:	3601      	adds	r6, #1
 8008864:	e7d9      	b.n	800881a <_printf_common+0x8e>
	...

08008868 <_printf_i>:
 8008868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	7e0f      	ldrb	r7, [r1, #24]
 800886e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008870:	2f78      	cmp	r7, #120	@ 0x78
 8008872:	4691      	mov	r9, r2
 8008874:	4680      	mov	r8, r0
 8008876:	460c      	mov	r4, r1
 8008878:	469a      	mov	sl, r3
 800887a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800887e:	d807      	bhi.n	8008890 <_printf_i+0x28>
 8008880:	2f62      	cmp	r7, #98	@ 0x62
 8008882:	d80a      	bhi.n	800889a <_printf_i+0x32>
 8008884:	2f00      	cmp	r7, #0
 8008886:	f000 80d1 	beq.w	8008a2c <_printf_i+0x1c4>
 800888a:	2f58      	cmp	r7, #88	@ 0x58
 800888c:	f000 80b8 	beq.w	8008a00 <_printf_i+0x198>
 8008890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008898:	e03a      	b.n	8008910 <_printf_i+0xa8>
 800889a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800889e:	2b15      	cmp	r3, #21
 80088a0:	d8f6      	bhi.n	8008890 <_printf_i+0x28>
 80088a2:	a101      	add	r1, pc, #4	@ (adr r1, 80088a8 <_printf_i+0x40>)
 80088a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a8:	08008901 	.word	0x08008901
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008891 	.word	0x08008891
 80088b4:	08008891 	.word	0x08008891
 80088b8:	08008891 	.word	0x08008891
 80088bc:	08008891 	.word	0x08008891
 80088c0:	08008915 	.word	0x08008915
 80088c4:	08008891 	.word	0x08008891
 80088c8:	08008891 	.word	0x08008891
 80088cc:	08008891 	.word	0x08008891
 80088d0:	08008891 	.word	0x08008891
 80088d4:	08008a13 	.word	0x08008a13
 80088d8:	0800893f 	.word	0x0800893f
 80088dc:	080089cd 	.word	0x080089cd
 80088e0:	08008891 	.word	0x08008891
 80088e4:	08008891 	.word	0x08008891
 80088e8:	08008a35 	.word	0x08008a35
 80088ec:	08008891 	.word	0x08008891
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	08008891 	.word	0x08008891
 80088f8:	08008891 	.word	0x08008891
 80088fc:	080089d5 	.word	0x080089d5
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6032      	str	r2, [r6, #0]
 8008908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800890c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008910:	2301      	movs	r3, #1
 8008912:	e09c      	b.n	8008a4e <_printf_i+0x1e6>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	1d19      	adds	r1, r3, #4
 800891a:	6031      	str	r1, [r6, #0]
 800891c:	0606      	lsls	r6, r0, #24
 800891e:	d501      	bpl.n	8008924 <_printf_i+0xbc>
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	e003      	b.n	800892c <_printf_i+0xc4>
 8008924:	0645      	lsls	r5, r0, #25
 8008926:	d5fb      	bpl.n	8008920 <_printf_i+0xb8>
 8008928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800892c:	2d00      	cmp	r5, #0
 800892e:	da03      	bge.n	8008938 <_printf_i+0xd0>
 8008930:	232d      	movs	r3, #45	@ 0x2d
 8008932:	426d      	negs	r5, r5
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008938:	4858      	ldr	r0, [pc, #352]	@ (8008a9c <_printf_i+0x234>)
 800893a:	230a      	movs	r3, #10
 800893c:	e011      	b.n	8008962 <_printf_i+0xfa>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	0608      	lsls	r0, r1, #24
 8008944:	f853 5b04 	ldr.w	r5, [r3], #4
 8008948:	d402      	bmi.n	8008950 <_printf_i+0xe8>
 800894a:	0649      	lsls	r1, r1, #25
 800894c:	bf48      	it	mi
 800894e:	b2ad      	uxthmi	r5, r5
 8008950:	2f6f      	cmp	r7, #111	@ 0x6f
 8008952:	4852      	ldr	r0, [pc, #328]	@ (8008a9c <_printf_i+0x234>)
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	bf14      	ite	ne
 8008958:	230a      	movne	r3, #10
 800895a:	2308      	moveq	r3, #8
 800895c:	2100      	movs	r1, #0
 800895e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008962:	6866      	ldr	r6, [r4, #4]
 8008964:	60a6      	str	r6, [r4, #8]
 8008966:	2e00      	cmp	r6, #0
 8008968:	db05      	blt.n	8008976 <_printf_i+0x10e>
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	432e      	orrs	r6, r5
 800896e:	f021 0104 	bic.w	r1, r1, #4
 8008972:	6021      	str	r1, [r4, #0]
 8008974:	d04b      	beq.n	8008a0e <_printf_i+0x1a6>
 8008976:	4616      	mov	r6, r2
 8008978:	fbb5 f1f3 	udiv	r1, r5, r3
 800897c:	fb03 5711 	mls	r7, r3, r1, r5
 8008980:	5dc7      	ldrb	r7, [r0, r7]
 8008982:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008986:	462f      	mov	r7, r5
 8008988:	42bb      	cmp	r3, r7
 800898a:	460d      	mov	r5, r1
 800898c:	d9f4      	bls.n	8008978 <_printf_i+0x110>
 800898e:	2b08      	cmp	r3, #8
 8008990:	d10b      	bne.n	80089aa <_printf_i+0x142>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	07df      	lsls	r7, r3, #31
 8008996:	d508      	bpl.n	80089aa <_printf_i+0x142>
 8008998:	6923      	ldr	r3, [r4, #16]
 800899a:	6861      	ldr	r1, [r4, #4]
 800899c:	4299      	cmp	r1, r3
 800899e:	bfde      	ittt	le
 80089a0:	2330      	movle	r3, #48	@ 0x30
 80089a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089aa:	1b92      	subs	r2, r2, r6
 80089ac:	6122      	str	r2, [r4, #16]
 80089ae:	f8cd a000 	str.w	sl, [sp]
 80089b2:	464b      	mov	r3, r9
 80089b4:	aa03      	add	r2, sp, #12
 80089b6:	4621      	mov	r1, r4
 80089b8:	4640      	mov	r0, r8
 80089ba:	f7ff fee7 	bl	800878c <_printf_common>
 80089be:	3001      	adds	r0, #1
 80089c0:	d14a      	bne.n	8008a58 <_printf_i+0x1f0>
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	b004      	add	sp, #16
 80089c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	4832      	ldr	r0, [pc, #200]	@ (8008aa0 <_printf_i+0x238>)
 80089d6:	2778      	movs	r7, #120	@ 0x78
 80089d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	6831      	ldr	r1, [r6, #0]
 80089e0:	061f      	lsls	r7, r3, #24
 80089e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e6:	d402      	bmi.n	80089ee <_printf_i+0x186>
 80089e8:	065f      	lsls	r7, r3, #25
 80089ea:	bf48      	it	mi
 80089ec:	b2ad      	uxthmi	r5, r5
 80089ee:	6031      	str	r1, [r6, #0]
 80089f0:	07d9      	lsls	r1, r3, #31
 80089f2:	bf44      	itt	mi
 80089f4:	f043 0320 	orrmi.w	r3, r3, #32
 80089f8:	6023      	strmi	r3, [r4, #0]
 80089fa:	b11d      	cbz	r5, 8008a04 <_printf_i+0x19c>
 80089fc:	2310      	movs	r3, #16
 80089fe:	e7ad      	b.n	800895c <_printf_i+0xf4>
 8008a00:	4826      	ldr	r0, [pc, #152]	@ (8008a9c <_printf_i+0x234>)
 8008a02:	e7e9      	b.n	80089d8 <_printf_i+0x170>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	f023 0320 	bic.w	r3, r3, #32
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	e7f6      	b.n	80089fc <_printf_i+0x194>
 8008a0e:	4616      	mov	r6, r2
 8008a10:	e7bd      	b.n	800898e <_printf_i+0x126>
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	6825      	ldr	r5, [r4, #0]
 8008a16:	6961      	ldr	r1, [r4, #20]
 8008a18:	1d18      	adds	r0, r3, #4
 8008a1a:	6030      	str	r0, [r6, #0]
 8008a1c:	062e      	lsls	r6, r5, #24
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	d501      	bpl.n	8008a26 <_printf_i+0x1be>
 8008a22:	6019      	str	r1, [r3, #0]
 8008a24:	e002      	b.n	8008a2c <_printf_i+0x1c4>
 8008a26:	0668      	lsls	r0, r5, #25
 8008a28:	d5fb      	bpl.n	8008a22 <_printf_i+0x1ba>
 8008a2a:	8019      	strh	r1, [r3, #0]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	4616      	mov	r6, r2
 8008a32:	e7bc      	b.n	80089ae <_printf_i+0x146>
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	6032      	str	r2, [r6, #0]
 8008a3a:	681e      	ldr	r6, [r3, #0]
 8008a3c:	6862      	ldr	r2, [r4, #4]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7f7 fbcd 	bl	80001e0 <memchr>
 8008a46:	b108      	cbz	r0, 8008a4c <_printf_i+0x1e4>
 8008a48:	1b80      	subs	r0, r0, r6
 8008a4a:	6060      	str	r0, [r4, #4]
 8008a4c:	6863      	ldr	r3, [r4, #4]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2300      	movs	r3, #0
 8008a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a56:	e7aa      	b.n	80089ae <_printf_i+0x146>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4640      	mov	r0, r8
 8008a60:	47d0      	blx	sl
 8008a62:	3001      	adds	r0, #1
 8008a64:	d0ad      	beq.n	80089c2 <_printf_i+0x15a>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	079b      	lsls	r3, r3, #30
 8008a6a:	d413      	bmi.n	8008a94 <_printf_i+0x22c>
 8008a6c:	68e0      	ldr	r0, [r4, #12]
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	4298      	cmp	r0, r3
 8008a72:	bfb8      	it	lt
 8008a74:	4618      	movlt	r0, r3
 8008a76:	e7a6      	b.n	80089c6 <_printf_i+0x15e>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4632      	mov	r2, r6
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4640      	mov	r0, r8
 8008a80:	47d0      	blx	sl
 8008a82:	3001      	adds	r0, #1
 8008a84:	d09d      	beq.n	80089c2 <_printf_i+0x15a>
 8008a86:	3501      	adds	r5, #1
 8008a88:	68e3      	ldr	r3, [r4, #12]
 8008a8a:	9903      	ldr	r1, [sp, #12]
 8008a8c:	1a5b      	subs	r3, r3, r1
 8008a8e:	42ab      	cmp	r3, r5
 8008a90:	dcf2      	bgt.n	8008a78 <_printf_i+0x210>
 8008a92:	e7eb      	b.n	8008a6c <_printf_i+0x204>
 8008a94:	2500      	movs	r5, #0
 8008a96:	f104 0619 	add.w	r6, r4, #25
 8008a9a:	e7f5      	b.n	8008a88 <_printf_i+0x220>
 8008a9c:	0800cbe2 	.word	0x0800cbe2
 8008aa0:	0800cbf3 	.word	0x0800cbf3

08008aa4 <_scanf_float>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	4691      	mov	r9, r2
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	688b      	ldr	r3, [r1, #8]
 8008ab0:	1e5a      	subs	r2, r3, #1
 8008ab2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008ab6:	bf81      	itttt	hi
 8008ab8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008abc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008ac0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008ac4:	608b      	strhi	r3, [r1, #8]
 8008ac6:	680b      	ldr	r3, [r1, #0]
 8008ac8:	460a      	mov	r2, r1
 8008aca:	f04f 0500 	mov.w	r5, #0
 8008ace:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008ad2:	f842 3b1c 	str.w	r3, [r2], #28
 8008ad6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ada:	4680      	mov	r8, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	bf98      	it	ls
 8008ae0:	f04f 0b00 	movls.w	fp, #0
 8008ae4:	9201      	str	r2, [sp, #4]
 8008ae6:	4616      	mov	r6, r2
 8008ae8:	46aa      	mov	sl, r5
 8008aea:	462f      	mov	r7, r5
 8008aec:	9502      	str	r5, [sp, #8]
 8008aee:	68a2      	ldr	r2, [r4, #8]
 8008af0:	b15a      	cbz	r2, 8008b0a <_scanf_float+0x66>
 8008af2:	f8d9 3000 	ldr.w	r3, [r9]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b4e      	cmp	r3, #78	@ 0x4e
 8008afa:	d863      	bhi.n	8008bc4 <_scanf_float+0x120>
 8008afc:	2b40      	cmp	r3, #64	@ 0x40
 8008afe:	d83b      	bhi.n	8008b78 <_scanf_float+0xd4>
 8008b00:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b04:	b2c8      	uxtb	r0, r1
 8008b06:	280e      	cmp	r0, #14
 8008b08:	d939      	bls.n	8008b7e <_scanf_float+0xda>
 8008b0a:	b11f      	cbz	r7, 8008b14 <_scanf_float+0x70>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b18:	f1ba 0f01 	cmp.w	sl, #1
 8008b1c:	f200 8114 	bhi.w	8008d48 <_scanf_float+0x2a4>
 8008b20:	9b01      	ldr	r3, [sp, #4]
 8008b22:	429e      	cmp	r6, r3
 8008b24:	f200 8105 	bhi.w	8008d32 <_scanf_float+0x28e>
 8008b28:	2001      	movs	r0, #1
 8008b2a:	b007      	add	sp, #28
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b30:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008b34:	2a0d      	cmp	r2, #13
 8008b36:	d8e8      	bhi.n	8008b0a <_scanf_float+0x66>
 8008b38:	a101      	add	r1, pc, #4	@ (adr r1, 8008b40 <_scanf_float+0x9c>)
 8008b3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008c89 	.word	0x08008c89
 8008b44:	08008b0b 	.word	0x08008b0b
 8008b48:	08008b0b 	.word	0x08008b0b
 8008b4c:	08008b0b 	.word	0x08008b0b
 8008b50:	08008ce5 	.word	0x08008ce5
 8008b54:	08008cbf 	.word	0x08008cbf
 8008b58:	08008b0b 	.word	0x08008b0b
 8008b5c:	08008b0b 	.word	0x08008b0b
 8008b60:	08008c97 	.word	0x08008c97
 8008b64:	08008b0b 	.word	0x08008b0b
 8008b68:	08008b0b 	.word	0x08008b0b
 8008b6c:	08008b0b 	.word	0x08008b0b
 8008b70:	08008b0b 	.word	0x08008b0b
 8008b74:	08008c53 	.word	0x08008c53
 8008b78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b7c:	e7da      	b.n	8008b34 <_scanf_float+0x90>
 8008b7e:	290e      	cmp	r1, #14
 8008b80:	d8c3      	bhi.n	8008b0a <_scanf_float+0x66>
 8008b82:	a001      	add	r0, pc, #4	@ (adr r0, 8008b88 <_scanf_float+0xe4>)
 8008b84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b88:	08008c43 	.word	0x08008c43
 8008b8c:	08008b0b 	.word	0x08008b0b
 8008b90:	08008c43 	.word	0x08008c43
 8008b94:	08008cd3 	.word	0x08008cd3
 8008b98:	08008b0b 	.word	0x08008b0b
 8008b9c:	08008be5 	.word	0x08008be5
 8008ba0:	08008c29 	.word	0x08008c29
 8008ba4:	08008c29 	.word	0x08008c29
 8008ba8:	08008c29 	.word	0x08008c29
 8008bac:	08008c29 	.word	0x08008c29
 8008bb0:	08008c29 	.word	0x08008c29
 8008bb4:	08008c29 	.word	0x08008c29
 8008bb8:	08008c29 	.word	0x08008c29
 8008bbc:	08008c29 	.word	0x08008c29
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8008bc6:	d809      	bhi.n	8008bdc <_scanf_float+0x138>
 8008bc8:	2b60      	cmp	r3, #96	@ 0x60
 8008bca:	d8b1      	bhi.n	8008b30 <_scanf_float+0x8c>
 8008bcc:	2b54      	cmp	r3, #84	@ 0x54
 8008bce:	d07b      	beq.n	8008cc8 <_scanf_float+0x224>
 8008bd0:	2b59      	cmp	r3, #89	@ 0x59
 8008bd2:	d19a      	bne.n	8008b0a <_scanf_float+0x66>
 8008bd4:	2d07      	cmp	r5, #7
 8008bd6:	d198      	bne.n	8008b0a <_scanf_float+0x66>
 8008bd8:	2508      	movs	r5, #8
 8008bda:	e02f      	b.n	8008c3c <_scanf_float+0x198>
 8008bdc:	2b74      	cmp	r3, #116	@ 0x74
 8008bde:	d073      	beq.n	8008cc8 <_scanf_float+0x224>
 8008be0:	2b79      	cmp	r3, #121	@ 0x79
 8008be2:	e7f6      	b.n	8008bd2 <_scanf_float+0x12e>
 8008be4:	6821      	ldr	r1, [r4, #0]
 8008be6:	05c8      	lsls	r0, r1, #23
 8008be8:	d51e      	bpl.n	8008c28 <_scanf_float+0x184>
 8008bea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008bee:	6021      	str	r1, [r4, #0]
 8008bf0:	3701      	adds	r7, #1
 8008bf2:	f1bb 0f00 	cmp.w	fp, #0
 8008bf6:	d003      	beq.n	8008c00 <_scanf_float+0x15c>
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bfe:	60a2      	str	r2, [r4, #8]
 8008c00:	68a3      	ldr	r3, [r4, #8]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c18:	f340 8082 	ble.w	8008d20 <_scanf_float+0x27c>
 8008c1c:	f8d9 3000 	ldr.w	r3, [r9]
 8008c20:	3301      	adds	r3, #1
 8008c22:	f8c9 3000 	str.w	r3, [r9]
 8008c26:	e762      	b.n	8008aee <_scanf_float+0x4a>
 8008c28:	eb1a 0105 	adds.w	r1, sl, r5
 8008c2c:	f47f af6d 	bne.w	8008b0a <_scanf_float+0x66>
 8008c30:	6822      	ldr	r2, [r4, #0]
 8008c32:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	460d      	mov	r5, r1
 8008c3a:	468a      	mov	sl, r1
 8008c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c40:	e7de      	b.n	8008c00 <_scanf_float+0x15c>
 8008c42:	6822      	ldr	r2, [r4, #0]
 8008c44:	0610      	lsls	r0, r2, #24
 8008c46:	f57f af60 	bpl.w	8008b0a <_scanf_float+0x66>
 8008c4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	e7f4      	b.n	8008c3c <_scanf_float+0x198>
 8008c52:	f1ba 0f00 	cmp.w	sl, #0
 8008c56:	d10c      	bne.n	8008c72 <_scanf_float+0x1ce>
 8008c58:	b977      	cbnz	r7, 8008c78 <_scanf_float+0x1d4>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c64:	d108      	bne.n	8008c78 <_scanf_float+0x1d4>
 8008c66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c6a:	6022      	str	r2, [r4, #0]
 8008c6c:	f04f 0a01 	mov.w	sl, #1
 8008c70:	e7e4      	b.n	8008c3c <_scanf_float+0x198>
 8008c72:	f1ba 0f02 	cmp.w	sl, #2
 8008c76:	d050      	beq.n	8008d1a <_scanf_float+0x276>
 8008c78:	2d01      	cmp	r5, #1
 8008c7a:	d002      	beq.n	8008c82 <_scanf_float+0x1de>
 8008c7c:	2d04      	cmp	r5, #4
 8008c7e:	f47f af44 	bne.w	8008b0a <_scanf_float+0x66>
 8008c82:	3501      	adds	r5, #1
 8008c84:	b2ed      	uxtb	r5, r5
 8008c86:	e7d9      	b.n	8008c3c <_scanf_float+0x198>
 8008c88:	f1ba 0f01 	cmp.w	sl, #1
 8008c8c:	f47f af3d 	bne.w	8008b0a <_scanf_float+0x66>
 8008c90:	f04f 0a02 	mov.w	sl, #2
 8008c94:	e7d2      	b.n	8008c3c <_scanf_float+0x198>
 8008c96:	b975      	cbnz	r5, 8008cb6 <_scanf_float+0x212>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	f47f af37 	bne.w	8008b0c <_scanf_float+0x68>
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ca4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ca8:	f040 8103 	bne.w	8008eb2 <_scanf_float+0x40e>
 8008cac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cb0:	6022      	str	r2, [r4, #0]
 8008cb2:	2501      	movs	r5, #1
 8008cb4:	e7c2      	b.n	8008c3c <_scanf_float+0x198>
 8008cb6:	2d03      	cmp	r5, #3
 8008cb8:	d0e3      	beq.n	8008c82 <_scanf_float+0x1de>
 8008cba:	2d05      	cmp	r5, #5
 8008cbc:	e7df      	b.n	8008c7e <_scanf_float+0x1da>
 8008cbe:	2d02      	cmp	r5, #2
 8008cc0:	f47f af23 	bne.w	8008b0a <_scanf_float+0x66>
 8008cc4:	2503      	movs	r5, #3
 8008cc6:	e7b9      	b.n	8008c3c <_scanf_float+0x198>
 8008cc8:	2d06      	cmp	r5, #6
 8008cca:	f47f af1e 	bne.w	8008b0a <_scanf_float+0x66>
 8008cce:	2507      	movs	r5, #7
 8008cd0:	e7b4      	b.n	8008c3c <_scanf_float+0x198>
 8008cd2:	6822      	ldr	r2, [r4, #0]
 8008cd4:	0591      	lsls	r1, r2, #22
 8008cd6:	f57f af18 	bpl.w	8008b0a <_scanf_float+0x66>
 8008cda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	9702      	str	r7, [sp, #8]
 8008ce2:	e7ab      	b.n	8008c3c <_scanf_float+0x198>
 8008ce4:	6822      	ldr	r2, [r4, #0]
 8008ce6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008cea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008cee:	d005      	beq.n	8008cfc <_scanf_float+0x258>
 8008cf0:	0550      	lsls	r0, r2, #21
 8008cf2:	f57f af0a 	bpl.w	8008b0a <_scanf_float+0x66>
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	f000 80db 	beq.w	8008eb2 <_scanf_float+0x40e>
 8008cfc:	0591      	lsls	r1, r2, #22
 8008cfe:	bf58      	it	pl
 8008d00:	9902      	ldrpl	r1, [sp, #8]
 8008d02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d06:	bf58      	it	pl
 8008d08:	1a79      	subpl	r1, r7, r1
 8008d0a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d0e:	bf58      	it	pl
 8008d10:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d14:	6022      	str	r2, [r4, #0]
 8008d16:	2700      	movs	r7, #0
 8008d18:	e790      	b.n	8008c3c <_scanf_float+0x198>
 8008d1a:	f04f 0a03 	mov.w	sl, #3
 8008d1e:	e78d      	b.n	8008c3c <_scanf_float+0x198>
 8008d20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d24:	4649      	mov	r1, r9
 8008d26:	4640      	mov	r0, r8
 8008d28:	4798      	blx	r3
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	f43f aedf 	beq.w	8008aee <_scanf_float+0x4a>
 8008d30:	e6eb      	b.n	8008b0a <_scanf_float+0x66>
 8008d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d3a:	464a      	mov	r2, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4798      	blx	r3
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	e6eb      	b.n	8008b20 <_scanf_float+0x7c>
 8008d48:	1e6b      	subs	r3, r5, #1
 8008d4a:	2b06      	cmp	r3, #6
 8008d4c:	d824      	bhi.n	8008d98 <_scanf_float+0x2f4>
 8008d4e:	2d02      	cmp	r5, #2
 8008d50:	d836      	bhi.n	8008dc0 <_scanf_float+0x31c>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	429e      	cmp	r6, r3
 8008d56:	f67f aee7 	bls.w	8008b28 <_scanf_float+0x84>
 8008d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d62:	464a      	mov	r2, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	4798      	blx	r3
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	e7f0      	b.n	8008d52 <_scanf_float+0x2ae>
 8008d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d78:	464a      	mov	r2, r9
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4798      	blx	r3
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d88:	fa5f fa8a 	uxtb.w	sl, sl
 8008d8c:	f1ba 0f02 	cmp.w	sl, #2
 8008d90:	d1ee      	bne.n	8008d70 <_scanf_float+0x2cc>
 8008d92:	3d03      	subs	r5, #3
 8008d94:	b2ed      	uxtb	r5, r5
 8008d96:	1b76      	subs	r6, r6, r5
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	05da      	lsls	r2, r3, #23
 8008d9c:	d530      	bpl.n	8008e00 <_scanf_float+0x35c>
 8008d9e:	055b      	lsls	r3, r3, #21
 8008da0:	d511      	bpl.n	8008dc6 <_scanf_float+0x322>
 8008da2:	9b01      	ldr	r3, [sp, #4]
 8008da4:	429e      	cmp	r6, r3
 8008da6:	f67f aebf 	bls.w	8008b28 <_scanf_float+0x84>
 8008daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008db2:	464a      	mov	r2, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	4798      	blx	r3
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	6123      	str	r3, [r4, #16]
 8008dbe:	e7f0      	b.n	8008da2 <_scanf_float+0x2fe>
 8008dc0:	46aa      	mov	sl, r5
 8008dc2:	46b3      	mov	fp, r6
 8008dc4:	e7de      	b.n	8008d84 <_scanf_float+0x2e0>
 8008dc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	2965      	cmp	r1, #101	@ 0x65
 8008dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	d00c      	beq.n	8008df4 <_scanf_float+0x350>
 8008dda:	2945      	cmp	r1, #69	@ 0x45
 8008ddc:	d00a      	beq.n	8008df4 <_scanf_float+0x350>
 8008dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de2:	464a      	mov	r2, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	4798      	blx	r3
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	1eb5      	subs	r5, r6, #2
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008df8:	464a      	mov	r2, r9
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4798      	blx	r3
 8008dfe:	462e      	mov	r6, r5
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	f012 0210 	ands.w	r2, r2, #16
 8008e06:	d001      	beq.n	8008e0c <_scanf_float+0x368>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	e68e      	b.n	8008b2a <_scanf_float+0x86>
 8008e0c:	7032      	strb	r2, [r6, #0]
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e18:	d125      	bne.n	8008e66 <_scanf_float+0x3c2>
 8008e1a:	9b02      	ldr	r3, [sp, #8]
 8008e1c:	429f      	cmp	r7, r3
 8008e1e:	d00a      	beq.n	8008e36 <_scanf_float+0x392>
 8008e20:	1bda      	subs	r2, r3, r7
 8008e22:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e26:	429e      	cmp	r6, r3
 8008e28:	bf28      	it	cs
 8008e2a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e2e:	4922      	ldr	r1, [pc, #136]	@ (8008eb8 <_scanf_float+0x414>)
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f907 	bl	8009044 <siprintf>
 8008e36:	9901      	ldr	r1, [sp, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	f002 fc00 	bl	800b640 <_strtod_r>
 8008e40:	9b03      	ldr	r3, [sp, #12]
 8008e42:	6821      	ldr	r1, [r4, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f011 0f02 	tst.w	r1, #2
 8008e4a:	ec57 6b10 	vmov	r6, r7, d0
 8008e4e:	f103 0204 	add.w	r2, r3, #4
 8008e52:	d015      	beq.n	8008e80 <_scanf_float+0x3dc>
 8008e54:	9903      	ldr	r1, [sp, #12]
 8008e56:	600a      	str	r2, [r1, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	e9c3 6700 	strd	r6, r7, [r3]
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	60e3      	str	r3, [r4, #12]
 8008e64:	e7d0      	b.n	8008e08 <_scanf_float+0x364>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d0e4      	beq.n	8008e36 <_scanf_float+0x392>
 8008e6c:	9905      	ldr	r1, [sp, #20]
 8008e6e:	230a      	movs	r3, #10
 8008e70:	3101      	adds	r1, #1
 8008e72:	4640      	mov	r0, r8
 8008e74:	f002 fc64 	bl	800b740 <_strtol_r>
 8008e78:	9b04      	ldr	r3, [sp, #16]
 8008e7a:	9e05      	ldr	r6, [sp, #20]
 8008e7c:	1ac2      	subs	r2, r0, r3
 8008e7e:	e7d0      	b.n	8008e22 <_scanf_float+0x37e>
 8008e80:	f011 0f04 	tst.w	r1, #4
 8008e84:	9903      	ldr	r1, [sp, #12]
 8008e86:	600a      	str	r2, [r1, #0]
 8008e88:	d1e6      	bne.n	8008e58 <_scanf_float+0x3b4>
 8008e8a:	681d      	ldr	r5, [r3, #0]
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fe52 	bl	8000b3c <__aeabi_dcmpun>
 8008e98:	b128      	cbz	r0, 8008ea6 <_scanf_float+0x402>
 8008e9a:	4808      	ldr	r0, [pc, #32]	@ (8008ebc <_scanf_float+0x418>)
 8008e9c:	f000 f9c6 	bl	800922c <nanf>
 8008ea0:	ed85 0a00 	vstr	s0, [r5]
 8008ea4:	e7db      	b.n	8008e5e <_scanf_float+0x3ba>
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f7f7 fea5 	bl	8000bf8 <__aeabi_d2f>
 8008eae:	6028      	str	r0, [r5, #0]
 8008eb0:	e7d5      	b.n	8008e5e <_scanf_float+0x3ba>
 8008eb2:	2700      	movs	r7, #0
 8008eb4:	e62e      	b.n	8008b14 <_scanf_float+0x70>
 8008eb6:	bf00      	nop
 8008eb8:	0800cc04 	.word	0x0800cc04
 8008ebc:	0800cd45 	.word	0x0800cd45

08008ec0 <std>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ece:	6083      	str	r3, [r0, #8]
 8008ed0:	8181      	strh	r1, [r0, #12]
 8008ed2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ed4:	81c2      	strh	r2, [r0, #14]
 8008ed6:	6183      	str	r3, [r0, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	2208      	movs	r2, #8
 8008edc:	305c      	adds	r0, #92	@ 0x5c
 8008ede:	f000 f916 	bl	800910e <memset>
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <std+0x58>)
 8008ee4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <std+0x5c>)
 8008ee8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <std+0x60>)
 8008eec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <std+0x64>)
 8008ef0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <std+0x68>)
 8008ef4:	6224      	str	r4, [r4, #32]
 8008ef6:	429c      	cmp	r4, r3
 8008ef8:	d006      	beq.n	8008f08 <std+0x48>
 8008efa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008efe:	4294      	cmp	r4, r2
 8008f00:	d002      	beq.n	8008f08 <std+0x48>
 8008f02:	33d0      	adds	r3, #208	@ 0xd0
 8008f04:	429c      	cmp	r4, r3
 8008f06:	d105      	bne.n	8008f14 <std+0x54>
 8008f08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f10:	f000 b97a 	b.w	8009208 <__retarget_lock_init_recursive>
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	08009089 	.word	0x08009089
 8008f1c:	080090ab 	.word	0x080090ab
 8008f20:	080090e3 	.word	0x080090e3
 8008f24:	08009107 	.word	0x08009107
 8008f28:	20000728 	.word	0x20000728

08008f2c <stdio_exit_handler>:
 8008f2c:	4a02      	ldr	r2, [pc, #8]	@ (8008f38 <stdio_exit_handler+0xc>)
 8008f2e:	4903      	ldr	r1, [pc, #12]	@ (8008f3c <stdio_exit_handler+0x10>)
 8008f30:	4803      	ldr	r0, [pc, #12]	@ (8008f40 <stdio_exit_handler+0x14>)
 8008f32:	f000 b869 	b.w	8009008 <_fwalk_sglue>
 8008f36:	bf00      	nop
 8008f38:	20000100 	.word	0x20000100
 8008f3c:	0800bafd 	.word	0x0800bafd
 8008f40:	20000110 	.word	0x20000110

08008f44 <cleanup_stdio>:
 8008f44:	6841      	ldr	r1, [r0, #4]
 8008f46:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <cleanup_stdio+0x34>)
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	d001      	beq.n	8008f54 <cleanup_stdio+0x10>
 8008f50:	f002 fdd4 	bl	800bafc <_fflush_r>
 8008f54:	68a1      	ldr	r1, [r4, #8]
 8008f56:	4b09      	ldr	r3, [pc, #36]	@ (8008f7c <cleanup_stdio+0x38>)
 8008f58:	4299      	cmp	r1, r3
 8008f5a:	d002      	beq.n	8008f62 <cleanup_stdio+0x1e>
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f002 fdcd 	bl	800bafc <_fflush_r>
 8008f62:	68e1      	ldr	r1, [r4, #12]
 8008f64:	4b06      	ldr	r3, [pc, #24]	@ (8008f80 <cleanup_stdio+0x3c>)
 8008f66:	4299      	cmp	r1, r3
 8008f68:	d004      	beq.n	8008f74 <cleanup_stdio+0x30>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f70:	f002 bdc4 	b.w	800bafc <_fflush_r>
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	bf00      	nop
 8008f78:	20000728 	.word	0x20000728
 8008f7c:	20000790 	.word	0x20000790
 8008f80:	200007f8 	.word	0x200007f8

08008f84 <global_stdio_init.part.0>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb4 <global_stdio_init.part.0+0x30>)
 8008f88:	4c0b      	ldr	r4, [pc, #44]	@ (8008fb8 <global_stdio_init.part.0+0x34>)
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008fbc <global_stdio_init.part.0+0x38>)
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	2200      	movs	r2, #0
 8008f92:	2104      	movs	r1, #4
 8008f94:	f7ff ff94 	bl	8008ec0 <std>
 8008f98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	2109      	movs	r1, #9
 8008fa0:	f7ff ff8e 	bl	8008ec0 <std>
 8008fa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fa8:	2202      	movs	r2, #2
 8008faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fae:	2112      	movs	r1, #18
 8008fb0:	f7ff bf86 	b.w	8008ec0 <std>
 8008fb4:	20000860 	.word	0x20000860
 8008fb8:	20000728 	.word	0x20000728
 8008fbc:	08008f2d 	.word	0x08008f2d

08008fc0 <__sfp_lock_acquire>:
 8008fc0:	4801      	ldr	r0, [pc, #4]	@ (8008fc8 <__sfp_lock_acquire+0x8>)
 8008fc2:	f000 b922 	b.w	800920a <__retarget_lock_acquire_recursive>
 8008fc6:	bf00      	nop
 8008fc8:	20000869 	.word	0x20000869

08008fcc <__sfp_lock_release>:
 8008fcc:	4801      	ldr	r0, [pc, #4]	@ (8008fd4 <__sfp_lock_release+0x8>)
 8008fce:	f000 b91d 	b.w	800920c <__retarget_lock_release_recursive>
 8008fd2:	bf00      	nop
 8008fd4:	20000869 	.word	0x20000869

08008fd8 <__sinit>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4604      	mov	r4, r0
 8008fdc:	f7ff fff0 	bl	8008fc0 <__sfp_lock_acquire>
 8008fe0:	6a23      	ldr	r3, [r4, #32]
 8008fe2:	b11b      	cbz	r3, 8008fec <__sinit+0x14>
 8008fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe8:	f7ff bff0 	b.w	8008fcc <__sfp_lock_release>
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <__sinit+0x28>)
 8008fee:	6223      	str	r3, [r4, #32]
 8008ff0:	4b04      	ldr	r3, [pc, #16]	@ (8009004 <__sinit+0x2c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f5      	bne.n	8008fe4 <__sinit+0xc>
 8008ff8:	f7ff ffc4 	bl	8008f84 <global_stdio_init.part.0>
 8008ffc:	e7f2      	b.n	8008fe4 <__sinit+0xc>
 8008ffe:	bf00      	nop
 8009000:	08008f45 	.word	0x08008f45
 8009004:	20000860 	.word	0x20000860

08009008 <_fwalk_sglue>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	4607      	mov	r7, r0
 800900e:	4688      	mov	r8, r1
 8009010:	4614      	mov	r4, r2
 8009012:	2600      	movs	r6, #0
 8009014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009018:	f1b9 0901 	subs.w	r9, r9, #1
 800901c:	d505      	bpl.n	800902a <_fwalk_sglue+0x22>
 800901e:	6824      	ldr	r4, [r4, #0]
 8009020:	2c00      	cmp	r4, #0
 8009022:	d1f7      	bne.n	8009014 <_fwalk_sglue+0xc>
 8009024:	4630      	mov	r0, r6
 8009026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d907      	bls.n	8009040 <_fwalk_sglue+0x38>
 8009030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009034:	3301      	adds	r3, #1
 8009036:	d003      	beq.n	8009040 <_fwalk_sglue+0x38>
 8009038:	4629      	mov	r1, r5
 800903a:	4638      	mov	r0, r7
 800903c:	47c0      	blx	r8
 800903e:	4306      	orrs	r6, r0
 8009040:	3568      	adds	r5, #104	@ 0x68
 8009042:	e7e9      	b.n	8009018 <_fwalk_sglue+0x10>

08009044 <siprintf>:
 8009044:	b40e      	push	{r1, r2, r3}
 8009046:	b510      	push	{r4, lr}
 8009048:	b09d      	sub	sp, #116	@ 0x74
 800904a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	9006      	str	r0, [sp, #24]
 8009050:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009054:	480a      	ldr	r0, [pc, #40]	@ (8009080 <siprintf+0x3c>)
 8009056:	9107      	str	r1, [sp, #28]
 8009058:	9104      	str	r1, [sp, #16]
 800905a:	490a      	ldr	r1, [pc, #40]	@ (8009084 <siprintf+0x40>)
 800905c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009060:	9105      	str	r1, [sp, #20]
 8009062:	2400      	movs	r4, #0
 8009064:	a902      	add	r1, sp, #8
 8009066:	6800      	ldr	r0, [r0, #0]
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800906c:	f002 fbc6 	bl	800b7fc <_svfiprintf_r>
 8009070:	9b02      	ldr	r3, [sp, #8]
 8009072:	701c      	strb	r4, [r3, #0]
 8009074:	b01d      	add	sp, #116	@ 0x74
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907a:	b003      	add	sp, #12
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	2000010c 	.word	0x2000010c
 8009084:	ffff0208 	.word	0xffff0208

08009088 <__sread>:
 8009088:	b510      	push	{r4, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f86c 	bl	800916c <_read_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	bfab      	itete	ge
 8009098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800909a:	89a3      	ldrhlt	r3, [r4, #12]
 800909c:	181b      	addge	r3, r3, r0
 800909e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090a2:	bfac      	ite	ge
 80090a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090a6:	81a3      	strhlt	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__swrite>:
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	461f      	mov	r7, r3
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	05db      	lsls	r3, r3, #23
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4616      	mov	r6, r2
 80090ba:	d505      	bpl.n	80090c8 <__swrite+0x1e>
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	2302      	movs	r3, #2
 80090c2:	2200      	movs	r2, #0
 80090c4:	f000 f840 	bl	8009148 <_lseek_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	4632      	mov	r2, r6
 80090d6:	463b      	mov	r3, r7
 80090d8:	4628      	mov	r0, r5
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 b857 	b.w	8009190 <_write_r>

080090e2 <__sseek>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 f82d 	bl	8009148 <_lseek_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	bf15      	itete	ne
 80090f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090fe:	81a3      	strheq	r3, [r4, #12]
 8009100:	bf18      	it	ne
 8009102:	81a3      	strhne	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__sclose>:
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 b80d 	b.w	8009128 <_close_r>

0800910e <memset>:
 800910e:	4402      	add	r2, r0
 8009110:	4603      	mov	r3, r0
 8009112:	4293      	cmp	r3, r2
 8009114:	d100      	bne.n	8009118 <memset+0xa>
 8009116:	4770      	bx	lr
 8009118:	f803 1b01 	strb.w	r1, [r3], #1
 800911c:	e7f9      	b.n	8009112 <memset+0x4>
	...

08009120 <_localeconv_r>:
 8009120:	4800      	ldr	r0, [pc, #0]	@ (8009124 <_localeconv_r+0x4>)
 8009122:	4770      	bx	lr
 8009124:	2000024c 	.word	0x2000024c

08009128 <_close_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d06      	ldr	r5, [pc, #24]	@ (8009144 <_close_r+0x1c>)
 800912c:	2300      	movs	r3, #0
 800912e:	4604      	mov	r4, r0
 8009130:	4608      	mov	r0, r1
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	f7f8 faa2 	bl	800167c <_close>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d102      	bne.n	8009142 <_close_r+0x1a>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	b103      	cbz	r3, 8009142 <_close_r+0x1a>
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	bd38      	pop	{r3, r4, r5, pc}
 8009144:	20000864 	.word	0x20000864

08009148 <_lseek_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4d07      	ldr	r5, [pc, #28]	@ (8009168 <_lseek_r+0x20>)
 800914c:	4604      	mov	r4, r0
 800914e:	4608      	mov	r0, r1
 8009150:	4611      	mov	r1, r2
 8009152:	2200      	movs	r2, #0
 8009154:	602a      	str	r2, [r5, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	f7f8 fab7 	bl	80016ca <_lseek>
 800915c:	1c43      	adds	r3, r0, #1
 800915e:	d102      	bne.n	8009166 <_lseek_r+0x1e>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	b103      	cbz	r3, 8009166 <_lseek_r+0x1e>
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	20000864 	.word	0x20000864

0800916c <_read_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	4d07      	ldr	r5, [pc, #28]	@ (800918c <_read_r+0x20>)
 8009170:	4604      	mov	r4, r0
 8009172:	4608      	mov	r0, r1
 8009174:	4611      	mov	r1, r2
 8009176:	2200      	movs	r2, #0
 8009178:	602a      	str	r2, [r5, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	f7f8 fa61 	bl	8001642 <_read>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_read_r+0x1e>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_read_r+0x1e>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000864 	.word	0x20000864

08009190 <_write_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d07      	ldr	r5, [pc, #28]	@ (80091b0 <_write_r+0x20>)
 8009194:	4604      	mov	r4, r0
 8009196:	4608      	mov	r0, r1
 8009198:	4611      	mov	r1, r2
 800919a:	2200      	movs	r2, #0
 800919c:	602a      	str	r2, [r5, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f7f8 f8e9 	bl	8001376 <_write>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_write_r+0x1e>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_write_r+0x1e>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20000864 	.word	0x20000864

080091b4 <__errno>:
 80091b4:	4b01      	ldr	r3, [pc, #4]	@ (80091bc <__errno+0x8>)
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	2000010c 	.word	0x2000010c

080091c0 <__libc_init_array>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	4d0d      	ldr	r5, [pc, #52]	@ (80091f8 <__libc_init_array+0x38>)
 80091c4:	4c0d      	ldr	r4, [pc, #52]	@ (80091fc <__libc_init_array+0x3c>)
 80091c6:	1b64      	subs	r4, r4, r5
 80091c8:	10a4      	asrs	r4, r4, #2
 80091ca:	2600      	movs	r6, #0
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	d109      	bne.n	80091e4 <__libc_init_array+0x24>
 80091d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009200 <__libc_init_array+0x40>)
 80091d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009204 <__libc_init_array+0x44>)
 80091d4:	f003 fb76 	bl	800c8c4 <_init>
 80091d8:	1b64      	subs	r4, r4, r5
 80091da:	10a4      	asrs	r4, r4, #2
 80091dc:	2600      	movs	r6, #0
 80091de:	42a6      	cmp	r6, r4
 80091e0:	d105      	bne.n	80091ee <__libc_init_array+0x2e>
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e8:	4798      	blx	r3
 80091ea:	3601      	adds	r6, #1
 80091ec:	e7ee      	b.n	80091cc <__libc_init_array+0xc>
 80091ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f2:	4798      	blx	r3
 80091f4:	3601      	adds	r6, #1
 80091f6:	e7f2      	b.n	80091de <__libc_init_array+0x1e>
 80091f8:	0800d004 	.word	0x0800d004
 80091fc:	0800d004 	.word	0x0800d004
 8009200:	0800d004 	.word	0x0800d004
 8009204:	0800d008 	.word	0x0800d008

08009208 <__retarget_lock_init_recursive>:
 8009208:	4770      	bx	lr

0800920a <__retarget_lock_acquire_recursive>:
 800920a:	4770      	bx	lr

0800920c <__retarget_lock_release_recursive>:
 800920c:	4770      	bx	lr

0800920e <memcpy>:
 800920e:	440a      	add	r2, r1
 8009210:	4291      	cmp	r1, r2
 8009212:	f100 33ff 	add.w	r3, r0, #4294967295
 8009216:	d100      	bne.n	800921a <memcpy+0xc>
 8009218:	4770      	bx	lr
 800921a:	b510      	push	{r4, lr}
 800921c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009224:	4291      	cmp	r1, r2
 8009226:	d1f9      	bne.n	800921c <memcpy+0xe>
 8009228:	bd10      	pop	{r4, pc}
	...

0800922c <nanf>:
 800922c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009234 <nanf+0x8>
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	7fc00000 	.word	0x7fc00000

08009238 <quorem>:
 8009238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	6903      	ldr	r3, [r0, #16]
 800923e:	690c      	ldr	r4, [r1, #16]
 8009240:	42a3      	cmp	r3, r4
 8009242:	4607      	mov	r7, r0
 8009244:	db7e      	blt.n	8009344 <quorem+0x10c>
 8009246:	3c01      	subs	r4, #1
 8009248:	f101 0814 	add.w	r8, r1, #20
 800924c:	00a3      	lsls	r3, r4, #2
 800924e:	f100 0514 	add.w	r5, r0, #20
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800925e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009262:	3301      	adds	r3, #1
 8009264:	429a      	cmp	r2, r3
 8009266:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800926a:	fbb2 f6f3 	udiv	r6, r2, r3
 800926e:	d32e      	bcc.n	80092ce <quorem+0x96>
 8009270:	f04f 0a00 	mov.w	sl, #0
 8009274:	46c4      	mov	ip, r8
 8009276:	46ae      	mov	lr, r5
 8009278:	46d3      	mov	fp, sl
 800927a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800927e:	b298      	uxth	r0, r3
 8009280:	fb06 a000 	mla	r0, r6, r0, sl
 8009284:	0c02      	lsrs	r2, r0, #16
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	fb06 2303 	mla	r3, r6, r3, r2
 800928c:	f8de 2000 	ldr.w	r2, [lr]
 8009290:	b280      	uxth	r0, r0
 8009292:	b292      	uxth	r2, r2
 8009294:	1a12      	subs	r2, r2, r0
 8009296:	445a      	add	r2, fp
 8009298:	f8de 0000 	ldr.w	r0, [lr]
 800929c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092aa:	b292      	uxth	r2, r2
 80092ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092b0:	45e1      	cmp	r9, ip
 80092b2:	f84e 2b04 	str.w	r2, [lr], #4
 80092b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092ba:	d2de      	bcs.n	800927a <quorem+0x42>
 80092bc:	9b00      	ldr	r3, [sp, #0]
 80092be:	58eb      	ldr	r3, [r5, r3]
 80092c0:	b92b      	cbnz	r3, 80092ce <quorem+0x96>
 80092c2:	9b01      	ldr	r3, [sp, #4]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	429d      	cmp	r5, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	d32f      	bcc.n	800932c <quorem+0xf4>
 80092cc:	613c      	str	r4, [r7, #16]
 80092ce:	4638      	mov	r0, r7
 80092d0:	f001 f9c6 	bl	800a660 <__mcmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	db25      	blt.n	8009324 <quorem+0xec>
 80092d8:	4629      	mov	r1, r5
 80092da:	2000      	movs	r0, #0
 80092dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80092e0:	f8d1 c000 	ldr.w	ip, [r1]
 80092e4:	fa1f fe82 	uxth.w	lr, r2
 80092e8:	fa1f f38c 	uxth.w	r3, ip
 80092ec:	eba3 030e 	sub.w	r3, r3, lr
 80092f0:	4403      	add	r3, r0
 80092f2:	0c12      	lsrs	r2, r2, #16
 80092f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009302:	45c1      	cmp	r9, r8
 8009304:	f841 3b04 	str.w	r3, [r1], #4
 8009308:	ea4f 4022 	mov.w	r0, r2, asr #16
 800930c:	d2e6      	bcs.n	80092dc <quorem+0xa4>
 800930e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009316:	b922      	cbnz	r2, 8009322 <quorem+0xea>
 8009318:	3b04      	subs	r3, #4
 800931a:	429d      	cmp	r5, r3
 800931c:	461a      	mov	r2, r3
 800931e:	d30b      	bcc.n	8009338 <quorem+0x100>
 8009320:	613c      	str	r4, [r7, #16]
 8009322:	3601      	adds	r6, #1
 8009324:	4630      	mov	r0, r6
 8009326:	b003      	add	sp, #12
 8009328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	3b04      	subs	r3, #4
 8009330:	2a00      	cmp	r2, #0
 8009332:	d1cb      	bne.n	80092cc <quorem+0x94>
 8009334:	3c01      	subs	r4, #1
 8009336:	e7c6      	b.n	80092c6 <quorem+0x8e>
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	3b04      	subs	r3, #4
 800933c:	2a00      	cmp	r2, #0
 800933e:	d1ef      	bne.n	8009320 <quorem+0xe8>
 8009340:	3c01      	subs	r4, #1
 8009342:	e7ea      	b.n	800931a <quorem+0xe2>
 8009344:	2000      	movs	r0, #0
 8009346:	e7ee      	b.n	8009326 <quorem+0xee>

08009348 <_dtoa_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	69c7      	ldr	r7, [r0, #28]
 800934e:	b097      	sub	sp, #92	@ 0x5c
 8009350:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800935a:	9107      	str	r1, [sp, #28]
 800935c:	4681      	mov	r9, r0
 800935e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009360:	9311      	str	r3, [sp, #68]	@ 0x44
 8009362:	b97f      	cbnz	r7, 8009384 <_dtoa_r+0x3c>
 8009364:	2010      	movs	r0, #16
 8009366:	f000 fe09 	bl	8009f7c <malloc>
 800936a:	4602      	mov	r2, r0
 800936c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009370:	b920      	cbnz	r0, 800937c <_dtoa_r+0x34>
 8009372:	4ba9      	ldr	r3, [pc, #676]	@ (8009618 <_dtoa_r+0x2d0>)
 8009374:	21ef      	movs	r1, #239	@ 0xef
 8009376:	48a9      	ldr	r0, [pc, #676]	@ (800961c <_dtoa_r+0x2d4>)
 8009378:	f002 fc2e 	bl	800bbd8 <__assert_func>
 800937c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009380:	6007      	str	r7, [r0, #0]
 8009382:	60c7      	str	r7, [r0, #12]
 8009384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	b159      	cbz	r1, 80093a4 <_dtoa_r+0x5c>
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	604a      	str	r2, [r1, #4]
 8009390:	2301      	movs	r3, #1
 8009392:	4093      	lsls	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
 8009396:	4648      	mov	r0, r9
 8009398:	f000 fee6 	bl	800a168 <_Bfree>
 800939c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	1e2b      	subs	r3, r5, #0
 80093a6:	bfb9      	ittee	lt
 80093a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ac:	9305      	strlt	r3, [sp, #20]
 80093ae:	2300      	movge	r3, #0
 80093b0:	6033      	strge	r3, [r6, #0]
 80093b2:	9f05      	ldr	r7, [sp, #20]
 80093b4:	4b9a      	ldr	r3, [pc, #616]	@ (8009620 <_dtoa_r+0x2d8>)
 80093b6:	bfbc      	itt	lt
 80093b8:	2201      	movlt	r2, #1
 80093ba:	6032      	strlt	r2, [r6, #0]
 80093bc:	43bb      	bics	r3, r7
 80093be:	d112      	bne.n	80093e6 <_dtoa_r+0x9e>
 80093c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093cc:	4323      	orrs	r3, r4
 80093ce:	f000 855a 	beq.w	8009e86 <_dtoa_r+0xb3e>
 80093d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009634 <_dtoa_r+0x2ec>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 855c 	beq.w	8009e96 <_dtoa_r+0xb4e>
 80093de:	f10a 0303 	add.w	r3, sl, #3
 80093e2:	f000 bd56 	b.w	8009e92 <_dtoa_r+0xb4a>
 80093e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093ea:	2200      	movs	r2, #0
 80093ec:	ec51 0b17 	vmov	r0, r1, d7
 80093f0:	2300      	movs	r3, #0
 80093f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80093f6:	f7f7 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80093fa:	4680      	mov	r8, r0
 80093fc:	b158      	cbz	r0, 8009416 <_dtoa_r+0xce>
 80093fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009400:	2301      	movs	r3, #1
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009406:	b113      	cbz	r3, 800940e <_dtoa_r+0xc6>
 8009408:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800940a:	4b86      	ldr	r3, [pc, #536]	@ (8009624 <_dtoa_r+0x2dc>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009638 <_dtoa_r+0x2f0>
 8009412:	f000 bd40 	b.w	8009e96 <_dtoa_r+0xb4e>
 8009416:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800941a:	aa14      	add	r2, sp, #80	@ 0x50
 800941c:	a915      	add	r1, sp, #84	@ 0x54
 800941e:	4648      	mov	r0, r9
 8009420:	f001 fa3e 	bl	800a8a0 <__d2b>
 8009424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	2e00      	cmp	r6, #0
 800942c:	d078      	beq.n	8009520 <_dtoa_r+0x1d8>
 800942e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009430:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800943c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009448:	4619      	mov	r1, r3
 800944a:	2200      	movs	r2, #0
 800944c:	4b76      	ldr	r3, [pc, #472]	@ (8009628 <_dtoa_r+0x2e0>)
 800944e:	f7f6 ff23 	bl	8000298 <__aeabi_dsub>
 8009452:	a36b      	add	r3, pc, #428	@ (adr r3, 8009600 <_dtoa_r+0x2b8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009608 <_dtoa_r+0x2c0>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff1b 	bl	800029c <__adddf3>
 8009466:	4604      	mov	r4, r0
 8009468:	4630      	mov	r0, r6
 800946a:	460d      	mov	r5, r1
 800946c:	f7f7 f862 	bl	8000534 <__aeabi_i2d>
 8009470:	a367      	add	r3, pc, #412	@ (adr r3, 8009610 <_dtoa_r+0x2c8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f8c7 	bl	8000608 <__aeabi_dmul>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f6 ff0b 	bl	800029c <__adddf3>
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	f7f7 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800948e:	2200      	movs	r2, #0
 8009490:	4607      	mov	r7, r0
 8009492:	2300      	movs	r3, #0
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f7 fb28 	bl	8000aec <__aeabi_dcmplt>
 800949c:	b140      	cbz	r0, 80094b0 <_dtoa_r+0x168>
 800949e:	4638      	mov	r0, r7
 80094a0:	f7f7 f848 	bl	8000534 <__aeabi_i2d>
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	f7f7 fb16 	bl	8000ad8 <__aeabi_dcmpeq>
 80094ac:	b900      	cbnz	r0, 80094b0 <_dtoa_r+0x168>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	2f16      	cmp	r7, #22
 80094b2:	d852      	bhi.n	800955a <_dtoa_r+0x212>
 80094b4:	4b5d      	ldr	r3, [pc, #372]	@ (800962c <_dtoa_r+0x2e4>)
 80094b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094c2:	f7f7 fb13 	bl	8000aec <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d049      	beq.n	800955e <_dtoa_r+0x216>
 80094ca:	3f01      	subs	r7, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80094d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094d2:	1b9b      	subs	r3, r3, r6
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	bf45      	ittet	mi
 80094d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80094dc:	9300      	strmi	r3, [sp, #0]
 80094de:	2300      	movpl	r3, #0
 80094e0:	2300      	movmi	r3, #0
 80094e2:	9206      	str	r2, [sp, #24]
 80094e4:	bf54      	ite	pl
 80094e6:	9300      	strpl	r3, [sp, #0]
 80094e8:	9306      	strmi	r3, [sp, #24]
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	db39      	blt.n	8009562 <_dtoa_r+0x21a>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80094f2:	443b      	add	r3, r7
 80094f4:	9306      	str	r3, [sp, #24]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	2b09      	cmp	r3, #9
 80094fe:	d863      	bhi.n	80095c8 <_dtoa_r+0x280>
 8009500:	2b05      	cmp	r3, #5
 8009502:	bfc4      	itt	gt
 8009504:	3b04      	subgt	r3, #4
 8009506:	9307      	strgt	r3, [sp, #28]
 8009508:	9b07      	ldr	r3, [sp, #28]
 800950a:	f1a3 0302 	sub.w	r3, r3, #2
 800950e:	bfcc      	ite	gt
 8009510:	2400      	movgt	r4, #0
 8009512:	2401      	movle	r4, #1
 8009514:	2b03      	cmp	r3, #3
 8009516:	d863      	bhi.n	80095e0 <_dtoa_r+0x298>
 8009518:	e8df f003 	tbb	[pc, r3]
 800951c:	2b375452 	.word	0x2b375452
 8009520:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009524:	441e      	add	r6, r3
 8009526:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800952a:	2b20      	cmp	r3, #32
 800952c:	bfc1      	itttt	gt
 800952e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009532:	409f      	lslgt	r7, r3
 8009534:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009538:	fa24 f303 	lsrgt.w	r3, r4, r3
 800953c:	bfd6      	itet	le
 800953e:	f1c3 0320 	rsble	r3, r3, #32
 8009542:	ea47 0003 	orrgt.w	r0, r7, r3
 8009546:	fa04 f003 	lslle.w	r0, r4, r3
 800954a:	f7f6 ffe3 	bl	8000514 <__aeabi_ui2d>
 800954e:	2201      	movs	r2, #1
 8009550:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009554:	3e01      	subs	r6, #1
 8009556:	9212      	str	r2, [sp, #72]	@ 0x48
 8009558:	e776      	b.n	8009448 <_dtoa_r+0x100>
 800955a:	2301      	movs	r3, #1
 800955c:	e7b7      	b.n	80094ce <_dtoa_r+0x186>
 800955e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009560:	e7b6      	b.n	80094d0 <_dtoa_r+0x188>
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	1bdb      	subs	r3, r3, r7
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	427b      	negs	r3, r7
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	2300      	movs	r3, #0
 800956e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009570:	e7c3      	b.n	80094fa <_dtoa_r+0x1b2>
 8009572:	2301      	movs	r3, #1
 8009574:	9309      	str	r3, [sp, #36]	@ 0x24
 8009576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009578:	eb07 0b03 	add.w	fp, r7, r3
 800957c:	f10b 0301 	add.w	r3, fp, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	9303      	str	r3, [sp, #12]
 8009584:	bfb8      	it	lt
 8009586:	2301      	movlt	r3, #1
 8009588:	e006      	b.n	8009598 <_dtoa_r+0x250>
 800958a:	2301      	movs	r3, #1
 800958c:	9309      	str	r3, [sp, #36]	@ 0x24
 800958e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009590:	2b00      	cmp	r3, #0
 8009592:	dd28      	ble.n	80095e6 <_dtoa_r+0x29e>
 8009594:	469b      	mov	fp, r3
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800959c:	2100      	movs	r1, #0
 800959e:	2204      	movs	r2, #4
 80095a0:	f102 0514 	add.w	r5, r2, #20
 80095a4:	429d      	cmp	r5, r3
 80095a6:	d926      	bls.n	80095f6 <_dtoa_r+0x2ae>
 80095a8:	6041      	str	r1, [r0, #4]
 80095aa:	4648      	mov	r0, r9
 80095ac:	f000 fd9c 	bl	800a0e8 <_Balloc>
 80095b0:	4682      	mov	sl, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d142      	bne.n	800963c <_dtoa_r+0x2f4>
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <_dtoa_r+0x2e8>)
 80095b8:	4602      	mov	r2, r0
 80095ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80095be:	e6da      	b.n	8009376 <_dtoa_r+0x2e>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e7e3      	b.n	800958c <_dtoa_r+0x244>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e7d5      	b.n	8009574 <_dtoa_r+0x22c>
 80095c8:	2401      	movs	r4, #1
 80095ca:	2300      	movs	r3, #0
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80095d0:	f04f 3bff 	mov.w	fp, #4294967295
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80095da:	2312      	movs	r3, #18
 80095dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80095de:	e7db      	b.n	8009598 <_dtoa_r+0x250>
 80095e0:	2301      	movs	r3, #1
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x288>
 80095e6:	f04f 0b01 	mov.w	fp, #1
 80095ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80095ee:	465b      	mov	r3, fp
 80095f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80095f4:	e7d0      	b.n	8009598 <_dtoa_r+0x250>
 80095f6:	3101      	adds	r1, #1
 80095f8:	0052      	lsls	r2, r2, #1
 80095fa:	e7d1      	b.n	80095a0 <_dtoa_r+0x258>
 80095fc:	f3af 8000 	nop.w
 8009600:	636f4361 	.word	0x636f4361
 8009604:	3fd287a7 	.word	0x3fd287a7
 8009608:	8b60c8b3 	.word	0x8b60c8b3
 800960c:	3fc68a28 	.word	0x3fc68a28
 8009610:	509f79fb 	.word	0x509f79fb
 8009614:	3fd34413 	.word	0x3fd34413
 8009618:	0800cc16 	.word	0x0800cc16
 800961c:	0800cc2d 	.word	0x0800cc2d
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	0800cbe1 	.word	0x0800cbe1
 8009628:	3ff80000 	.word	0x3ff80000
 800962c:	0800cde0 	.word	0x0800cde0
 8009630:	0800cc85 	.word	0x0800cc85
 8009634:	0800cc12 	.word	0x0800cc12
 8009638:	0800cbe0 	.word	0x0800cbe0
 800963c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009640:	6018      	str	r0, [r3, #0]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	2b0e      	cmp	r3, #14
 8009646:	f200 80a1 	bhi.w	800978c <_dtoa_r+0x444>
 800964a:	2c00      	cmp	r4, #0
 800964c:	f000 809e 	beq.w	800978c <_dtoa_r+0x444>
 8009650:	2f00      	cmp	r7, #0
 8009652:	dd33      	ble.n	80096bc <_dtoa_r+0x374>
 8009654:	4b9c      	ldr	r3, [pc, #624]	@ (80098c8 <_dtoa_r+0x580>)
 8009656:	f007 020f 	and.w	r2, r7, #15
 800965a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800965e:	ed93 7b00 	vldr	d7, [r3]
 8009662:	05f8      	lsls	r0, r7, #23
 8009664:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800966c:	d516      	bpl.n	800969c <_dtoa_r+0x354>
 800966e:	4b97      	ldr	r3, [pc, #604]	@ (80098cc <_dtoa_r+0x584>)
 8009670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009678:	f7f7 f8f0 	bl	800085c <__aeabi_ddiv>
 800967c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009680:	f004 040f 	and.w	r4, r4, #15
 8009684:	2603      	movs	r6, #3
 8009686:	4d91      	ldr	r5, [pc, #580]	@ (80098cc <_dtoa_r+0x584>)
 8009688:	b954      	cbnz	r4, 80096a0 <_dtoa_r+0x358>
 800968a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800968e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009692:	f7f7 f8e3 	bl	800085c <__aeabi_ddiv>
 8009696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969a:	e028      	b.n	80096ee <_dtoa_r+0x3a6>
 800969c:	2602      	movs	r6, #2
 800969e:	e7f2      	b.n	8009686 <_dtoa_r+0x33e>
 80096a0:	07e1      	lsls	r1, r4, #31
 80096a2:	d508      	bpl.n	80096b6 <_dtoa_r+0x36e>
 80096a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096ac:	f7f6 ffac 	bl	8000608 <__aeabi_dmul>
 80096b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096b4:	3601      	adds	r6, #1
 80096b6:	1064      	asrs	r4, r4, #1
 80096b8:	3508      	adds	r5, #8
 80096ba:	e7e5      	b.n	8009688 <_dtoa_r+0x340>
 80096bc:	f000 80af 	beq.w	800981e <_dtoa_r+0x4d6>
 80096c0:	427c      	negs	r4, r7
 80096c2:	4b81      	ldr	r3, [pc, #516]	@ (80098c8 <_dtoa_r+0x580>)
 80096c4:	4d81      	ldr	r5, [pc, #516]	@ (80098cc <_dtoa_r+0x584>)
 80096c6:	f004 020f 	and.w	r2, r4, #15
 80096ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096d6:	f7f6 ff97 	bl	8000608 <__aeabi_dmul>
 80096da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096de:	1124      	asrs	r4, r4, #4
 80096e0:	2300      	movs	r3, #0
 80096e2:	2602      	movs	r6, #2
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	f040 808f 	bne.w	8009808 <_dtoa_r+0x4c0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1d3      	bne.n	8009696 <_dtoa_r+0x34e>
 80096ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8094 	beq.w	8009822 <_dtoa_r+0x4da>
 80096fa:	4b75      	ldr	r3, [pc, #468]	@ (80098d0 <_dtoa_r+0x588>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 f9f3 	bl	8000aec <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	f000 808b 	beq.w	8009822 <_dtoa_r+0x4da>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8087 	beq.w	8009822 <_dtoa_r+0x4da>
 8009714:	f1bb 0f00 	cmp.w	fp, #0
 8009718:	dd34      	ble.n	8009784 <_dtoa_r+0x43c>
 800971a:	4620      	mov	r0, r4
 800971c:	4b6d      	ldr	r3, [pc, #436]	@ (80098d4 <_dtoa_r+0x58c>)
 800971e:	2200      	movs	r2, #0
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 ff71 	bl	8000608 <__aeabi_dmul>
 8009726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972a:	f107 38ff 	add.w	r8, r7, #4294967295
 800972e:	3601      	adds	r6, #1
 8009730:	465c      	mov	r4, fp
 8009732:	4630      	mov	r0, r6
 8009734:	f7f6 fefe 	bl	8000534 <__aeabi_i2d>
 8009738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800973c:	f7f6 ff64 	bl	8000608 <__aeabi_dmul>
 8009740:	4b65      	ldr	r3, [pc, #404]	@ (80098d8 <_dtoa_r+0x590>)
 8009742:	2200      	movs	r2, #0
 8009744:	f7f6 fdaa 	bl	800029c <__adddf3>
 8009748:	4605      	mov	r5, r0
 800974a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800974e:	2c00      	cmp	r4, #0
 8009750:	d16a      	bne.n	8009828 <_dtoa_r+0x4e0>
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	4b61      	ldr	r3, [pc, #388]	@ (80098dc <_dtoa_r+0x594>)
 8009758:	2200      	movs	r2, #0
 800975a:	f7f6 fd9d 	bl	8000298 <__aeabi_dsub>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009766:	462a      	mov	r2, r5
 8009768:	4633      	mov	r3, r6
 800976a:	f7f7 f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800976e:	2800      	cmp	r0, #0
 8009770:	f040 8298 	bne.w	8009ca4 <_dtoa_r+0x95c>
 8009774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009778:	462a      	mov	r2, r5
 800977a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800977e:	f7f7 f9b5 	bl	8000aec <__aeabi_dcmplt>
 8009782:	bb38      	cbnz	r0, 80097d4 <_dtoa_r+0x48c>
 8009784:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800978c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800978e:	2b00      	cmp	r3, #0
 8009790:	f2c0 8157 	blt.w	8009a42 <_dtoa_r+0x6fa>
 8009794:	2f0e      	cmp	r7, #14
 8009796:	f300 8154 	bgt.w	8009a42 <_dtoa_r+0x6fa>
 800979a:	4b4b      	ldr	r3, [pc, #300]	@ (80098c8 <_dtoa_r+0x580>)
 800979c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097a0:	ed93 7b00 	vldr	d7, [r3]
 80097a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	ed8d 7b00 	vstr	d7, [sp]
 80097ac:	f280 80e5 	bge.w	800997a <_dtoa_r+0x632>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f300 80e1 	bgt.w	800997a <_dtoa_r+0x632>
 80097b8:	d10c      	bne.n	80097d4 <_dtoa_r+0x48c>
 80097ba:	4b48      	ldr	r3, [pc, #288]	@ (80098dc <_dtoa_r+0x594>)
 80097bc:	2200      	movs	r2, #0
 80097be:	ec51 0b17 	vmov	r0, r1, d7
 80097c2:	f7f6 ff21 	bl	8000608 <__aeabi_dmul>
 80097c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ca:	f7f7 f9a3 	bl	8000b14 <__aeabi_dcmpge>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 8266 	beq.w	8009ca0 <_dtoa_r+0x958>
 80097d4:	2400      	movs	r4, #0
 80097d6:	4625      	mov	r5, r4
 80097d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097da:	4656      	mov	r6, sl
 80097dc:	ea6f 0803 	mvn.w	r8, r3
 80097e0:	2700      	movs	r7, #0
 80097e2:	4621      	mov	r1, r4
 80097e4:	4648      	mov	r0, r9
 80097e6:	f000 fcbf 	bl	800a168 <_Bfree>
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	f000 80bd 	beq.w	800996a <_dtoa_r+0x622>
 80097f0:	b12f      	cbz	r7, 80097fe <_dtoa_r+0x4b6>
 80097f2:	42af      	cmp	r7, r5
 80097f4:	d003      	beq.n	80097fe <_dtoa_r+0x4b6>
 80097f6:	4639      	mov	r1, r7
 80097f8:	4648      	mov	r0, r9
 80097fa:	f000 fcb5 	bl	800a168 <_Bfree>
 80097fe:	4629      	mov	r1, r5
 8009800:	4648      	mov	r0, r9
 8009802:	f000 fcb1 	bl	800a168 <_Bfree>
 8009806:	e0b0      	b.n	800996a <_dtoa_r+0x622>
 8009808:	07e2      	lsls	r2, r4, #31
 800980a:	d505      	bpl.n	8009818 <_dtoa_r+0x4d0>
 800980c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009810:	f7f6 fefa 	bl	8000608 <__aeabi_dmul>
 8009814:	3601      	adds	r6, #1
 8009816:	2301      	movs	r3, #1
 8009818:	1064      	asrs	r4, r4, #1
 800981a:	3508      	adds	r5, #8
 800981c:	e762      	b.n	80096e4 <_dtoa_r+0x39c>
 800981e:	2602      	movs	r6, #2
 8009820:	e765      	b.n	80096ee <_dtoa_r+0x3a6>
 8009822:	9c03      	ldr	r4, [sp, #12]
 8009824:	46b8      	mov	r8, r7
 8009826:	e784      	b.n	8009732 <_dtoa_r+0x3ea>
 8009828:	4b27      	ldr	r3, [pc, #156]	@ (80098c8 <_dtoa_r+0x580>)
 800982a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800982c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009834:	4454      	add	r4, sl
 8009836:	2900      	cmp	r1, #0
 8009838:	d054      	beq.n	80098e4 <_dtoa_r+0x59c>
 800983a:	4929      	ldr	r1, [pc, #164]	@ (80098e0 <_dtoa_r+0x598>)
 800983c:	2000      	movs	r0, #0
 800983e:	f7f7 f80d 	bl	800085c <__aeabi_ddiv>
 8009842:	4633      	mov	r3, r6
 8009844:	462a      	mov	r2, r5
 8009846:	f7f6 fd27 	bl	8000298 <__aeabi_dsub>
 800984a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800984e:	4656      	mov	r6, sl
 8009850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009854:	f7f7 f988 	bl	8000b68 <__aeabi_d2iz>
 8009858:	4605      	mov	r5, r0
 800985a:	f7f6 fe6b 	bl	8000534 <__aeabi_i2d>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009866:	f7f6 fd17 	bl	8000298 <__aeabi_dsub>
 800986a:	3530      	adds	r5, #48	@ 0x30
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009874:	f806 5b01 	strb.w	r5, [r6], #1
 8009878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800987c:	f7f7 f936 	bl	8000aec <__aeabi_dcmplt>
 8009880:	2800      	cmp	r0, #0
 8009882:	d172      	bne.n	800996a <_dtoa_r+0x622>
 8009884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009888:	4911      	ldr	r1, [pc, #68]	@ (80098d0 <_dtoa_r+0x588>)
 800988a:	2000      	movs	r0, #0
 800988c:	f7f6 fd04 	bl	8000298 <__aeabi_dsub>
 8009890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009894:	f7f7 f92a 	bl	8000aec <__aeabi_dcmplt>
 8009898:	2800      	cmp	r0, #0
 800989a:	f040 80b4 	bne.w	8009a06 <_dtoa_r+0x6be>
 800989e:	42a6      	cmp	r6, r4
 80098a0:	f43f af70 	beq.w	8009784 <_dtoa_r+0x43c>
 80098a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098a8:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <_dtoa_r+0x58c>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 feac 	bl	8000608 <__aeabi_dmul>
 80098b0:	4b08      	ldr	r3, [pc, #32]	@ (80098d4 <_dtoa_r+0x58c>)
 80098b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098b6:	2200      	movs	r2, #0
 80098b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098bc:	f7f6 fea4 	bl	8000608 <__aeabi_dmul>
 80098c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098c4:	e7c4      	b.n	8009850 <_dtoa_r+0x508>
 80098c6:	bf00      	nop
 80098c8:	0800cde0 	.word	0x0800cde0
 80098cc:	0800cdb8 	.word	0x0800cdb8
 80098d0:	3ff00000 	.word	0x3ff00000
 80098d4:	40240000 	.word	0x40240000
 80098d8:	401c0000 	.word	0x401c0000
 80098dc:	40140000 	.word	0x40140000
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7f6 fe8e 	bl	8000608 <__aeabi_dmul>
 80098ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80098f2:	4656      	mov	r6, sl
 80098f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f8:	f7f7 f936 	bl	8000b68 <__aeabi_d2iz>
 80098fc:	4605      	mov	r5, r0
 80098fe:	f7f6 fe19 	bl	8000534 <__aeabi_i2d>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800990a:	f7f6 fcc5 	bl	8000298 <__aeabi_dsub>
 800990e:	3530      	adds	r5, #48	@ 0x30
 8009910:	f806 5b01 	strb.w	r5, [r6], #1
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	42a6      	cmp	r6, r4
 800991a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	d124      	bne.n	800996e <_dtoa_r+0x626>
 8009924:	4baf      	ldr	r3, [pc, #700]	@ (8009be4 <_dtoa_r+0x89c>)
 8009926:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800992a:	f7f6 fcb7 	bl	800029c <__adddf3>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009936:	f7f7 f8f7 	bl	8000b28 <__aeabi_dcmpgt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d163      	bne.n	8009a06 <_dtoa_r+0x6be>
 800993e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009942:	49a8      	ldr	r1, [pc, #672]	@ (8009be4 <_dtoa_r+0x89c>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009952:	f7f7 f8cb 	bl	8000aec <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f af14 	beq.w	8009784 <_dtoa_r+0x43c>
 800995c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800995e:	1e73      	subs	r3, r6, #1
 8009960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009962:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009966:	2b30      	cmp	r3, #48	@ 0x30
 8009968:	d0f8      	beq.n	800995c <_dtoa_r+0x614>
 800996a:	4647      	mov	r7, r8
 800996c:	e03b      	b.n	80099e6 <_dtoa_r+0x69e>
 800996e:	4b9e      	ldr	r3, [pc, #632]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009970:	f7f6 fe4a 	bl	8000608 <__aeabi_dmul>
 8009974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009978:	e7bc      	b.n	80098f4 <_dtoa_r+0x5ac>
 800997a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800997e:	4656      	mov	r6, sl
 8009980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 ff68 	bl	800085c <__aeabi_ddiv>
 800998c:	f7f7 f8ec 	bl	8000b68 <__aeabi_d2iz>
 8009990:	4680      	mov	r8, r0
 8009992:	f7f6 fdcf 	bl	8000534 <__aeabi_i2d>
 8009996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800999a:	f7f6 fe35 	bl	8000608 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099aa:	f7f6 fc75 	bl	8000298 <__aeabi_dsub>
 80099ae:	f806 4b01 	strb.w	r4, [r6], #1
 80099b2:	9d03      	ldr	r5, [sp, #12]
 80099b4:	eba6 040a 	sub.w	r4, r6, sl
 80099b8:	42a5      	cmp	r5, r4
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	d133      	bne.n	8009a28 <_dtoa_r+0x6e0>
 80099c0:	f7f6 fc6c 	bl	800029c <__adddf3>
 80099c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	f7f7 f8ac 	bl	8000b28 <__aeabi_dcmpgt>
 80099d0:	b9c0      	cbnz	r0, 8009a04 <_dtoa_r+0x6bc>
 80099d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f7 f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 80099de:	b110      	cbz	r0, 80099e6 <_dtoa_r+0x69e>
 80099e0:	f018 0f01 	tst.w	r8, #1
 80099e4:	d10e      	bne.n	8009a04 <_dtoa_r+0x6bc>
 80099e6:	9902      	ldr	r1, [sp, #8]
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 fbbd 	bl	800a168 <_Bfree>
 80099ee:	2300      	movs	r3, #0
 80099f0:	7033      	strb	r3, [r6, #0]
 80099f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099f4:	3701      	adds	r7, #1
 80099f6:	601f      	str	r7, [r3, #0]
 80099f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 824b 	beq.w	8009e96 <_dtoa_r+0xb4e>
 8009a00:	601e      	str	r6, [r3, #0]
 8009a02:	e248      	b.n	8009e96 <_dtoa_r+0xb4e>
 8009a04:	46b8      	mov	r8, r7
 8009a06:	4633      	mov	r3, r6
 8009a08:	461e      	mov	r6, r3
 8009a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0e:	2a39      	cmp	r2, #57	@ 0x39
 8009a10:	d106      	bne.n	8009a20 <_dtoa_r+0x6d8>
 8009a12:	459a      	cmp	sl, r3
 8009a14:	d1f8      	bne.n	8009a08 <_dtoa_r+0x6c0>
 8009a16:	2230      	movs	r2, #48	@ 0x30
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	f88a 2000 	strb.w	r2, [sl]
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	3201      	adds	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e7a0      	b.n	800996a <_dtoa_r+0x622>
 8009a28:	4b6f      	ldr	r3, [pc, #444]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fdec 	bl	8000608 <__aeabi_dmul>
 8009a30:	2200      	movs	r2, #0
 8009a32:	2300      	movs	r3, #0
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	f7f7 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d09f      	beq.n	8009980 <_dtoa_r+0x638>
 8009a40:	e7d1      	b.n	80099e6 <_dtoa_r+0x69e>
 8009a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	f000 80ea 	beq.w	8009c1e <_dtoa_r+0x8d6>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	2a01      	cmp	r2, #1
 8009a4e:	f300 80cd 	bgt.w	8009bec <_dtoa_r+0x8a4>
 8009a52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	f000 80c1 	beq.w	8009bdc <_dtoa_r+0x894>
 8009a5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a5e:	9c08      	ldr	r4, [sp, #32]
 8009a60:	9e00      	ldr	r6, [sp, #0]
 8009a62:	9a00      	ldr	r2, [sp, #0]
 8009a64:	441a      	add	r2, r3
 8009a66:	9200      	str	r2, [sp, #0]
 8009a68:	9a06      	ldr	r2, [sp, #24]
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	441a      	add	r2, r3
 8009a6e:	4648      	mov	r0, r9
 8009a70:	9206      	str	r2, [sp, #24]
 8009a72:	f000 fc77 	bl	800a364 <__i2b>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b166      	cbz	r6, 8009a94 <_dtoa_r+0x74c>
 8009a7a:	9b06      	ldr	r3, [sp, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd09      	ble.n	8009a94 <_dtoa_r+0x74c>
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	9a00      	ldr	r2, [sp, #0]
 8009a84:	bfa8      	it	ge
 8009a86:	4633      	movge	r3, r6
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	1af6      	subs	r6, r6, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	9306      	str	r3, [sp, #24]
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	b30b      	cbz	r3, 8009adc <_dtoa_r+0x794>
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 80c6 	beq.w	8009c2c <_dtoa_r+0x8e4>
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	f000 80c0 	beq.w	8009c26 <_dtoa_r+0x8de>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fd12 	bl	800a4d4 <__pow5mult>
 8009ab0:	9a02      	ldr	r2, [sp, #8]
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fc6a 	bl	800a390 <__multiply>
 8009abc:	9902      	ldr	r1, [sp, #8]
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fb51 	bl	800a168 <_Bfree>
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	1b1b      	subs	r3, r3, r4
 8009aca:	9308      	str	r3, [sp, #32]
 8009acc:	f000 80b1 	beq.w	8009c32 <_dtoa_r+0x8ea>
 8009ad0:	9a08      	ldr	r2, [sp, #32]
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f000 fcfd 	bl	800a4d4 <__pow5mult>
 8009ada:	9002      	str	r0, [sp, #8]
 8009adc:	2101      	movs	r1, #1
 8009ade:	4648      	mov	r0, r9
 8009ae0:	f000 fc40 	bl	800a364 <__i2b>
 8009ae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 81d8 	beq.w	8009e9e <_dtoa_r+0xb56>
 8009aee:	461a      	mov	r2, r3
 8009af0:	4601      	mov	r1, r0
 8009af2:	4648      	mov	r0, r9
 8009af4:	f000 fcee 	bl	800a4d4 <__pow5mult>
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	f300 809f 	bgt.w	8009c40 <_dtoa_r+0x8f8>
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 8097 	bne.w	8009c38 <_dtoa_r+0x8f0>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8093 	bne.w	8009c3c <_dtoa_r+0x8f4>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b1c:	0d1b      	lsrs	r3, r3, #20
 8009b1e:	051b      	lsls	r3, r3, #20
 8009b20:	b133      	cbz	r3, 8009b30 <_dtoa_r+0x7e8>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 81b8 	beq.w	8009eaa <_dtoa_r+0xb62>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b40:	6918      	ldr	r0, [r3, #16]
 8009b42:	f000 fbc3 	bl	800a2cc <__hi0bits>
 8009b46:	f1c0 0020 	rsb	r0, r0, #32
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	4418      	add	r0, r3
 8009b4e:	f010 001f 	ands.w	r0, r0, #31
 8009b52:	f000 8082 	beq.w	8009c5a <_dtoa_r+0x912>
 8009b56:	f1c0 0320 	rsb	r3, r0, #32
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	dd73      	ble.n	8009c46 <_dtoa_r+0x8fe>
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	f1c0 001c 	rsb	r0, r0, #28
 8009b64:	4403      	add	r3, r0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	4403      	add	r3, r0
 8009b6c:	4406      	add	r6, r0
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd05      	ble.n	8009b82 <_dtoa_r+0x83a>
 8009b76:	9902      	ldr	r1, [sp, #8]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	f000 fd04 	bl	800a588 <__lshift>
 8009b80:	9002      	str	r0, [sp, #8]
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd05      	ble.n	8009b94 <_dtoa_r+0x84c>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 fcfb 	bl	800a588 <__lshift>
 8009b92:	4604      	mov	r4, r0
 8009b94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d061      	beq.n	8009c5e <_dtoa_r+0x916>
 8009b9a:	9802      	ldr	r0, [sp, #8]
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f000 fd5f 	bl	800a660 <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	da5b      	bge.n	8009c5e <_dtoa_r+0x916>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9902      	ldr	r1, [sp, #8]
 8009baa:	220a      	movs	r2, #10
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fafd 	bl	800a1ac <__multadd>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	9002      	str	r0, [sp, #8]
 8009bb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8177 	beq.w	8009eae <_dtoa_r+0xb66>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	f000 faf0 	bl	800a1ac <__multadd>
 8009bcc:	f1bb 0f00 	cmp.w	fp, #0
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	dc6f      	bgt.n	8009cb4 <_dtoa_r+0x96c>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	dc49      	bgt.n	8009c6e <_dtoa_r+0x926>
 8009bda:	e06b      	b.n	8009cb4 <_dtoa_r+0x96c>
 8009bdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009be2:	e73c      	b.n	8009a5e <_dtoa_r+0x716>
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	40240000 	.word	0x40240000
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1e5c      	subs	r4, r3, #1
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db09      	blt.n	8009c0a <_dtoa_r+0x8c2>
 8009bf6:	1b1c      	subs	r4, r3, r4
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f6bf af30 	bge.w	8009a60 <_dtoa_r+0x718>
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	9a03      	ldr	r2, [sp, #12]
 8009c04:	1a9e      	subs	r6, r3, r2
 8009c06:	2300      	movs	r3, #0
 8009c08:	e72b      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c0e:	9408      	str	r4, [sp, #32]
 8009c10:	1ae3      	subs	r3, r4, r3
 8009c12:	441a      	add	r2, r3
 8009c14:	9e00      	ldr	r6, [sp, #0]
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	e721      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c1e:	9c08      	ldr	r4, [sp, #32]
 8009c20:	9e00      	ldr	r6, [sp, #0]
 8009c22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c24:	e728      	b.n	8009a78 <_dtoa_r+0x730>
 8009c26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c2a:	e751      	b.n	8009ad0 <_dtoa_r+0x788>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	9902      	ldr	r1, [sp, #8]
 8009c30:	e750      	b.n	8009ad4 <_dtoa_r+0x78c>
 8009c32:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c36:	e751      	b.n	8009adc <_dtoa_r+0x794>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e779      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	e777      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	e779      	b.n	8009b3a <_dtoa_r+0x7f2>
 8009c46:	d093      	beq.n	8009b70 <_dtoa_r+0x828>
 8009c48:	9a00      	ldr	r2, [sp, #0]
 8009c4a:	331c      	adds	r3, #28
 8009c4c:	441a      	add	r2, r3
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	441a      	add	r2, r3
 8009c54:	441e      	add	r6, r3
 8009c56:	9206      	str	r2, [sp, #24]
 8009c58:	e78a      	b.n	8009b70 <_dtoa_r+0x828>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e7f4      	b.n	8009c48 <_dtoa_r+0x900>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	46b8      	mov	r8, r7
 8009c64:	dc20      	bgt.n	8009ca8 <_dtoa_r+0x960>
 8009c66:	469b      	mov	fp, r3
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	dd1e      	ble.n	8009cac <_dtoa_r+0x964>
 8009c6e:	f1bb 0f00 	cmp.w	fp, #0
 8009c72:	f47f adb1 	bne.w	80097d8 <_dtoa_r+0x490>
 8009c76:	4621      	mov	r1, r4
 8009c78:	465b      	mov	r3, fp
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f000 fa95 	bl	800a1ac <__multadd>
 8009c82:	4601      	mov	r1, r0
 8009c84:	4604      	mov	r4, r0
 8009c86:	9802      	ldr	r0, [sp, #8]
 8009c88:	f000 fcea 	bl	800a660 <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f77f ada3 	ble.w	80097d8 <_dtoa_r+0x490>
 8009c92:	4656      	mov	r6, sl
 8009c94:	2331      	movs	r3, #49	@ 0x31
 8009c96:	f806 3b01 	strb.w	r3, [r6], #1
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e59f      	b.n	80097e0 <_dtoa_r+0x498>
 8009ca0:	9c03      	ldr	r4, [sp, #12]
 8009ca2:	46b8      	mov	r8, r7
 8009ca4:	4625      	mov	r5, r4
 8009ca6:	e7f4      	b.n	8009c92 <_dtoa_r+0x94a>
 8009ca8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 8101 	beq.w	8009eb6 <_dtoa_r+0xb6e>
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	dd05      	ble.n	8009cc4 <_dtoa_r+0x97c>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4632      	mov	r2, r6
 8009cbc:	4648      	mov	r0, r9
 8009cbe:	f000 fc63 	bl	800a588 <__lshift>
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05c      	beq.n	8009d84 <_dtoa_r+0xa3c>
 8009cca:	6869      	ldr	r1, [r5, #4]
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fa0b 	bl	800a0e8 <_Balloc>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b928      	cbnz	r0, 8009ce2 <_dtoa_r+0x99a>
 8009cd6:	4b82      	ldr	r3, [pc, #520]	@ (8009ee0 <_dtoa_r+0xb98>)
 8009cd8:	4602      	mov	r2, r0
 8009cda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cde:	f7ff bb4a 	b.w	8009376 <_dtoa_r+0x2e>
 8009ce2:	692a      	ldr	r2, [r5, #16]
 8009ce4:	3202      	adds	r2, #2
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	f105 010c 	add.w	r1, r5, #12
 8009cec:	300c      	adds	r0, #12
 8009cee:	f7ff fa8e 	bl	800920e <memcpy>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f000 fc46 	bl	800a588 <__lshift>
 8009cfc:	f10a 0301 	add.w	r3, sl, #1
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	eb0a 030b 	add.w	r3, sl, fp
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	462f      	mov	r7, r5
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	4605      	mov	r5, r0
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	9802      	ldr	r0, [sp, #8]
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d1e:	f7ff fa8b 	bl	8009238 <quorem>
 8009d22:	4603      	mov	r3, r0
 8009d24:	3330      	adds	r3, #48	@ 0x30
 8009d26:	9003      	str	r0, [sp, #12]
 8009d28:	4639      	mov	r1, r7
 8009d2a:	9802      	ldr	r0, [sp, #8]
 8009d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2e:	f000 fc97 	bl	800a660 <__mcmp>
 8009d32:	462a      	mov	r2, r5
 8009d34:	9004      	str	r0, [sp, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	4648      	mov	r0, r9
 8009d3a:	f000 fcad 	bl	800a698 <__mdiff>
 8009d3e:	68c2      	ldr	r2, [r0, #12]
 8009d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d42:	4606      	mov	r6, r0
 8009d44:	bb02      	cbnz	r2, 8009d88 <_dtoa_r+0xa40>
 8009d46:	4601      	mov	r1, r0
 8009d48:	9802      	ldr	r0, [sp, #8]
 8009d4a:	f000 fc89 	bl	800a660 <__mcmp>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	4602      	mov	r2, r0
 8009d52:	4631      	mov	r1, r6
 8009d54:	4648      	mov	r0, r9
 8009d56:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5a:	f000 fa05 	bl	800a168 <_Bfree>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d62:	9e00      	ldr	r6, [sp, #0]
 8009d64:	ea42 0103 	orr.w	r1, r2, r3
 8009d68:	9b06      	ldr	r3, [sp, #24]
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6e:	d10d      	bne.n	8009d8c <_dtoa_r+0xa44>
 8009d70:	2b39      	cmp	r3, #57	@ 0x39
 8009d72:	d027      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009d74:	9a04      	ldr	r2, [sp, #16]
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	dd01      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3331      	adds	r3, #49	@ 0x31
 8009d7e:	f88b 3000 	strb.w	r3, [fp]
 8009d82:	e52e      	b.n	80097e2 <_dtoa_r+0x49a>
 8009d84:	4628      	mov	r0, r5
 8009d86:	e7b9      	b.n	8009cfc <_dtoa_r+0x9b4>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	e7e2      	b.n	8009d52 <_dtoa_r+0xa0a>
 8009d8c:	9904      	ldr	r1, [sp, #16]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	db04      	blt.n	8009d9c <_dtoa_r+0xa54>
 8009d92:	9807      	ldr	r0, [sp, #28]
 8009d94:	4301      	orrs	r1, r0
 8009d96:	9806      	ldr	r0, [sp, #24]
 8009d98:	4301      	orrs	r1, r0
 8009d9a:	d120      	bne.n	8009dde <_dtoa_r+0xa96>
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	ddee      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009da0:	9902      	ldr	r1, [sp, #8]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2201      	movs	r2, #1
 8009da6:	4648      	mov	r0, r9
 8009da8:	f000 fbee 	bl	800a588 <__lshift>
 8009dac:	4621      	mov	r1, r4
 8009dae:	9002      	str	r0, [sp, #8]
 8009db0:	f000 fc56 	bl	800a660 <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	dc02      	bgt.n	8009dc0 <_dtoa_r+0xa78>
 8009dba:	d1e0      	bne.n	8009d7e <_dtoa_r+0xa36>
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	d5de      	bpl.n	8009d7e <_dtoa_r+0xa36>
 8009dc0:	2b39      	cmp	r3, #57	@ 0x39
 8009dc2:	d1da      	bne.n	8009d7a <_dtoa_r+0xa32>
 8009dc4:	2339      	movs	r3, #57	@ 0x39
 8009dc6:	f88b 3000 	strb.w	r3, [fp]
 8009dca:	4633      	mov	r3, r6
 8009dcc:	461e      	mov	r6, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009dd4:	2a39      	cmp	r2, #57	@ 0x39
 8009dd6:	d04e      	beq.n	8009e76 <_dtoa_r+0xb2e>
 8009dd8:	3201      	adds	r2, #1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e501      	b.n	80097e2 <_dtoa_r+0x49a>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	dd03      	ble.n	8009dea <_dtoa_r+0xaa2>
 8009de2:	2b39      	cmp	r3, #57	@ 0x39
 8009de4:	d0ee      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009de6:	3301      	adds	r3, #1
 8009de8:	e7c9      	b.n	8009d7e <_dtoa_r+0xa36>
 8009dea:	9a00      	ldr	r2, [sp, #0]
 8009dec:	9908      	ldr	r1, [sp, #32]
 8009dee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009df2:	428a      	cmp	r2, r1
 8009df4:	d028      	beq.n	8009e48 <_dtoa_r+0xb00>
 8009df6:	9902      	ldr	r1, [sp, #8]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f000 f9d5 	bl	800a1ac <__multadd>
 8009e02:	42af      	cmp	r7, r5
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	f04f 020a 	mov.w	r2, #10
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4648      	mov	r0, r9
 8009e12:	d107      	bne.n	8009e24 <_dtoa_r+0xadc>
 8009e14:	f000 f9ca 	bl	800a1ac <__multadd>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e777      	b.n	8009d14 <_dtoa_r+0x9cc>
 8009e24:	f000 f9c2 	bl	800a1ac <__multadd>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	220a      	movs	r2, #10
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 f9bb 	bl	800a1ac <__multadd>
 8009e36:	4605      	mov	r5, r0
 8009e38:	e7f0      	b.n	8009e1c <_dtoa_r+0xad4>
 8009e3a:	f1bb 0f00 	cmp.w	fp, #0
 8009e3e:	bfcc      	ite	gt
 8009e40:	465e      	movgt	r6, fp
 8009e42:	2601      	movle	r6, #1
 8009e44:	4456      	add	r6, sl
 8009e46:	2700      	movs	r7, #0
 8009e48:	9902      	ldr	r1, [sp, #8]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4648      	mov	r0, r9
 8009e50:	f000 fb9a 	bl	800a588 <__lshift>
 8009e54:	4621      	mov	r1, r4
 8009e56:	9002      	str	r0, [sp, #8]
 8009e58:	f000 fc02 	bl	800a660 <__mcmp>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dcb4      	bgt.n	8009dca <_dtoa_r+0xa82>
 8009e60:	d102      	bne.n	8009e68 <_dtoa_r+0xb20>
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	07db      	lsls	r3, r3, #31
 8009e66:	d4b0      	bmi.n	8009dca <_dtoa_r+0xa82>
 8009e68:	4633      	mov	r3, r6
 8009e6a:	461e      	mov	r6, r3
 8009e6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e70:	2a30      	cmp	r2, #48	@ 0x30
 8009e72:	d0fa      	beq.n	8009e6a <_dtoa_r+0xb22>
 8009e74:	e4b5      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e76:	459a      	cmp	sl, r3
 8009e78:	d1a8      	bne.n	8009dcc <_dtoa_r+0xa84>
 8009e7a:	2331      	movs	r3, #49	@ 0x31
 8009e7c:	f108 0801 	add.w	r8, r8, #1
 8009e80:	f88a 3000 	strb.w	r3, [sl]
 8009e84:	e4ad      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ee4 <_dtoa_r+0xb9c>
 8009e8c:	b11b      	cbz	r3, 8009e96 <_dtoa_r+0xb4e>
 8009e8e:	f10a 0308 	add.w	r3, sl, #8
 8009e92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	4650      	mov	r0, sl
 8009e98:	b017      	add	sp, #92	@ 0x5c
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	9b07      	ldr	r3, [sp, #28]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	f77f ae2e 	ble.w	8009b02 <_dtoa_r+0x7ba>
 8009ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ea8:	9308      	str	r3, [sp, #32]
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e64d      	b.n	8009b4a <_dtoa_r+0x802>
 8009eae:	f1bb 0f00 	cmp.w	fp, #0
 8009eb2:	f77f aed9 	ble.w	8009c68 <_dtoa_r+0x920>
 8009eb6:	4656      	mov	r6, sl
 8009eb8:	9802      	ldr	r0, [sp, #8]
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f7ff f9bc 	bl	8009238 <quorem>
 8009ec0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ec8:	eba6 020a 	sub.w	r2, r6, sl
 8009ecc:	4593      	cmp	fp, r2
 8009ece:	ddb4      	ble.n	8009e3a <_dtoa_r+0xaf2>
 8009ed0:	9902      	ldr	r1, [sp, #8]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f000 f968 	bl	800a1ac <__multadd>
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	e7eb      	b.n	8009eb8 <_dtoa_r+0xb70>
 8009ee0:	0800cc85 	.word	0x0800cc85
 8009ee4:	0800cc09 	.word	0x0800cc09

08009ee8 <_free_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4605      	mov	r5, r0
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d041      	beq.n	8009f74 <_free_r+0x8c>
 8009ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef4:	1f0c      	subs	r4, r1, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfb8      	it	lt
 8009efa:	18e4      	addlt	r4, r4, r3
 8009efc:	f000 f8e8 	bl	800a0d0 <__malloc_lock>
 8009f00:	4a1d      	ldr	r2, [pc, #116]	@ (8009f78 <_free_r+0x90>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	b933      	cbnz	r3, 8009f14 <_free_r+0x2c>
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6014      	str	r4, [r2, #0]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f10:	f000 b8e4 	b.w	800a0dc <__malloc_unlock>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d908      	bls.n	8009f2a <_free_r+0x42>
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	1821      	adds	r1, r4, r0
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf01      	itttt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	1809      	addeq	r1, r1, r0
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	e7ed      	b.n	8009f06 <_free_r+0x1e>
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b10b      	cbz	r3, 8009f34 <_free_r+0x4c>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d9fa      	bls.n	8009f2a <_free_r+0x42>
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	1850      	adds	r0, r2, r1
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d10b      	bne.n	8009f54 <_free_r+0x6c>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	4401      	add	r1, r0
 8009f40:	1850      	adds	r0, r2, r1
 8009f42:	4283      	cmp	r3, r0
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	d1e0      	bne.n	8009f0a <_free_r+0x22>
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	4408      	add	r0, r1
 8009f50:	6010      	str	r0, [r2, #0]
 8009f52:	e7da      	b.n	8009f0a <_free_r+0x22>
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x74>
 8009f56:	230c      	movs	r3, #12
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	e7d6      	b.n	8009f0a <_free_r+0x22>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	1821      	adds	r1, r4, r0
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf04      	itt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	bf04      	itt	eq
 8009f6c:	1809      	addeq	r1, r1, r0
 8009f6e:	6021      	streq	r1, [r4, #0]
 8009f70:	6054      	str	r4, [r2, #4]
 8009f72:	e7ca      	b.n	8009f0a <_free_r+0x22>
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	20000870 	.word	0x20000870

08009f7c <malloc>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	@ (8009f88 <malloc+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b825 	b.w	8009fd0 <_malloc_r>
 8009f86:	bf00      	nop
 8009f88:	2000010c 	.word	0x2000010c

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fcc <sbrk_aligned+0x40>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f001 fe04 	bl	800bba4 <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f001 fdff 	bl	800bba4 <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <sbrk_aligned+0x26>
 8009faa:	f04f 34ff 	mov.w	r4, #4294967295
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0f8      	beq.n	8009fae <sbrk_aligned+0x22>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f001 fdf0 	bl	800bba4 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1f2      	bne.n	8009fae <sbrk_aligned+0x22>
 8009fc8:	e7ef      	b.n	8009faa <sbrk_aligned+0x1e>
 8009fca:	bf00      	nop
 8009fcc:	2000086c 	.word	0x2000086c

08009fd0 <_malloc_r>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	1ccd      	adds	r5, r1, #3
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	db01      	blt.n	8009fec <_malloc_r+0x1c>
 8009fe8:	42a9      	cmp	r1, r5
 8009fea:	d904      	bls.n	8009ff6 <_malloc_r+0x26>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0cc <_malloc_r+0xfc>
 8009ffa:	f000 f869 	bl	800a0d0 <__malloc_lock>
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	461c      	mov	r4, r3
 800a004:	bb44      	cbnz	r4, 800a058 <_malloc_r+0x88>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbf 	bl	8009f8c <sbrk_aligned>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	4604      	mov	r4, r0
 800a012:	d158      	bne.n	800a0c6 <_malloc_r+0xf6>
 800a014:	f8d8 4000 	ldr.w	r4, [r8]
 800a018:	4627      	mov	r7, r4
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d143      	bne.n	800a0a6 <_malloc_r+0xd6>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d04b      	beq.n	800a0ba <_malloc_r+0xea>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	eb04 0903 	add.w	r9, r4, r3
 800a02c:	f001 fdba 	bl	800bba4 <_sbrk_r>
 800a030:	4581      	cmp	r9, r0
 800a032:	d142      	bne.n	800a0ba <_malloc_r+0xea>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	1a6d      	subs	r5, r5, r1
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa6 	bl	8009f8c <sbrk_aligned>
 800a040:	3001      	adds	r0, #1
 800a042:	d03a      	beq.n	800a0ba <_malloc_r+0xea>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	442b      	add	r3, r5
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	f8d8 3000 	ldr.w	r3, [r8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	bb62      	cbnz	r2, 800a0ac <_malloc_r+0xdc>
 800a052:	f8c8 7000 	str.w	r7, [r8]
 800a056:	e00f      	b.n	800a078 <_malloc_r+0xa8>
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	d420      	bmi.n	800a0a0 <_malloc_r+0xd0>
 800a05e:	2a0b      	cmp	r2, #11
 800a060:	d917      	bls.n	800a092 <_malloc_r+0xc2>
 800a062:	1961      	adds	r1, r4, r5
 800a064:	42a3      	cmp	r3, r4
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	bf18      	it	ne
 800a06a:	6059      	strne	r1, [r3, #4]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	bf08      	it	eq
 800a070:	f8c8 1000 	streq.w	r1, [r8]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f82f 	bl	800a0dc <__malloc_unlock>
 800a07e:	f104 000b 	add.w	r0, r4, #11
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	f020 0007 	bic.w	r0, r0, #7
 800a088:	1ac2      	subs	r2, r0, r3
 800a08a:	bf1c      	itt	ne
 800a08c:	1a1b      	subne	r3, r3, r0
 800a08e:	50a3      	strne	r3, [r4, r2]
 800a090:	e7af      	b.n	8009ff2 <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	f8c8 2000 	streq.w	r2, [r8]
 800a09c:	605a      	strne	r2, [r3, #4]
 800a09e:	e7eb      	b.n	800a078 <_malloc_r+0xa8>
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	6864      	ldr	r4, [r4, #4]
 800a0a4:	e7ae      	b.n	800a004 <_malloc_r+0x34>
 800a0a6:	463c      	mov	r4, r7
 800a0a8:	687f      	ldr	r7, [r7, #4]
 800a0aa:	e7b6      	b.n	800a01a <_malloc_r+0x4a>
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d1fb      	bne.n	800a0ac <_malloc_r+0xdc>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa8>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f80c 	bl	800a0dc <__malloc_unlock>
 800a0c4:	e794      	b.n	8009ff0 <_malloc_r+0x20>
 800a0c6:	6005      	str	r5, [r0, #0]
 800a0c8:	e7d6      	b.n	800a078 <_malloc_r+0xa8>
 800a0ca:	bf00      	nop
 800a0cc:	20000870 	.word	0x20000870

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff b89a 	b.w	800920a <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000868 	.word	0x20000868

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff b895 	b.w	800920c <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000868 	.word	0x20000868

0800a0e8 <_Balloc>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	69c6      	ldr	r6, [r0, #28]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Balloc+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7ff ff42 	bl	8009f7c <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	61e0      	str	r0, [r4, #28]
 800a0fc:	b920      	cbnz	r0, 800a108 <_Balloc+0x20>
 800a0fe:	4b18      	ldr	r3, [pc, #96]	@ (800a160 <_Balloc+0x78>)
 800a100:	4818      	ldr	r0, [pc, #96]	@ (800a164 <_Balloc+0x7c>)
 800a102:	216b      	movs	r1, #107	@ 0x6b
 800a104:	f001 fd68 	bl	800bbd8 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	69e6      	ldr	r6, [r4, #28]
 800a112:	68f3      	ldr	r3, [r6, #12]
 800a114:	b183      	cbz	r3, 800a138 <_Balloc+0x50>
 800a116:	69e3      	ldr	r3, [r4, #28]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a11e:	b9b8      	cbnz	r0, 800a150 <_Balloc+0x68>
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f605 	lsl.w	r6, r1, r5
 800a126:	1d72      	adds	r2, r6, #5
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	4620      	mov	r0, r4
 800a12c:	f001 fd72 	bl	800bc14 <_calloc_r>
 800a130:	b160      	cbz	r0, 800a14c <_Balloc+0x64>
 800a132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a136:	e00e      	b.n	800a156 <_Balloc+0x6e>
 800a138:	2221      	movs	r2, #33	@ 0x21
 800a13a:	2104      	movs	r1, #4
 800a13c:	4620      	mov	r0, r4
 800a13e:	f001 fd69 	bl	800bc14 <_calloc_r>
 800a142:	69e3      	ldr	r3, [r4, #28]
 800a144:	60f0      	str	r0, [r6, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e4      	bne.n	800a116 <_Balloc+0x2e>
 800a14c:	2000      	movs	r0, #0
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	6802      	ldr	r2, [r0, #0]
 800a152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a156:	2300      	movs	r3, #0
 800a158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a15c:	e7f7      	b.n	800a14e <_Balloc+0x66>
 800a15e:	bf00      	nop
 800a160:	0800cc16 	.word	0x0800cc16
 800a164:	0800cc96 	.word	0x0800cc96

0800a168 <_Bfree>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	69c6      	ldr	r6, [r0, #28]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b976      	cbnz	r6, 800a190 <_Bfree+0x28>
 800a172:	2010      	movs	r0, #16
 800a174:	f7ff ff02 	bl	8009f7c <malloc>
 800a178:	4602      	mov	r2, r0
 800a17a:	61e8      	str	r0, [r5, #28]
 800a17c:	b920      	cbnz	r0, 800a188 <_Bfree+0x20>
 800a17e:	4b09      	ldr	r3, [pc, #36]	@ (800a1a4 <_Bfree+0x3c>)
 800a180:	4809      	ldr	r0, [pc, #36]	@ (800a1a8 <_Bfree+0x40>)
 800a182:	218f      	movs	r1, #143	@ 0x8f
 800a184:	f001 fd28 	bl	800bbd8 <__assert_func>
 800a188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a18c:	6006      	str	r6, [r0, #0]
 800a18e:	60c6      	str	r6, [r0, #12]
 800a190:	b13c      	cbz	r4, 800a1a2 <_Bfree+0x3a>
 800a192:	69eb      	ldr	r3, [r5, #28]
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	0800cc16 	.word	0x0800cc16
 800a1a8:	0800cc96 	.word	0x0800cc96

0800a1ac <__multadd>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	690d      	ldr	r5, [r1, #16]
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f101 0c14 	add.w	ip, r1, #20
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	b299      	uxth	r1, r3
 800a1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1c8:	0c1e      	lsrs	r6, r3, #16
 800a1ca:	0c0b      	lsrs	r3, r1, #16
 800a1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1d0:	b289      	uxth	r1, r1
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1d8:	4285      	cmp	r5, r0
 800a1da:	f84c 1b04 	str.w	r1, [ip], #4
 800a1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1e2:	dcec      	bgt.n	800a1be <__multadd+0x12>
 800a1e4:	b30e      	cbz	r6, 800a22a <__multadd+0x7e>
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dc19      	bgt.n	800a220 <__multadd+0x74>
 800a1ec:	6861      	ldr	r1, [r4, #4]
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	f7ff ff79 	bl	800a0e8 <_Balloc>
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__multadd+0x5a>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a230 <__multadd+0x84>)
 800a1fe:	480d      	ldr	r0, [pc, #52]	@ (800a234 <__multadd+0x88>)
 800a200:	21ba      	movs	r1, #186	@ 0xba
 800a202:	f001 fce9 	bl	800bbd8 <__assert_func>
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	f104 010c 	add.w	r1, r4, #12
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	300c      	adds	r0, #12
 800a212:	f7fe fffc 	bl	800920e <memcpy>
 800a216:	4621      	mov	r1, r4
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ffa5 	bl	800a168 <_Bfree>
 800a21e:	4644      	mov	r4, r8
 800a220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a224:	3501      	adds	r5, #1
 800a226:	615e      	str	r6, [r3, #20]
 800a228:	6125      	str	r5, [r4, #16]
 800a22a:	4620      	mov	r0, r4
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	0800cc85 	.word	0x0800cc85
 800a234:	0800cc96 	.word	0x0800cc96

0800a238 <__s2b>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	460c      	mov	r4, r1
 800a23e:	4615      	mov	r5, r2
 800a240:	461f      	mov	r7, r3
 800a242:	2209      	movs	r2, #9
 800a244:	3308      	adds	r3, #8
 800a246:	4606      	mov	r6, r0
 800a248:	fb93 f3f2 	sdiv	r3, r3, r2
 800a24c:	2100      	movs	r1, #0
 800a24e:	2201      	movs	r2, #1
 800a250:	429a      	cmp	r2, r3
 800a252:	db09      	blt.n	800a268 <__s2b+0x30>
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff ff47 	bl	800a0e8 <_Balloc>
 800a25a:	b940      	cbnz	r0, 800a26e <__s2b+0x36>
 800a25c:	4602      	mov	r2, r0
 800a25e:	4b19      	ldr	r3, [pc, #100]	@ (800a2c4 <__s2b+0x8c>)
 800a260:	4819      	ldr	r0, [pc, #100]	@ (800a2c8 <__s2b+0x90>)
 800a262:	21d3      	movs	r1, #211	@ 0xd3
 800a264:	f001 fcb8 	bl	800bbd8 <__assert_func>
 800a268:	0052      	lsls	r2, r2, #1
 800a26a:	3101      	adds	r1, #1
 800a26c:	e7f0      	b.n	800a250 <__s2b+0x18>
 800a26e:	9b08      	ldr	r3, [sp, #32]
 800a270:	6143      	str	r3, [r0, #20]
 800a272:	2d09      	cmp	r5, #9
 800a274:	f04f 0301 	mov.w	r3, #1
 800a278:	6103      	str	r3, [r0, #16]
 800a27a:	dd16      	ble.n	800a2aa <__s2b+0x72>
 800a27c:	f104 0909 	add.w	r9, r4, #9
 800a280:	46c8      	mov	r8, r9
 800a282:	442c      	add	r4, r5
 800a284:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a288:	4601      	mov	r1, r0
 800a28a:	3b30      	subs	r3, #48	@ 0x30
 800a28c:	220a      	movs	r2, #10
 800a28e:	4630      	mov	r0, r6
 800a290:	f7ff ff8c 	bl	800a1ac <__multadd>
 800a294:	45a0      	cmp	r8, r4
 800a296:	d1f5      	bne.n	800a284 <__s2b+0x4c>
 800a298:	f1a5 0408 	sub.w	r4, r5, #8
 800a29c:	444c      	add	r4, r9
 800a29e:	1b2d      	subs	r5, r5, r4
 800a2a0:	1963      	adds	r3, r4, r5
 800a2a2:	42bb      	cmp	r3, r7
 800a2a4:	db04      	blt.n	800a2b0 <__s2b+0x78>
 800a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2aa:	340a      	adds	r4, #10
 800a2ac:	2509      	movs	r5, #9
 800a2ae:	e7f6      	b.n	800a29e <__s2b+0x66>
 800a2b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	3b30      	subs	r3, #48	@ 0x30
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff76 	bl	800a1ac <__multadd>
 800a2c0:	e7ee      	b.n	800a2a0 <__s2b+0x68>
 800a2c2:	bf00      	nop
 800a2c4:	0800cc85 	.word	0x0800cc85
 800a2c8:	0800cc96 	.word	0x0800cc96

0800a2cc <__hi0bits>:
 800a2cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	bf36      	itet	cc
 800a2d4:	0403      	lslcc	r3, r0, #16
 800a2d6:	2000      	movcs	r0, #0
 800a2d8:	2010      	movcc	r0, #16
 800a2da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2de:	bf3c      	itt	cc
 800a2e0:	021b      	lslcc	r3, r3, #8
 800a2e2:	3008      	addcc	r0, #8
 800a2e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e8:	bf3c      	itt	cc
 800a2ea:	011b      	lslcc	r3, r3, #4
 800a2ec:	3004      	addcc	r0, #4
 800a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f2:	bf3c      	itt	cc
 800a2f4:	009b      	lslcc	r3, r3, #2
 800a2f6:	3002      	addcc	r0, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db05      	blt.n	800a308 <__hi0bits+0x3c>
 800a2fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a300:	f100 0001 	add.w	r0, r0, #1
 800a304:	bf08      	it	eq
 800a306:	2020      	moveq	r0, #32
 800a308:	4770      	bx	lr

0800a30a <__lo0bits>:
 800a30a:	6803      	ldr	r3, [r0, #0]
 800a30c:	4602      	mov	r2, r0
 800a30e:	f013 0007 	ands.w	r0, r3, #7
 800a312:	d00b      	beq.n	800a32c <__lo0bits+0x22>
 800a314:	07d9      	lsls	r1, r3, #31
 800a316:	d421      	bmi.n	800a35c <__lo0bits+0x52>
 800a318:	0798      	lsls	r0, r3, #30
 800a31a:	bf49      	itett	mi
 800a31c:	085b      	lsrmi	r3, r3, #1
 800a31e:	089b      	lsrpl	r3, r3, #2
 800a320:	2001      	movmi	r0, #1
 800a322:	6013      	strmi	r3, [r2, #0]
 800a324:	bf5c      	itt	pl
 800a326:	6013      	strpl	r3, [r2, #0]
 800a328:	2002      	movpl	r0, #2
 800a32a:	4770      	bx	lr
 800a32c:	b299      	uxth	r1, r3
 800a32e:	b909      	cbnz	r1, 800a334 <__lo0bits+0x2a>
 800a330:	0c1b      	lsrs	r3, r3, #16
 800a332:	2010      	movs	r0, #16
 800a334:	b2d9      	uxtb	r1, r3
 800a336:	b909      	cbnz	r1, 800a33c <__lo0bits+0x32>
 800a338:	3008      	adds	r0, #8
 800a33a:	0a1b      	lsrs	r3, r3, #8
 800a33c:	0719      	lsls	r1, r3, #28
 800a33e:	bf04      	itt	eq
 800a340:	091b      	lsreq	r3, r3, #4
 800a342:	3004      	addeq	r0, #4
 800a344:	0799      	lsls	r1, r3, #30
 800a346:	bf04      	itt	eq
 800a348:	089b      	lsreq	r3, r3, #2
 800a34a:	3002      	addeq	r0, #2
 800a34c:	07d9      	lsls	r1, r3, #31
 800a34e:	d403      	bmi.n	800a358 <__lo0bits+0x4e>
 800a350:	085b      	lsrs	r3, r3, #1
 800a352:	f100 0001 	add.w	r0, r0, #1
 800a356:	d003      	beq.n	800a360 <__lo0bits+0x56>
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	4770      	bx	lr
 800a35c:	2000      	movs	r0, #0
 800a35e:	4770      	bx	lr
 800a360:	2020      	movs	r0, #32
 800a362:	4770      	bx	lr

0800a364 <__i2b>:
 800a364:	b510      	push	{r4, lr}
 800a366:	460c      	mov	r4, r1
 800a368:	2101      	movs	r1, #1
 800a36a:	f7ff febd 	bl	800a0e8 <_Balloc>
 800a36e:	4602      	mov	r2, r0
 800a370:	b928      	cbnz	r0, 800a37e <__i2b+0x1a>
 800a372:	4b05      	ldr	r3, [pc, #20]	@ (800a388 <__i2b+0x24>)
 800a374:	4805      	ldr	r0, [pc, #20]	@ (800a38c <__i2b+0x28>)
 800a376:	f240 1145 	movw	r1, #325	@ 0x145
 800a37a:	f001 fc2d 	bl	800bbd8 <__assert_func>
 800a37e:	2301      	movs	r3, #1
 800a380:	6144      	str	r4, [r0, #20]
 800a382:	6103      	str	r3, [r0, #16]
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	0800cc85 	.word	0x0800cc85
 800a38c:	0800cc96 	.word	0x0800cc96

0800a390 <__multiply>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4617      	mov	r7, r2
 800a396:	690a      	ldr	r2, [r1, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	bfa8      	it	ge
 800a39e:	463b      	movge	r3, r7
 800a3a0:	4689      	mov	r9, r1
 800a3a2:	bfa4      	itt	ge
 800a3a4:	460f      	movge	r7, r1
 800a3a6:	4699      	movge	r9, r3
 800a3a8:	693d      	ldr	r5, [r7, #16]
 800a3aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	eb05 060a 	add.w	r6, r5, sl
 800a3b6:	42b3      	cmp	r3, r6
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	bfb8      	it	lt
 800a3bc:	3101      	addlt	r1, #1
 800a3be:	f7ff fe93 	bl	800a0e8 <_Balloc>
 800a3c2:	b930      	cbnz	r0, 800a3d2 <__multiply+0x42>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	4b41      	ldr	r3, [pc, #260]	@ (800a4cc <__multiply+0x13c>)
 800a3c8:	4841      	ldr	r0, [pc, #260]	@ (800a4d0 <__multiply+0x140>)
 800a3ca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3ce:	f001 fc03 	bl	800bbd8 <__assert_func>
 800a3d2:	f100 0414 	add.w	r4, r0, #20
 800a3d6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3da:	4623      	mov	r3, r4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4573      	cmp	r3, lr
 800a3e0:	d320      	bcc.n	800a424 <__multiply+0x94>
 800a3e2:	f107 0814 	add.w	r8, r7, #20
 800a3e6:	f109 0114 	add.w	r1, r9, #20
 800a3ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3ee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3f2:	9302      	str	r3, [sp, #8]
 800a3f4:	1beb      	subs	r3, r5, r7
 800a3f6:	3b15      	subs	r3, #21
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	3715      	adds	r7, #21
 800a400:	42bd      	cmp	r5, r7
 800a402:	bf38      	it	cc
 800a404:	2304      	movcc	r3, #4
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	428b      	cmp	r3, r1
 800a40e:	d80c      	bhi.n	800a42a <__multiply+0x9a>
 800a410:	2e00      	cmp	r6, #0
 800a412:	dd03      	ble.n	800a41c <__multiply+0x8c>
 800a414:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d055      	beq.n	800a4c8 <__multiply+0x138>
 800a41c:	6106      	str	r6, [r0, #16]
 800a41e:	b005      	add	sp, #20
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	e7d9      	b.n	800a3de <__multiply+0x4e>
 800a42a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42e:	f1ba 0f00 	cmp.w	sl, #0
 800a432:	d01f      	beq.n	800a474 <__multiply+0xe4>
 800a434:	46c4      	mov	ip, r8
 800a436:	46a1      	mov	r9, r4
 800a438:	2700      	movs	r7, #0
 800a43a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a43e:	f8d9 3000 	ldr.w	r3, [r9]
 800a442:	fa1f fb82 	uxth.w	fp, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	fb0a 330b 	mla	r3, sl, fp, r3
 800a44c:	443b      	add	r3, r7
 800a44e:	f8d9 7000 	ldr.w	r7, [r9]
 800a452:	0c12      	lsrs	r2, r2, #16
 800a454:	0c3f      	lsrs	r7, r7, #16
 800a456:	fb0a 7202 	mla	r2, sl, r2, r7
 800a45a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a45e:	b29b      	uxth	r3, r3
 800a460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a464:	4565      	cmp	r5, ip
 800a466:	f849 3b04 	str.w	r3, [r9], #4
 800a46a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a46e:	d8e4      	bhi.n	800a43a <__multiply+0xaa>
 800a470:	9b01      	ldr	r3, [sp, #4]
 800a472:	50e7      	str	r7, [r4, r3]
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a47a:	3104      	adds	r1, #4
 800a47c:	f1b9 0f00 	cmp.w	r9, #0
 800a480:	d020      	beq.n	800a4c4 <__multiply+0x134>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	4647      	mov	r7, r8
 800a486:	46a4      	mov	ip, r4
 800a488:	f04f 0a00 	mov.w	sl, #0
 800a48c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a490:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a494:	fb09 220b 	mla	r2, r9, fp, r2
 800a498:	4452      	add	r2, sl
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a0:	f84c 3b04 	str.w	r3, [ip], #4
 800a4a4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ac:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a4b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4b8:	42bd      	cmp	r5, r7
 800a4ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4be:	d8e5      	bhi.n	800a48c <__multiply+0xfc>
 800a4c0:	9a01      	ldr	r2, [sp, #4]
 800a4c2:	50a3      	str	r3, [r4, r2]
 800a4c4:	3404      	adds	r4, #4
 800a4c6:	e79f      	b.n	800a408 <__multiply+0x78>
 800a4c8:	3e01      	subs	r6, #1
 800a4ca:	e7a1      	b.n	800a410 <__multiply+0x80>
 800a4cc:	0800cc85 	.word	0x0800cc85
 800a4d0:	0800cc96 	.word	0x0800cc96

0800a4d4 <__pow5mult>:
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	4615      	mov	r5, r2
 800a4da:	f012 0203 	ands.w	r2, r2, #3
 800a4de:	4607      	mov	r7, r0
 800a4e0:	460e      	mov	r6, r1
 800a4e2:	d007      	beq.n	800a4f4 <__pow5mult+0x20>
 800a4e4:	4c25      	ldr	r4, [pc, #148]	@ (800a57c <__pow5mult+0xa8>)
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ee:	f7ff fe5d 	bl	800a1ac <__multadd>
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	10ad      	asrs	r5, r5, #2
 800a4f6:	d03d      	beq.n	800a574 <__pow5mult+0xa0>
 800a4f8:	69fc      	ldr	r4, [r7, #28]
 800a4fa:	b97c      	cbnz	r4, 800a51c <__pow5mult+0x48>
 800a4fc:	2010      	movs	r0, #16
 800a4fe:	f7ff fd3d 	bl	8009f7c <malloc>
 800a502:	4602      	mov	r2, r0
 800a504:	61f8      	str	r0, [r7, #28]
 800a506:	b928      	cbnz	r0, 800a514 <__pow5mult+0x40>
 800a508:	4b1d      	ldr	r3, [pc, #116]	@ (800a580 <__pow5mult+0xac>)
 800a50a:	481e      	ldr	r0, [pc, #120]	@ (800a584 <__pow5mult+0xb0>)
 800a50c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a510:	f001 fb62 	bl	800bbd8 <__assert_func>
 800a514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a518:	6004      	str	r4, [r0, #0]
 800a51a:	60c4      	str	r4, [r0, #12]
 800a51c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a524:	b94c      	cbnz	r4, 800a53a <__pow5mult+0x66>
 800a526:	f240 2171 	movw	r1, #625	@ 0x271
 800a52a:	4638      	mov	r0, r7
 800a52c:	f7ff ff1a 	bl	800a364 <__i2b>
 800a530:	2300      	movs	r3, #0
 800a532:	f8c8 0008 	str.w	r0, [r8, #8]
 800a536:	4604      	mov	r4, r0
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	07eb      	lsls	r3, r5, #31
 800a540:	d50a      	bpl.n	800a558 <__pow5mult+0x84>
 800a542:	4631      	mov	r1, r6
 800a544:	4622      	mov	r2, r4
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff22 	bl	800a390 <__multiply>
 800a54c:	4631      	mov	r1, r6
 800a54e:	4680      	mov	r8, r0
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fe09 	bl	800a168 <_Bfree>
 800a556:	4646      	mov	r6, r8
 800a558:	106d      	asrs	r5, r5, #1
 800a55a:	d00b      	beq.n	800a574 <__pow5mult+0xa0>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	b938      	cbnz	r0, 800a570 <__pow5mult+0x9c>
 800a560:	4622      	mov	r2, r4
 800a562:	4621      	mov	r1, r4
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff ff13 	bl	800a390 <__multiply>
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	f8c0 9000 	str.w	r9, [r0]
 800a570:	4604      	mov	r4, r0
 800a572:	e7e4      	b.n	800a53e <__pow5mult+0x6a>
 800a574:	4630      	mov	r0, r6
 800a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57a:	bf00      	nop
 800a57c:	0800cda8 	.word	0x0800cda8
 800a580:	0800cc16 	.word	0x0800cc16
 800a584:	0800cc96 	.word	0x0800cc96

0800a588 <__lshift>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	6849      	ldr	r1, [r1, #4]
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	4607      	mov	r7, r0
 800a59a:	4691      	mov	r9, r2
 800a59c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a0:	f108 0601 	add.w	r6, r8, #1
 800a5a4:	42b3      	cmp	r3, r6
 800a5a6:	db0b      	blt.n	800a5c0 <__lshift+0x38>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff fd9d 	bl	800a0e8 <_Balloc>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b948      	cbnz	r0, 800a5c6 <__lshift+0x3e>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b28      	ldr	r3, [pc, #160]	@ (800a658 <__lshift+0xd0>)
 800a5b6:	4829      	ldr	r0, [pc, #164]	@ (800a65c <__lshift+0xd4>)
 800a5b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5bc:	f001 fb0c 	bl	800bbd8 <__assert_func>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	e7ee      	b.n	800a5a4 <__lshift+0x1c>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f100 0114 	add.w	r1, r0, #20
 800a5cc:	f100 0210 	add.w	r2, r0, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	4553      	cmp	r3, sl
 800a5d4:	db33      	blt.n	800a63e <__lshift+0xb6>
 800a5d6:	6920      	ldr	r0, [r4, #16]
 800a5d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5dc:	f104 0314 	add.w	r3, r4, #20
 800a5e0:	f019 091f 	ands.w	r9, r9, #31
 800a5e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ec:	d02b      	beq.n	800a646 <__lshift+0xbe>
 800a5ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a5f2:	468a      	mov	sl, r1
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5fc:	4310      	orrs	r0, r2
 800a5fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a602:	f853 2b04 	ldr.w	r2, [r3], #4
 800a606:	459c      	cmp	ip, r3
 800a608:	fa22 f20e 	lsr.w	r2, r2, lr
 800a60c:	d8f3      	bhi.n	800a5f6 <__lshift+0x6e>
 800a60e:	ebac 0304 	sub.w	r3, ip, r4
 800a612:	3b15      	subs	r3, #21
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	f104 0015 	add.w	r0, r4, #21
 800a61e:	4560      	cmp	r0, ip
 800a620:	bf88      	it	hi
 800a622:	2304      	movhi	r3, #4
 800a624:	50ca      	str	r2, [r1, r3]
 800a626:	b10a      	cbz	r2, 800a62c <__lshift+0xa4>
 800a628:	f108 0602 	add.w	r6, r8, #2
 800a62c:	3e01      	subs	r6, #1
 800a62e:	4638      	mov	r0, r7
 800a630:	612e      	str	r6, [r5, #16]
 800a632:	4621      	mov	r1, r4
 800a634:	f7ff fd98 	bl	800a168 <_Bfree>
 800a638:	4628      	mov	r0, r5
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a642:	3301      	adds	r3, #1
 800a644:	e7c5      	b.n	800a5d2 <__lshift+0x4a>
 800a646:	3904      	subs	r1, #4
 800a648:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a650:	459c      	cmp	ip, r3
 800a652:	d8f9      	bhi.n	800a648 <__lshift+0xc0>
 800a654:	e7ea      	b.n	800a62c <__lshift+0xa4>
 800a656:	bf00      	nop
 800a658:	0800cc85 	.word	0x0800cc85
 800a65c:	0800cc96 	.word	0x0800cc96

0800a660 <__mcmp>:
 800a660:	690a      	ldr	r2, [r1, #16]
 800a662:	4603      	mov	r3, r0
 800a664:	6900      	ldr	r0, [r0, #16]
 800a666:	1a80      	subs	r0, r0, r2
 800a668:	b530      	push	{r4, r5, lr}
 800a66a:	d10e      	bne.n	800a68a <__mcmp+0x2a>
 800a66c:	3314      	adds	r3, #20
 800a66e:	3114      	adds	r1, #20
 800a670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a67c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a680:	4295      	cmp	r5, r2
 800a682:	d003      	beq.n	800a68c <__mcmp+0x2c>
 800a684:	d205      	bcs.n	800a692 <__mcmp+0x32>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	bd30      	pop	{r4, r5, pc}
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d3f3      	bcc.n	800a678 <__mcmp+0x18>
 800a690:	e7fb      	b.n	800a68a <__mcmp+0x2a>
 800a692:	2001      	movs	r0, #1
 800a694:	e7f9      	b.n	800a68a <__mcmp+0x2a>
	...

0800a698 <__mdiff>:
 800a698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	4689      	mov	r9, r1
 800a69e:	4606      	mov	r6, r0
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4648      	mov	r0, r9
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	f7ff ffdb 	bl	800a660 <__mcmp>
 800a6aa:	1e05      	subs	r5, r0, #0
 800a6ac:	d112      	bne.n	800a6d4 <__mdiff+0x3c>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff fd19 	bl	800a0e8 <_Balloc>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <__mdiff+0x2e>
 800a6ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a7b8 <__mdiff+0x120>)
 800a6bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a6c0:	483e      	ldr	r0, [pc, #248]	@ (800a7bc <__mdiff+0x124>)
 800a6c2:	f001 fa89 	bl	800bbd8 <__assert_func>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	b003      	add	sp, #12
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	bfbc      	itt	lt
 800a6d6:	464b      	movlt	r3, r9
 800a6d8:	46a1      	movlt	r9, r4
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6e0:	bfba      	itte	lt
 800a6e2:	461c      	movlt	r4, r3
 800a6e4:	2501      	movlt	r5, #1
 800a6e6:	2500      	movge	r5, #0
 800a6e8:	f7ff fcfe 	bl	800a0e8 <_Balloc>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	b918      	cbnz	r0, 800a6f8 <__mdiff+0x60>
 800a6f0:	4b31      	ldr	r3, [pc, #196]	@ (800a7b8 <__mdiff+0x120>)
 800a6f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a6f6:	e7e3      	b.n	800a6c0 <__mdiff+0x28>
 800a6f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6fc:	6926      	ldr	r6, [r4, #16]
 800a6fe:	60c5      	str	r5, [r0, #12]
 800a700:	f109 0310 	add.w	r3, r9, #16
 800a704:	f109 0514 	add.w	r5, r9, #20
 800a708:	f104 0e14 	add.w	lr, r4, #20
 800a70c:	f100 0b14 	add.w	fp, r0, #20
 800a710:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a714:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	46d9      	mov	r9, fp
 800a71c:	f04f 0c00 	mov.w	ip, #0
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a726:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	fa1f f38a 	uxth.w	r3, sl
 800a730:	4619      	mov	r1, r3
 800a732:	b283      	uxth	r3, r0
 800a734:	1acb      	subs	r3, r1, r3
 800a736:	0c00      	lsrs	r0, r0, #16
 800a738:	4463      	add	r3, ip
 800a73a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a73e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a742:	b29b      	uxth	r3, r3
 800a744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a748:	4576      	cmp	r6, lr
 800a74a:	f849 3b04 	str.w	r3, [r9], #4
 800a74e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a752:	d8e5      	bhi.n	800a720 <__mdiff+0x88>
 800a754:	1b33      	subs	r3, r6, r4
 800a756:	3b15      	subs	r3, #21
 800a758:	f023 0303 	bic.w	r3, r3, #3
 800a75c:	3415      	adds	r4, #21
 800a75e:	3304      	adds	r3, #4
 800a760:	42a6      	cmp	r6, r4
 800a762:	bf38      	it	cc
 800a764:	2304      	movcc	r3, #4
 800a766:	441d      	add	r5, r3
 800a768:	445b      	add	r3, fp
 800a76a:	461e      	mov	r6, r3
 800a76c:	462c      	mov	r4, r5
 800a76e:	4544      	cmp	r4, r8
 800a770:	d30e      	bcc.n	800a790 <__mdiff+0xf8>
 800a772:	f108 0103 	add.w	r1, r8, #3
 800a776:	1b49      	subs	r1, r1, r5
 800a778:	f021 0103 	bic.w	r1, r1, #3
 800a77c:	3d03      	subs	r5, #3
 800a77e:	45a8      	cmp	r8, r5
 800a780:	bf38      	it	cc
 800a782:	2100      	movcc	r1, #0
 800a784:	440b      	add	r3, r1
 800a786:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a78a:	b191      	cbz	r1, 800a7b2 <__mdiff+0x11a>
 800a78c:	6117      	str	r7, [r2, #16]
 800a78e:	e79d      	b.n	800a6cc <__mdiff+0x34>
 800a790:	f854 1b04 	ldr.w	r1, [r4], #4
 800a794:	46e6      	mov	lr, ip
 800a796:	0c08      	lsrs	r0, r1, #16
 800a798:	fa1c fc81 	uxtah	ip, ip, r1
 800a79c:	4471      	add	r1, lr
 800a79e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7a8:	f846 1b04 	str.w	r1, [r6], #4
 800a7ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7b0:	e7dd      	b.n	800a76e <__mdiff+0xd6>
 800a7b2:	3f01      	subs	r7, #1
 800a7b4:	e7e7      	b.n	800a786 <__mdiff+0xee>
 800a7b6:	bf00      	nop
 800a7b8:	0800cc85 	.word	0x0800cc85
 800a7bc:	0800cc96 	.word	0x0800cc96

0800a7c0 <__ulp>:
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	ed8d 0b00 	vstr	d0, [sp]
 800a7c6:	9a01      	ldr	r2, [sp, #4]
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a808 <__ulp+0x48>)
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	dc08      	bgt.n	800a7e6 <__ulp+0x26>
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7de:	da04      	bge.n	800a7ea <__ulp+0x2a>
 800a7e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7e4:	4113      	asrs	r3, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	e008      	b.n	800a7fc <__ulp+0x3c>
 800a7ea:	f1a2 0314 	sub.w	r3, r2, #20
 800a7ee:	2b1e      	cmp	r3, #30
 800a7f0:	bfda      	itte	le
 800a7f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7f6:	40da      	lsrle	r2, r3
 800a7f8:	2201      	movgt	r2, #1
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	ec41 0b10 	vmov	d0, r0, r1
 800a804:	b002      	add	sp, #8
 800a806:	4770      	bx	lr
 800a808:	7ff00000 	.word	0x7ff00000

0800a80c <__b2d>:
 800a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	6906      	ldr	r6, [r0, #16]
 800a812:	f100 0814 	add.w	r8, r0, #20
 800a816:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a81a:	1f37      	subs	r7, r6, #4
 800a81c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a820:	4610      	mov	r0, r2
 800a822:	f7ff fd53 	bl	800a2cc <__hi0bits>
 800a826:	f1c0 0320 	rsb	r3, r0, #32
 800a82a:	280a      	cmp	r0, #10
 800a82c:	600b      	str	r3, [r1, #0]
 800a82e:	491b      	ldr	r1, [pc, #108]	@ (800a89c <__b2d+0x90>)
 800a830:	dc15      	bgt.n	800a85e <__b2d+0x52>
 800a832:	f1c0 0c0b 	rsb	ip, r0, #11
 800a836:	fa22 f30c 	lsr.w	r3, r2, ip
 800a83a:	45b8      	cmp	r8, r7
 800a83c:	ea43 0501 	orr.w	r5, r3, r1
 800a840:	bf34      	ite	cc
 800a842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a846:	2300      	movcs	r3, #0
 800a848:	3015      	adds	r0, #21
 800a84a:	fa02 f000 	lsl.w	r0, r2, r0
 800a84e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a852:	4303      	orrs	r3, r0
 800a854:	461c      	mov	r4, r3
 800a856:	ec45 4b10 	vmov	d0, r4, r5
 800a85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85e:	45b8      	cmp	r8, r7
 800a860:	bf3a      	itte	cc
 800a862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a866:	f1a6 0708 	subcc.w	r7, r6, #8
 800a86a:	2300      	movcs	r3, #0
 800a86c:	380b      	subs	r0, #11
 800a86e:	d012      	beq.n	800a896 <__b2d+0x8a>
 800a870:	f1c0 0120 	rsb	r1, r0, #32
 800a874:	fa23 f401 	lsr.w	r4, r3, r1
 800a878:	4082      	lsls	r2, r0
 800a87a:	4322      	orrs	r2, r4
 800a87c:	4547      	cmp	r7, r8
 800a87e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a882:	bf8c      	ite	hi
 800a884:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a888:	2200      	movls	r2, #0
 800a88a:	4083      	lsls	r3, r0
 800a88c:	40ca      	lsrs	r2, r1
 800a88e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a892:	4313      	orrs	r3, r2
 800a894:	e7de      	b.n	800a854 <__b2d+0x48>
 800a896:	ea42 0501 	orr.w	r5, r2, r1
 800a89a:	e7db      	b.n	800a854 <__b2d+0x48>
 800a89c:	3ff00000 	.word	0x3ff00000

0800a8a0 <__d2b>:
 800a8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	ec59 8b10 	vmov	r8, r9, d0
 800a8ac:	4616      	mov	r6, r2
 800a8ae:	f7ff fc1b 	bl	800a0e8 <_Balloc>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b930      	cbnz	r0, 800a8c4 <__d2b+0x24>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b23      	ldr	r3, [pc, #140]	@ (800a948 <__d2b+0xa8>)
 800a8ba:	4824      	ldr	r0, [pc, #144]	@ (800a94c <__d2b+0xac>)
 800a8bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8c0:	f001 f98a 	bl	800bbd8 <__assert_func>
 800a8c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8cc:	b10d      	cbz	r5, 800a8d2 <__d2b+0x32>
 800a8ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a8d8:	d023      	beq.n	800a922 <__d2b+0x82>
 800a8da:	4668      	mov	r0, sp
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	f7ff fd14 	bl	800a30a <__lo0bits>
 800a8e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8e6:	b1d0      	cbz	r0, 800a91e <__d2b+0x7e>
 800a8e8:	f1c0 0320 	rsb	r3, r0, #32
 800a8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	40c2      	lsrs	r2, r0
 800a8f4:	6163      	str	r3, [r4, #20]
 800a8f6:	9201      	str	r2, [sp, #4]
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	61a3      	str	r3, [r4, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bf0c      	ite	eq
 800a900:	2201      	moveq	r2, #1
 800a902:	2202      	movne	r2, #2
 800a904:	6122      	str	r2, [r4, #16]
 800a906:	b1a5      	cbz	r5, 800a932 <__d2b+0x92>
 800a908:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a90c:	4405      	add	r5, r0
 800a90e:	603d      	str	r5, [r7, #0]
 800a910:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a914:	6030      	str	r0, [r6, #0]
 800a916:	4620      	mov	r0, r4
 800a918:	b003      	add	sp, #12
 800a91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91e:	6161      	str	r1, [r4, #20]
 800a920:	e7ea      	b.n	800a8f8 <__d2b+0x58>
 800a922:	a801      	add	r0, sp, #4
 800a924:	f7ff fcf1 	bl	800a30a <__lo0bits>
 800a928:	9b01      	ldr	r3, [sp, #4]
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	3020      	adds	r0, #32
 800a92e:	2201      	movs	r2, #1
 800a930:	e7e8      	b.n	800a904 <__d2b+0x64>
 800a932:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a93a:	6038      	str	r0, [r7, #0]
 800a93c:	6918      	ldr	r0, [r3, #16]
 800a93e:	f7ff fcc5 	bl	800a2cc <__hi0bits>
 800a942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a946:	e7e5      	b.n	800a914 <__d2b+0x74>
 800a948:	0800cc85 	.word	0x0800cc85
 800a94c:	0800cc96 	.word	0x0800cc96

0800a950 <__ratio>:
 800a950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a954:	b085      	sub	sp, #20
 800a956:	e9cd 1000 	strd	r1, r0, [sp]
 800a95a:	a902      	add	r1, sp, #8
 800a95c:	f7ff ff56 	bl	800a80c <__b2d>
 800a960:	9800      	ldr	r0, [sp, #0]
 800a962:	a903      	add	r1, sp, #12
 800a964:	ec55 4b10 	vmov	r4, r5, d0
 800a968:	f7ff ff50 	bl	800a80c <__b2d>
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	6919      	ldr	r1, [r3, #16]
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	1ac9      	subs	r1, r1, r3
 800a976:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	ec5b ab10 	vmov	sl, fp, d0
 800a980:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a984:	2b00      	cmp	r3, #0
 800a986:	bfce      	itee	gt
 800a988:	462a      	movgt	r2, r5
 800a98a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a98e:	465a      	movle	r2, fp
 800a990:	462f      	mov	r7, r5
 800a992:	46d9      	mov	r9, fp
 800a994:	bfcc      	ite	gt
 800a996:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a99a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a99e:	464b      	mov	r3, r9
 800a9a0:	4652      	mov	r2, sl
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 ff59 	bl	800085c <__aeabi_ddiv>
 800a9aa:	ec41 0b10 	vmov	d0, r0, r1
 800a9ae:	b005      	add	sp, #20
 800a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9b4 <__copybits>:
 800a9b4:	3901      	subs	r1, #1
 800a9b6:	b570      	push	{r4, r5, r6, lr}
 800a9b8:	1149      	asrs	r1, r1, #5
 800a9ba:	6914      	ldr	r4, [r2, #16]
 800a9bc:	3101      	adds	r1, #1
 800a9be:	f102 0314 	add.w	r3, r2, #20
 800a9c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ca:	1f05      	subs	r5, r0, #4
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d30c      	bcc.n	800a9ea <__copybits+0x36>
 800a9d0:	1aa3      	subs	r3, r4, r2
 800a9d2:	3b11      	subs	r3, #17
 800a9d4:	f023 0303 	bic.w	r3, r3, #3
 800a9d8:	3211      	adds	r2, #17
 800a9da:	42a2      	cmp	r2, r4
 800a9dc:	bf88      	it	hi
 800a9de:	2300      	movhi	r3, #0
 800a9e0:	4418      	add	r0, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	4288      	cmp	r0, r1
 800a9e6:	d305      	bcc.n	800a9f4 <__copybits+0x40>
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9ee:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9f2:	e7eb      	b.n	800a9cc <__copybits+0x18>
 800a9f4:	f840 3b04 	str.w	r3, [r0], #4
 800a9f8:	e7f4      	b.n	800a9e4 <__copybits+0x30>

0800a9fa <__any_on>:
 800a9fa:	f100 0214 	add.w	r2, r0, #20
 800a9fe:	6900      	ldr	r0, [r0, #16]
 800aa00:	114b      	asrs	r3, r1, #5
 800aa02:	4298      	cmp	r0, r3
 800aa04:	b510      	push	{r4, lr}
 800aa06:	db11      	blt.n	800aa2c <__any_on+0x32>
 800aa08:	dd0a      	ble.n	800aa20 <__any_on+0x26>
 800aa0a:	f011 011f 	ands.w	r1, r1, #31
 800aa0e:	d007      	beq.n	800aa20 <__any_on+0x26>
 800aa10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa14:	fa24 f001 	lsr.w	r0, r4, r1
 800aa18:	fa00 f101 	lsl.w	r1, r0, r1
 800aa1c:	428c      	cmp	r4, r1
 800aa1e:	d10b      	bne.n	800aa38 <__any_on+0x3e>
 800aa20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d803      	bhi.n	800aa30 <__any_on+0x36>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	bd10      	pop	{r4, pc}
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	e7f7      	b.n	800aa20 <__any_on+0x26>
 800aa30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d0f5      	beq.n	800aa24 <__any_on+0x2a>
 800aa38:	2001      	movs	r0, #1
 800aa3a:	e7f6      	b.n	800aa2a <__any_on+0x30>

0800aa3c <sulp>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	460d      	mov	r5, r1
 800aa42:	ec45 4b10 	vmov	d0, r4, r5
 800aa46:	4616      	mov	r6, r2
 800aa48:	f7ff feba 	bl	800a7c0 <__ulp>
 800aa4c:	ec51 0b10 	vmov	r0, r1, d0
 800aa50:	b17e      	cbz	r6, 800aa72 <sulp+0x36>
 800aa52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd09      	ble.n	800aa72 <sulp+0x36>
 800aa5e:	051b      	lsls	r3, r3, #20
 800aa60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa64:	2400      	movs	r4, #0
 800aa66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fdcb 	bl	8000608 <__aeabi_dmul>
 800aa72:	ec41 0b10 	vmov	d0, r0, r1
 800aa76:	bd70      	pop	{r4, r5, r6, pc}

0800aa78 <_strtod_l>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	b09f      	sub	sp, #124	@ 0x7c
 800aa7e:	460c      	mov	r4, r1
 800aa80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa82:	2200      	movs	r2, #0
 800aa84:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa86:	9005      	str	r0, [sp, #20]
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	f04f 0b00 	mov.w	fp, #0
 800aa90:	460a      	mov	r2, r1
 800aa92:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa94:	7811      	ldrb	r1, [r2, #0]
 800aa96:	292b      	cmp	r1, #43	@ 0x2b
 800aa98:	d04a      	beq.n	800ab30 <_strtod_l+0xb8>
 800aa9a:	d838      	bhi.n	800ab0e <_strtod_l+0x96>
 800aa9c:	290d      	cmp	r1, #13
 800aa9e:	d832      	bhi.n	800ab06 <_strtod_l+0x8e>
 800aaa0:	2908      	cmp	r1, #8
 800aaa2:	d832      	bhi.n	800ab0a <_strtod_l+0x92>
 800aaa4:	2900      	cmp	r1, #0
 800aaa6:	d03b      	beq.n	800ab20 <_strtod_l+0xa8>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aaae:	782a      	ldrb	r2, [r5, #0]
 800aab0:	2a30      	cmp	r2, #48	@ 0x30
 800aab2:	f040 80b2 	bne.w	800ac1a <_strtod_l+0x1a2>
 800aab6:	786a      	ldrb	r2, [r5, #1]
 800aab8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aabc:	2a58      	cmp	r2, #88	@ 0x58
 800aabe:	d16e      	bne.n	800ab9e <_strtod_l+0x126>
 800aac0:	9302      	str	r3, [sp, #8]
 800aac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	ab1a      	add	r3, sp, #104	@ 0x68
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	4a8f      	ldr	r2, [pc, #572]	@ (800ad08 <_strtod_l+0x290>)
 800aacc:	9805      	ldr	r0, [sp, #20]
 800aace:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aad0:	a919      	add	r1, sp, #100	@ 0x64
 800aad2:	f001 f91b 	bl	800bd0c <__gethex>
 800aad6:	f010 060f 	ands.w	r6, r0, #15
 800aada:	4604      	mov	r4, r0
 800aadc:	d005      	beq.n	800aaea <_strtod_l+0x72>
 800aade:	2e06      	cmp	r6, #6
 800aae0:	d128      	bne.n	800ab34 <_strtod_l+0xbc>
 800aae2:	3501      	adds	r5, #1
 800aae4:	2300      	movs	r3, #0
 800aae6:	9519      	str	r5, [sp, #100]	@ 0x64
 800aae8:	930e      	str	r3, [sp, #56]	@ 0x38
 800aaea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f040 858e 	bne.w	800b60e <_strtod_l+0xb96>
 800aaf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf4:	b1cb      	cbz	r3, 800ab2a <_strtod_l+0xb2>
 800aaf6:	4652      	mov	r2, sl
 800aaf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aafc:	ec43 2b10 	vmov	d0, r2, r3
 800ab00:	b01f      	add	sp, #124	@ 0x7c
 800ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab06:	2920      	cmp	r1, #32
 800ab08:	d1ce      	bne.n	800aaa8 <_strtod_l+0x30>
 800ab0a:	3201      	adds	r2, #1
 800ab0c:	e7c1      	b.n	800aa92 <_strtod_l+0x1a>
 800ab0e:	292d      	cmp	r1, #45	@ 0x2d
 800ab10:	d1ca      	bne.n	800aaa8 <_strtod_l+0x30>
 800ab12:	2101      	movs	r1, #1
 800ab14:	910e      	str	r1, [sp, #56]	@ 0x38
 800ab16:	1c51      	adds	r1, r2, #1
 800ab18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab1a:	7852      	ldrb	r2, [r2, #1]
 800ab1c:	2a00      	cmp	r2, #0
 800ab1e:	d1c5      	bne.n	800aaac <_strtod_l+0x34>
 800ab20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f040 8570 	bne.w	800b60a <_strtod_l+0xb92>
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	e7e5      	b.n	800aafc <_strtod_l+0x84>
 800ab30:	2100      	movs	r1, #0
 800ab32:	e7ef      	b.n	800ab14 <_strtod_l+0x9c>
 800ab34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab36:	b13a      	cbz	r2, 800ab48 <_strtod_l+0xd0>
 800ab38:	2135      	movs	r1, #53	@ 0x35
 800ab3a:	a81c      	add	r0, sp, #112	@ 0x70
 800ab3c:	f7ff ff3a 	bl	800a9b4 <__copybits>
 800ab40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab42:	9805      	ldr	r0, [sp, #20]
 800ab44:	f7ff fb10 	bl	800a168 <_Bfree>
 800ab48:	3e01      	subs	r6, #1
 800ab4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab4c:	2e04      	cmp	r6, #4
 800ab4e:	d806      	bhi.n	800ab5e <_strtod_l+0xe6>
 800ab50:	e8df f006 	tbb	[pc, r6]
 800ab54:	201d0314 	.word	0x201d0314
 800ab58:	14          	.byte	0x14
 800ab59:	00          	.byte	0x00
 800ab5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab5e:	05e1      	lsls	r1, r4, #23
 800ab60:	bf48      	it	mi
 800ab62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab6a:	0d1b      	lsrs	r3, r3, #20
 800ab6c:	051b      	lsls	r3, r3, #20
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1bb      	bne.n	800aaea <_strtod_l+0x72>
 800ab72:	f7fe fb1f 	bl	80091b4 <__errno>
 800ab76:	2322      	movs	r3, #34	@ 0x22
 800ab78:	6003      	str	r3, [r0, #0]
 800ab7a:	e7b6      	b.n	800aaea <_strtod_l+0x72>
 800ab7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab8c:	e7e7      	b.n	800ab5e <_strtod_l+0xe6>
 800ab8e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ad10 <_strtod_l+0x298>
 800ab92:	e7e4      	b.n	800ab5e <_strtod_l+0xe6>
 800ab94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab98:	f04f 3aff 	mov.w	sl, #4294967295
 800ab9c:	e7df      	b.n	800ab5e <_strtod_l+0xe6>
 800ab9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b30      	cmp	r3, #48	@ 0x30
 800aba8:	d0f9      	beq.n	800ab9e <_strtod_l+0x126>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d09d      	beq.n	800aaea <_strtod_l+0x72>
 800abae:	2301      	movs	r3, #1
 800abb0:	2700      	movs	r7, #0
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abb6:	930c      	str	r3, [sp, #48]	@ 0x30
 800abb8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800abba:	46b9      	mov	r9, r7
 800abbc:	220a      	movs	r2, #10
 800abbe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abc0:	7805      	ldrb	r5, [r0, #0]
 800abc2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abc6:	b2d9      	uxtb	r1, r3
 800abc8:	2909      	cmp	r1, #9
 800abca:	d928      	bls.n	800ac1e <_strtod_l+0x1a6>
 800abcc:	494f      	ldr	r1, [pc, #316]	@ (800ad0c <_strtod_l+0x294>)
 800abce:	2201      	movs	r2, #1
 800abd0:	f000 ffd6 	bl	800bb80 <strncmp>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d032      	beq.n	800ac3e <_strtod_l+0x1c6>
 800abd8:	2000      	movs	r0, #0
 800abda:	462a      	mov	r2, r5
 800abdc:	900a      	str	r0, [sp, #40]	@ 0x28
 800abde:	464d      	mov	r5, r9
 800abe0:	4603      	mov	r3, r0
 800abe2:	2a65      	cmp	r2, #101	@ 0x65
 800abe4:	d001      	beq.n	800abea <_strtod_l+0x172>
 800abe6:	2a45      	cmp	r2, #69	@ 0x45
 800abe8:	d114      	bne.n	800ac14 <_strtod_l+0x19c>
 800abea:	b91d      	cbnz	r5, 800abf4 <_strtod_l+0x17c>
 800abec:	9a08      	ldr	r2, [sp, #32]
 800abee:	4302      	orrs	r2, r0
 800abf0:	d096      	beq.n	800ab20 <_strtod_l+0xa8>
 800abf2:	2500      	movs	r5, #0
 800abf4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800abf6:	1c62      	adds	r2, r4, #1
 800abf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800abfa:	7862      	ldrb	r2, [r4, #1]
 800abfc:	2a2b      	cmp	r2, #43	@ 0x2b
 800abfe:	d07a      	beq.n	800acf6 <_strtod_l+0x27e>
 800ac00:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac02:	d07e      	beq.n	800ad02 <_strtod_l+0x28a>
 800ac04:	f04f 0c00 	mov.w	ip, #0
 800ac08:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac0c:	2909      	cmp	r1, #9
 800ac0e:	f240 8085 	bls.w	800ad1c <_strtod_l+0x2a4>
 800ac12:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac14:	f04f 0800 	mov.w	r8, #0
 800ac18:	e0a5      	b.n	800ad66 <_strtod_l+0x2ee>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e7c8      	b.n	800abb0 <_strtod_l+0x138>
 800ac1e:	f1b9 0f08 	cmp.w	r9, #8
 800ac22:	bfd8      	it	le
 800ac24:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ac26:	f100 0001 	add.w	r0, r0, #1
 800ac2a:	bfda      	itte	le
 800ac2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac30:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ac32:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ac36:	f109 0901 	add.w	r9, r9, #1
 800ac3a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac3c:	e7bf      	b.n	800abbe <_strtod_l+0x146>
 800ac3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac44:	785a      	ldrb	r2, [r3, #1]
 800ac46:	f1b9 0f00 	cmp.w	r9, #0
 800ac4a:	d03b      	beq.n	800acc4 <_strtod_l+0x24c>
 800ac4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac4e:	464d      	mov	r5, r9
 800ac50:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac54:	2b09      	cmp	r3, #9
 800ac56:	d912      	bls.n	800ac7e <_strtod_l+0x206>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e7c2      	b.n	800abe2 <_strtod_l+0x16a>
 800ac5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac62:	785a      	ldrb	r2, [r3, #1]
 800ac64:	3001      	adds	r0, #1
 800ac66:	2a30      	cmp	r2, #48	@ 0x30
 800ac68:	d0f8      	beq.n	800ac5c <_strtod_l+0x1e4>
 800ac6a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac6e:	2b08      	cmp	r3, #8
 800ac70:	f200 84d2 	bhi.w	800b618 <_strtod_l+0xba0>
 800ac74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac76:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac78:	2000      	movs	r0, #0
 800ac7a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac7c:	4605      	mov	r5, r0
 800ac7e:	3a30      	subs	r2, #48	@ 0x30
 800ac80:	f100 0301 	add.w	r3, r0, #1
 800ac84:	d018      	beq.n	800acb8 <_strtod_l+0x240>
 800ac86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac88:	4419      	add	r1, r3
 800ac8a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac8c:	462e      	mov	r6, r5
 800ac8e:	f04f 0e0a 	mov.w	lr, #10
 800ac92:	1c71      	adds	r1, r6, #1
 800ac94:	eba1 0c05 	sub.w	ip, r1, r5
 800ac98:	4563      	cmp	r3, ip
 800ac9a:	dc15      	bgt.n	800acc8 <_strtod_l+0x250>
 800ac9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aca0:	182b      	adds	r3, r5, r0
 800aca2:	2b08      	cmp	r3, #8
 800aca4:	f105 0501 	add.w	r5, r5, #1
 800aca8:	4405      	add	r5, r0
 800acaa:	dc1a      	bgt.n	800ace2 <_strtod_l+0x26a>
 800acac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acae:	230a      	movs	r3, #10
 800acb0:	fb03 2301 	mla	r3, r3, r1, r2
 800acb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acb6:	2300      	movs	r3, #0
 800acb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acba:	1c51      	adds	r1, r2, #1
 800acbc:	9119      	str	r1, [sp, #100]	@ 0x64
 800acbe:	7852      	ldrb	r2, [r2, #1]
 800acc0:	4618      	mov	r0, r3
 800acc2:	e7c5      	b.n	800ac50 <_strtod_l+0x1d8>
 800acc4:	4648      	mov	r0, r9
 800acc6:	e7ce      	b.n	800ac66 <_strtod_l+0x1ee>
 800acc8:	2e08      	cmp	r6, #8
 800acca:	dc05      	bgt.n	800acd8 <_strtod_l+0x260>
 800accc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800acce:	fb0e f606 	mul.w	r6, lr, r6
 800acd2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800acd4:	460e      	mov	r6, r1
 800acd6:	e7dc      	b.n	800ac92 <_strtod_l+0x21a>
 800acd8:	2910      	cmp	r1, #16
 800acda:	bfd8      	it	le
 800acdc:	fb0e f707 	mulle.w	r7, lr, r7
 800ace0:	e7f8      	b.n	800acd4 <_strtod_l+0x25c>
 800ace2:	2b0f      	cmp	r3, #15
 800ace4:	bfdc      	itt	le
 800ace6:	230a      	movle	r3, #10
 800ace8:	fb03 2707 	mlale	r7, r3, r7, r2
 800acec:	e7e3      	b.n	800acb6 <_strtod_l+0x23e>
 800acee:	2300      	movs	r3, #0
 800acf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf2:	2301      	movs	r3, #1
 800acf4:	e77a      	b.n	800abec <_strtod_l+0x174>
 800acf6:	f04f 0c00 	mov.w	ip, #0
 800acfa:	1ca2      	adds	r2, r4, #2
 800acfc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acfe:	78a2      	ldrb	r2, [r4, #2]
 800ad00:	e782      	b.n	800ac08 <_strtod_l+0x190>
 800ad02:	f04f 0c01 	mov.w	ip, #1
 800ad06:	e7f8      	b.n	800acfa <_strtod_l+0x282>
 800ad08:	0800cebc 	.word	0x0800cebc
 800ad0c:	0800ccef 	.word	0x0800ccef
 800ad10:	7ff00000 	.word	0x7ff00000
 800ad14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad16:	1c51      	adds	r1, r2, #1
 800ad18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad1a:	7852      	ldrb	r2, [r2, #1]
 800ad1c:	2a30      	cmp	r2, #48	@ 0x30
 800ad1e:	d0f9      	beq.n	800ad14 <_strtod_l+0x29c>
 800ad20:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad24:	2908      	cmp	r1, #8
 800ad26:	f63f af75 	bhi.w	800ac14 <_strtod_l+0x19c>
 800ad2a:	3a30      	subs	r2, #48	@ 0x30
 800ad2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad30:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad32:	f04f 080a 	mov.w	r8, #10
 800ad36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad38:	1c56      	adds	r6, r2, #1
 800ad3a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad3c:	7852      	ldrb	r2, [r2, #1]
 800ad3e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad42:	f1be 0f09 	cmp.w	lr, #9
 800ad46:	d939      	bls.n	800adbc <_strtod_l+0x344>
 800ad48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad4a:	1a76      	subs	r6, r6, r1
 800ad4c:	2e08      	cmp	r6, #8
 800ad4e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad52:	dc03      	bgt.n	800ad5c <_strtod_l+0x2e4>
 800ad54:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad56:	4588      	cmp	r8, r1
 800ad58:	bfa8      	it	ge
 800ad5a:	4688      	movge	r8, r1
 800ad5c:	f1bc 0f00 	cmp.w	ip, #0
 800ad60:	d001      	beq.n	800ad66 <_strtod_l+0x2ee>
 800ad62:	f1c8 0800 	rsb	r8, r8, #0
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	d14e      	bne.n	800ae08 <_strtod_l+0x390>
 800ad6a:	9908      	ldr	r1, [sp, #32]
 800ad6c:	4308      	orrs	r0, r1
 800ad6e:	f47f aebc 	bne.w	800aaea <_strtod_l+0x72>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f47f aed4 	bne.w	800ab20 <_strtod_l+0xa8>
 800ad78:	2a69      	cmp	r2, #105	@ 0x69
 800ad7a:	d028      	beq.n	800adce <_strtod_l+0x356>
 800ad7c:	dc25      	bgt.n	800adca <_strtod_l+0x352>
 800ad7e:	2a49      	cmp	r2, #73	@ 0x49
 800ad80:	d025      	beq.n	800adce <_strtod_l+0x356>
 800ad82:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad84:	f47f aecc 	bne.w	800ab20 <_strtod_l+0xa8>
 800ad88:	499a      	ldr	r1, [pc, #616]	@ (800aff4 <_strtod_l+0x57c>)
 800ad8a:	a819      	add	r0, sp, #100	@ 0x64
 800ad8c:	f001 f9e0 	bl	800c150 <__match>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f43f aec5 	beq.w	800ab20 <_strtod_l+0xa8>
 800ad96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b28      	cmp	r3, #40	@ 0x28
 800ad9c:	d12e      	bne.n	800adfc <_strtod_l+0x384>
 800ad9e:	4996      	ldr	r1, [pc, #600]	@ (800aff8 <_strtod_l+0x580>)
 800ada0:	aa1c      	add	r2, sp, #112	@ 0x70
 800ada2:	a819      	add	r0, sp, #100	@ 0x64
 800ada4:	f001 f9e8 	bl	800c178 <__hexnan>
 800ada8:	2805      	cmp	r0, #5
 800adaa:	d127      	bne.n	800adfc <_strtod_l+0x384>
 800adac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adb2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800adb6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800adba:	e696      	b.n	800aaea <_strtod_l+0x72>
 800adbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adbe:	fb08 2101 	mla	r1, r8, r1, r2
 800adc2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc8:	e7b5      	b.n	800ad36 <_strtod_l+0x2be>
 800adca:	2a6e      	cmp	r2, #110	@ 0x6e
 800adcc:	e7da      	b.n	800ad84 <_strtod_l+0x30c>
 800adce:	498b      	ldr	r1, [pc, #556]	@ (800affc <_strtod_l+0x584>)
 800add0:	a819      	add	r0, sp, #100	@ 0x64
 800add2:	f001 f9bd 	bl	800c150 <__match>
 800add6:	2800      	cmp	r0, #0
 800add8:	f43f aea2 	beq.w	800ab20 <_strtod_l+0xa8>
 800addc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adde:	4988      	ldr	r1, [pc, #544]	@ (800b000 <_strtod_l+0x588>)
 800ade0:	3b01      	subs	r3, #1
 800ade2:	a819      	add	r0, sp, #100	@ 0x64
 800ade4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ade6:	f001 f9b3 	bl	800c150 <__match>
 800adea:	b910      	cbnz	r0, 800adf2 <_strtod_l+0x37a>
 800adec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adee:	3301      	adds	r3, #1
 800adf0:	9319      	str	r3, [sp, #100]	@ 0x64
 800adf2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b010 <_strtod_l+0x598>
 800adf6:	f04f 0a00 	mov.w	sl, #0
 800adfa:	e676      	b.n	800aaea <_strtod_l+0x72>
 800adfc:	4881      	ldr	r0, [pc, #516]	@ (800b004 <_strtod_l+0x58c>)
 800adfe:	f000 fee3 	bl	800bbc8 <nan>
 800ae02:	ec5b ab10 	vmov	sl, fp, d0
 800ae06:	e670      	b.n	800aaea <_strtod_l+0x72>
 800ae08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ae0c:	eba8 0303 	sub.w	r3, r8, r3
 800ae10:	f1b9 0f00 	cmp.w	r9, #0
 800ae14:	bf08      	it	eq
 800ae16:	46a9      	moveq	r9, r5
 800ae18:	2d10      	cmp	r5, #16
 800ae1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae1c:	462c      	mov	r4, r5
 800ae1e:	bfa8      	it	ge
 800ae20:	2410      	movge	r4, #16
 800ae22:	f7f5 fb77 	bl	8000514 <__aeabi_ui2d>
 800ae26:	2d09      	cmp	r5, #9
 800ae28:	4682      	mov	sl, r0
 800ae2a:	468b      	mov	fp, r1
 800ae2c:	dc13      	bgt.n	800ae56 <_strtod_l+0x3de>
 800ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f43f ae5a 	beq.w	800aaea <_strtod_l+0x72>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	dd78      	ble.n	800af2c <_strtod_l+0x4b4>
 800ae3a:	2b16      	cmp	r3, #22
 800ae3c:	dc5f      	bgt.n	800aefe <_strtod_l+0x486>
 800ae3e:	4972      	ldr	r1, [pc, #456]	@ (800b008 <_strtod_l+0x590>)
 800ae40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae48:	4652      	mov	r2, sl
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	4682      	mov	sl, r0
 800ae52:	468b      	mov	fp, r1
 800ae54:	e649      	b.n	800aaea <_strtod_l+0x72>
 800ae56:	4b6c      	ldr	r3, [pc, #432]	@ (800b008 <_strtod_l+0x590>)
 800ae58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae60:	f7f5 fbd2 	bl	8000608 <__aeabi_dmul>
 800ae64:	4682      	mov	sl, r0
 800ae66:	4638      	mov	r0, r7
 800ae68:	468b      	mov	fp, r1
 800ae6a:	f7f5 fb53 	bl	8000514 <__aeabi_ui2d>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	4650      	mov	r0, sl
 800ae74:	4659      	mov	r1, fp
 800ae76:	f7f5 fa11 	bl	800029c <__adddf3>
 800ae7a:	2d0f      	cmp	r5, #15
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	468b      	mov	fp, r1
 800ae80:	ddd5      	ble.n	800ae2e <_strtod_l+0x3b6>
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	1b2c      	subs	r4, r5, r4
 800ae86:	441c      	add	r4, r3
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	f340 8093 	ble.w	800afb4 <_strtod_l+0x53c>
 800ae8e:	f014 030f 	ands.w	r3, r4, #15
 800ae92:	d00a      	beq.n	800aeaa <_strtod_l+0x432>
 800ae94:	495c      	ldr	r1, [pc, #368]	@ (800b008 <_strtod_l+0x590>)
 800ae96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea2:	f7f5 fbb1 	bl	8000608 <__aeabi_dmul>
 800aea6:	4682      	mov	sl, r0
 800aea8:	468b      	mov	fp, r1
 800aeaa:	f034 040f 	bics.w	r4, r4, #15
 800aeae:	d073      	beq.n	800af98 <_strtod_l+0x520>
 800aeb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aeb4:	dd49      	ble.n	800af4a <_strtod_l+0x4d2>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	46a0      	mov	r8, r4
 800aeba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aebc:	46a1      	mov	r9, r4
 800aebe:	9a05      	ldr	r2, [sp, #20]
 800aec0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b010 <_strtod_l+0x598>
 800aec4:	2322      	movs	r3, #34	@ 0x22
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f43f ae0b 	beq.w	800aaea <_strtod_l+0x72>
 800aed4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aed6:	9805      	ldr	r0, [sp, #20]
 800aed8:	f7ff f946 	bl	800a168 <_Bfree>
 800aedc:	9805      	ldr	r0, [sp, #20]
 800aede:	4649      	mov	r1, r9
 800aee0:	f7ff f942 	bl	800a168 <_Bfree>
 800aee4:	9805      	ldr	r0, [sp, #20]
 800aee6:	4641      	mov	r1, r8
 800aee8:	f7ff f93e 	bl	800a168 <_Bfree>
 800aeec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aeee:	9805      	ldr	r0, [sp, #20]
 800aef0:	f7ff f93a 	bl	800a168 <_Bfree>
 800aef4:	9805      	ldr	r0, [sp, #20]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f7ff f936 	bl	800a168 <_Bfree>
 800aefc:	e5f5      	b.n	800aaea <_strtod_l+0x72>
 800aefe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af04:	4293      	cmp	r3, r2
 800af06:	dbbc      	blt.n	800ae82 <_strtod_l+0x40a>
 800af08:	4c3f      	ldr	r4, [pc, #252]	@ (800b008 <_strtod_l+0x590>)
 800af0a:	f1c5 050f 	rsb	r5, r5, #15
 800af0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af1a:	f7f5 fb75 	bl	8000608 <__aeabi_dmul>
 800af1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af20:	1b5d      	subs	r5, r3, r5
 800af22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af2a:	e78f      	b.n	800ae4c <_strtod_l+0x3d4>
 800af2c:	3316      	adds	r3, #22
 800af2e:	dba8      	blt.n	800ae82 <_strtod_l+0x40a>
 800af30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af32:	eba3 0808 	sub.w	r8, r3, r8
 800af36:	4b34      	ldr	r3, [pc, #208]	@ (800b008 <_strtod_l+0x590>)
 800af38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af40:	4650      	mov	r0, sl
 800af42:	4659      	mov	r1, fp
 800af44:	f7f5 fc8a 	bl	800085c <__aeabi_ddiv>
 800af48:	e782      	b.n	800ae50 <_strtod_l+0x3d8>
 800af4a:	2300      	movs	r3, #0
 800af4c:	4f2f      	ldr	r7, [pc, #188]	@ (800b00c <_strtod_l+0x594>)
 800af4e:	1124      	asrs	r4, r4, #4
 800af50:	4650      	mov	r0, sl
 800af52:	4659      	mov	r1, fp
 800af54:	461e      	mov	r6, r3
 800af56:	2c01      	cmp	r4, #1
 800af58:	dc21      	bgt.n	800af9e <_strtod_l+0x526>
 800af5a:	b10b      	cbz	r3, 800af60 <_strtod_l+0x4e8>
 800af5c:	4682      	mov	sl, r0
 800af5e:	468b      	mov	fp, r1
 800af60:	492a      	ldr	r1, [pc, #168]	@ (800b00c <_strtod_l+0x594>)
 800af62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af6a:	4652      	mov	r2, sl
 800af6c:	465b      	mov	r3, fp
 800af6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af72:	f7f5 fb49 	bl	8000608 <__aeabi_dmul>
 800af76:	4b26      	ldr	r3, [pc, #152]	@ (800b010 <_strtod_l+0x598>)
 800af78:	460a      	mov	r2, r1
 800af7a:	400b      	ands	r3, r1
 800af7c:	4925      	ldr	r1, [pc, #148]	@ (800b014 <_strtod_l+0x59c>)
 800af7e:	428b      	cmp	r3, r1
 800af80:	4682      	mov	sl, r0
 800af82:	d898      	bhi.n	800aeb6 <_strtod_l+0x43e>
 800af84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf86      	itte	hi
 800af8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b018 <_strtod_l+0x5a0>
 800af90:	f04f 3aff 	movhi.w	sl, #4294967295
 800af94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af98:	2300      	movs	r3, #0
 800af9a:	9308      	str	r3, [sp, #32]
 800af9c:	e076      	b.n	800b08c <_strtod_l+0x614>
 800af9e:	07e2      	lsls	r2, r4, #31
 800afa0:	d504      	bpl.n	800afac <_strtod_l+0x534>
 800afa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	2301      	movs	r3, #1
 800afac:	3601      	adds	r6, #1
 800afae:	1064      	asrs	r4, r4, #1
 800afb0:	3708      	adds	r7, #8
 800afb2:	e7d0      	b.n	800af56 <_strtod_l+0x4de>
 800afb4:	d0f0      	beq.n	800af98 <_strtod_l+0x520>
 800afb6:	4264      	negs	r4, r4
 800afb8:	f014 020f 	ands.w	r2, r4, #15
 800afbc:	d00a      	beq.n	800afd4 <_strtod_l+0x55c>
 800afbe:	4b12      	ldr	r3, [pc, #72]	@ (800b008 <_strtod_l+0x590>)
 800afc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afc4:	4650      	mov	r0, sl
 800afc6:	4659      	mov	r1, fp
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 fc46 	bl	800085c <__aeabi_ddiv>
 800afd0:	4682      	mov	sl, r0
 800afd2:	468b      	mov	fp, r1
 800afd4:	1124      	asrs	r4, r4, #4
 800afd6:	d0df      	beq.n	800af98 <_strtod_l+0x520>
 800afd8:	2c1f      	cmp	r4, #31
 800afda:	dd1f      	ble.n	800b01c <_strtod_l+0x5a4>
 800afdc:	2400      	movs	r4, #0
 800afde:	46a0      	mov	r8, r4
 800afe0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800afe2:	46a1      	mov	r9, r4
 800afe4:	9a05      	ldr	r2, [sp, #20]
 800afe6:	2322      	movs	r3, #34	@ 0x22
 800afe8:	f04f 0a00 	mov.w	sl, #0
 800afec:	f04f 0b00 	mov.w	fp, #0
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	e76b      	b.n	800aecc <_strtod_l+0x454>
 800aff4:	0800cbdd 	.word	0x0800cbdd
 800aff8:	0800cea8 	.word	0x0800cea8
 800affc:	0800cbd5 	.word	0x0800cbd5
 800b000:	0800cc0c 	.word	0x0800cc0c
 800b004:	0800cd45 	.word	0x0800cd45
 800b008:	0800cde0 	.word	0x0800cde0
 800b00c:	0800cdb8 	.word	0x0800cdb8
 800b010:	7ff00000 	.word	0x7ff00000
 800b014:	7ca00000 	.word	0x7ca00000
 800b018:	7fefffff 	.word	0x7fefffff
 800b01c:	f014 0310 	ands.w	r3, r4, #16
 800b020:	bf18      	it	ne
 800b022:	236a      	movne	r3, #106	@ 0x6a
 800b024:	4ea9      	ldr	r6, [pc, #676]	@ (800b2cc <_strtod_l+0x854>)
 800b026:	9308      	str	r3, [sp, #32]
 800b028:	4650      	mov	r0, sl
 800b02a:	4659      	mov	r1, fp
 800b02c:	2300      	movs	r3, #0
 800b02e:	07e7      	lsls	r7, r4, #31
 800b030:	d504      	bpl.n	800b03c <_strtod_l+0x5c4>
 800b032:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b036:	f7f5 fae7 	bl	8000608 <__aeabi_dmul>
 800b03a:	2301      	movs	r3, #1
 800b03c:	1064      	asrs	r4, r4, #1
 800b03e:	f106 0608 	add.w	r6, r6, #8
 800b042:	d1f4      	bne.n	800b02e <_strtod_l+0x5b6>
 800b044:	b10b      	cbz	r3, 800b04a <_strtod_l+0x5d2>
 800b046:	4682      	mov	sl, r0
 800b048:	468b      	mov	fp, r1
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	b1b3      	cbz	r3, 800b07c <_strtod_l+0x604>
 800b04e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b052:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b056:	2b00      	cmp	r3, #0
 800b058:	4659      	mov	r1, fp
 800b05a:	dd0f      	ble.n	800b07c <_strtod_l+0x604>
 800b05c:	2b1f      	cmp	r3, #31
 800b05e:	dd56      	ble.n	800b10e <_strtod_l+0x696>
 800b060:	2b34      	cmp	r3, #52	@ 0x34
 800b062:	bfde      	ittt	le
 800b064:	f04f 33ff 	movle.w	r3, #4294967295
 800b068:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b06c:	4093      	lslle	r3, r2
 800b06e:	f04f 0a00 	mov.w	sl, #0
 800b072:	bfcc      	ite	gt
 800b074:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b078:	ea03 0b01 	andle.w	fp, r3, r1
 800b07c:	2200      	movs	r2, #0
 800b07e:	2300      	movs	r3, #0
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	f7f5 fd28 	bl	8000ad8 <__aeabi_dcmpeq>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1a7      	bne.n	800afdc <_strtod_l+0x564>
 800b08c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b092:	9805      	ldr	r0, [sp, #20]
 800b094:	462b      	mov	r3, r5
 800b096:	464a      	mov	r2, r9
 800b098:	f7ff f8ce 	bl	800a238 <__s2b>
 800b09c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af09 	beq.w	800aeb6 <_strtod_l+0x43e>
 800b0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	eba3 0308 	sub.w	r3, r3, r8
 800b0ae:	bfa8      	it	ge
 800b0b0:	2300      	movge	r3, #0
 800b0b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0b4:	2400      	movs	r4, #0
 800b0b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0bc:	46a0      	mov	r8, r4
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	9805      	ldr	r0, [sp, #20]
 800b0c2:	6859      	ldr	r1, [r3, #4]
 800b0c4:	f7ff f810 	bl	800a0e8 <_Balloc>
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f43f aef7 	beq.w	800aebe <_strtod_l+0x446>
 800b0d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0d2:	691a      	ldr	r2, [r3, #16]
 800b0d4:	3202      	adds	r2, #2
 800b0d6:	f103 010c 	add.w	r1, r3, #12
 800b0da:	0092      	lsls	r2, r2, #2
 800b0dc:	300c      	adds	r0, #12
 800b0de:	f7fe f896 	bl	800920e <memcpy>
 800b0e2:	ec4b ab10 	vmov	d0, sl, fp
 800b0e6:	9805      	ldr	r0, [sp, #20]
 800b0e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0ea:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0f0:	f7ff fbd6 	bl	800a8a0 <__d2b>
 800b0f4:	901a      	str	r0, [sp, #104]	@ 0x68
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f43f aee1 	beq.w	800aebe <_strtod_l+0x446>
 800b0fc:	9805      	ldr	r0, [sp, #20]
 800b0fe:	2101      	movs	r1, #1
 800b100:	f7ff f930 	bl	800a364 <__i2b>
 800b104:	4680      	mov	r8, r0
 800b106:	b948      	cbnz	r0, 800b11c <_strtod_l+0x6a4>
 800b108:	f04f 0800 	mov.w	r8, #0
 800b10c:	e6d7      	b.n	800aebe <_strtod_l+0x446>
 800b10e:	f04f 32ff 	mov.w	r2, #4294967295
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	ea03 0a0a 	and.w	sl, r3, sl
 800b11a:	e7af      	b.n	800b07c <_strtod_l+0x604>
 800b11c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b11e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b120:	2d00      	cmp	r5, #0
 800b122:	bfab      	itete	ge
 800b124:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b126:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b128:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b12a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b12c:	bfac      	ite	ge
 800b12e:	18ef      	addge	r7, r5, r3
 800b130:	1b5e      	sublt	r6, r3, r5
 800b132:	9b08      	ldr	r3, [sp, #32]
 800b134:	1aed      	subs	r5, r5, r3
 800b136:	4415      	add	r5, r2
 800b138:	4b65      	ldr	r3, [pc, #404]	@ (800b2d0 <_strtod_l+0x858>)
 800b13a:	3d01      	subs	r5, #1
 800b13c:	429d      	cmp	r5, r3
 800b13e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b142:	da50      	bge.n	800b1e6 <_strtod_l+0x76e>
 800b144:	1b5b      	subs	r3, r3, r5
 800b146:	2b1f      	cmp	r3, #31
 800b148:	eba2 0203 	sub.w	r2, r2, r3
 800b14c:	f04f 0101 	mov.w	r1, #1
 800b150:	dc3d      	bgt.n	800b1ce <_strtod_l+0x756>
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b158:	2300      	movs	r3, #0
 800b15a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b15c:	18bd      	adds	r5, r7, r2
 800b15e:	9b08      	ldr	r3, [sp, #32]
 800b160:	42af      	cmp	r7, r5
 800b162:	4416      	add	r6, r2
 800b164:	441e      	add	r6, r3
 800b166:	463b      	mov	r3, r7
 800b168:	bfa8      	it	ge
 800b16a:	462b      	movge	r3, r5
 800b16c:	42b3      	cmp	r3, r6
 800b16e:	bfa8      	it	ge
 800b170:	4633      	movge	r3, r6
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfc2      	ittt	gt
 800b176:	1aed      	subgt	r5, r5, r3
 800b178:	1af6      	subgt	r6, r6, r3
 800b17a:	1aff      	subgt	r7, r7, r3
 800b17c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dd16      	ble.n	800b1b0 <_strtod_l+0x738>
 800b182:	4641      	mov	r1, r8
 800b184:	9805      	ldr	r0, [sp, #20]
 800b186:	461a      	mov	r2, r3
 800b188:	f7ff f9a4 	bl	800a4d4 <__pow5mult>
 800b18c:	4680      	mov	r8, r0
 800b18e:	2800      	cmp	r0, #0
 800b190:	d0ba      	beq.n	800b108 <_strtod_l+0x690>
 800b192:	4601      	mov	r1, r0
 800b194:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b196:	9805      	ldr	r0, [sp, #20]
 800b198:	f7ff f8fa 	bl	800a390 <__multiply>
 800b19c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f43f ae8d 	beq.w	800aebe <_strtod_l+0x446>
 800b1a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	f7fe ffde 	bl	800a168 <_Bfree>
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	dc1d      	bgt.n	800b1f0 <_strtod_l+0x778>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd23      	ble.n	800b202 <_strtod_l+0x78a>
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	f7ff f988 	bl	800a4d4 <__pow5mult>
 800b1c4:	4681      	mov	r9, r0
 800b1c6:	b9e0      	cbnz	r0, 800b202 <_strtod_l+0x78a>
 800b1c8:	f04f 0900 	mov.w	r9, #0
 800b1cc:	e677      	b.n	800aebe <_strtod_l+0x446>
 800b1ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1da:	35e2      	adds	r5, #226	@ 0xe2
 800b1dc:	fa01 f305 	lsl.w	r3, r1, r5
 800b1e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1e4:	e7ba      	b.n	800b15c <_strtod_l+0x6e4>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1ee:	e7b5      	b.n	800b15c <_strtod_l+0x6e4>
 800b1f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1f2:	9805      	ldr	r0, [sp, #20]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	f7ff f9c7 	bl	800a588 <__lshift>
 800b1fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d1d9      	bne.n	800b1b4 <_strtod_l+0x73c>
 800b200:	e65d      	b.n	800aebe <_strtod_l+0x446>
 800b202:	2e00      	cmp	r6, #0
 800b204:	dd07      	ble.n	800b216 <_strtod_l+0x79e>
 800b206:	4649      	mov	r1, r9
 800b208:	9805      	ldr	r0, [sp, #20]
 800b20a:	4632      	mov	r2, r6
 800b20c:	f7ff f9bc 	bl	800a588 <__lshift>
 800b210:	4681      	mov	r9, r0
 800b212:	2800      	cmp	r0, #0
 800b214:	d0d8      	beq.n	800b1c8 <_strtod_l+0x750>
 800b216:	2f00      	cmp	r7, #0
 800b218:	dd08      	ble.n	800b22c <_strtod_l+0x7b4>
 800b21a:	4641      	mov	r1, r8
 800b21c:	9805      	ldr	r0, [sp, #20]
 800b21e:	463a      	mov	r2, r7
 800b220:	f7ff f9b2 	bl	800a588 <__lshift>
 800b224:	4680      	mov	r8, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	f43f ae49 	beq.w	800aebe <_strtod_l+0x446>
 800b22c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	464a      	mov	r2, r9
 800b232:	f7ff fa31 	bl	800a698 <__mdiff>
 800b236:	4604      	mov	r4, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	f43f ae40 	beq.w	800aebe <_strtod_l+0x446>
 800b23e:	68c3      	ldr	r3, [r0, #12]
 800b240:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b242:	2300      	movs	r3, #0
 800b244:	60c3      	str	r3, [r0, #12]
 800b246:	4641      	mov	r1, r8
 800b248:	f7ff fa0a 	bl	800a660 <__mcmp>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	da45      	bge.n	800b2dc <_strtod_l+0x864>
 800b250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b252:	ea53 030a 	orrs.w	r3, r3, sl
 800b256:	d16b      	bne.n	800b330 <_strtod_l+0x8b8>
 800b258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d167      	bne.n	800b330 <_strtod_l+0x8b8>
 800b260:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b264:	0d1b      	lsrs	r3, r3, #20
 800b266:	051b      	lsls	r3, r3, #20
 800b268:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b26c:	d960      	bls.n	800b330 <_strtod_l+0x8b8>
 800b26e:	6963      	ldr	r3, [r4, #20]
 800b270:	b913      	cbnz	r3, 800b278 <_strtod_l+0x800>
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	2b01      	cmp	r3, #1
 800b276:	dd5b      	ble.n	800b330 <_strtod_l+0x8b8>
 800b278:	4621      	mov	r1, r4
 800b27a:	2201      	movs	r2, #1
 800b27c:	9805      	ldr	r0, [sp, #20]
 800b27e:	f7ff f983 	bl	800a588 <__lshift>
 800b282:	4641      	mov	r1, r8
 800b284:	4604      	mov	r4, r0
 800b286:	f7ff f9eb 	bl	800a660 <__mcmp>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	dd50      	ble.n	800b330 <_strtod_l+0x8b8>
 800b28e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b292:	9a08      	ldr	r2, [sp, #32]
 800b294:	0d1b      	lsrs	r3, r3, #20
 800b296:	051b      	lsls	r3, r3, #20
 800b298:	2a00      	cmp	r2, #0
 800b29a:	d06a      	beq.n	800b372 <_strtod_l+0x8fa>
 800b29c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2a0:	d867      	bhi.n	800b372 <_strtod_l+0x8fa>
 800b2a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2a6:	f67f ae9d 	bls.w	800afe4 <_strtod_l+0x56c>
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d4 <_strtod_l+0x85c>)
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9a9 	bl	8000608 <__aeabi_dmul>
 800b2b6:	4b08      	ldr	r3, [pc, #32]	@ (800b2d8 <_strtod_l+0x860>)
 800b2b8:	400b      	ands	r3, r1
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	468b      	mov	fp, r1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f47f ae08 	bne.w	800aed4 <_strtod_l+0x45c>
 800b2c4:	9a05      	ldr	r2, [sp, #20]
 800b2c6:	2322      	movs	r3, #34	@ 0x22
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	e603      	b.n	800aed4 <_strtod_l+0x45c>
 800b2cc:	0800ced0 	.word	0x0800ced0
 800b2d0:	fffffc02 	.word	0xfffffc02
 800b2d4:	39500000 	.word	0x39500000
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2e0:	d165      	bne.n	800b3ae <_strtod_l+0x936>
 800b2e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e8:	b35a      	cbz	r2, 800b342 <_strtod_l+0x8ca>
 800b2ea:	4a9f      	ldr	r2, [pc, #636]	@ (800b568 <_strtod_l+0xaf0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d12b      	bne.n	800b348 <_strtod_l+0x8d0>
 800b2f0:	9b08      	ldr	r3, [sp, #32]
 800b2f2:	4651      	mov	r1, sl
 800b2f4:	b303      	cbz	r3, 800b338 <_strtod_l+0x8c0>
 800b2f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b56c <_strtod_l+0xaf4>)
 800b2f8:	465a      	mov	r2, fp
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b300:	f04f 32ff 	mov.w	r2, #4294967295
 800b304:	d81b      	bhi.n	800b33e <_strtod_l+0x8c6>
 800b306:	0d1b      	lsrs	r3, r3, #20
 800b308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	4299      	cmp	r1, r3
 800b312:	d119      	bne.n	800b348 <_strtod_l+0x8d0>
 800b314:	4b96      	ldr	r3, [pc, #600]	@ (800b570 <_strtod_l+0xaf8>)
 800b316:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b318:	429a      	cmp	r2, r3
 800b31a:	d102      	bne.n	800b322 <_strtod_l+0x8aa>
 800b31c:	3101      	adds	r1, #1
 800b31e:	f43f adce 	beq.w	800aebe <_strtod_l+0x446>
 800b322:	4b92      	ldr	r3, [pc, #584]	@ (800b56c <_strtod_l+0xaf4>)
 800b324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b326:	401a      	ands	r2, r3
 800b328:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b32c:	f04f 0a00 	mov.w	sl, #0
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1b9      	bne.n	800b2aa <_strtod_l+0x832>
 800b336:	e5cd      	b.n	800aed4 <_strtod_l+0x45c>
 800b338:	f04f 33ff 	mov.w	r3, #4294967295
 800b33c:	e7e8      	b.n	800b310 <_strtod_l+0x898>
 800b33e:	4613      	mov	r3, r2
 800b340:	e7e6      	b.n	800b310 <_strtod_l+0x898>
 800b342:	ea53 030a 	orrs.w	r3, r3, sl
 800b346:	d0a2      	beq.n	800b28e <_strtod_l+0x816>
 800b348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b34a:	b1db      	cbz	r3, 800b384 <_strtod_l+0x90c>
 800b34c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b34e:	4213      	tst	r3, r2
 800b350:	d0ee      	beq.n	800b330 <_strtod_l+0x8b8>
 800b352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b354:	9a08      	ldr	r2, [sp, #32]
 800b356:	4650      	mov	r0, sl
 800b358:	4659      	mov	r1, fp
 800b35a:	b1bb      	cbz	r3, 800b38c <_strtod_l+0x914>
 800b35c:	f7ff fb6e 	bl	800aa3c <sulp>
 800b360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b364:	ec53 2b10 	vmov	r2, r3, d0
 800b368:	f7f4 ff98 	bl	800029c <__adddf3>
 800b36c:	4682      	mov	sl, r0
 800b36e:	468b      	mov	fp, r1
 800b370:	e7de      	b.n	800b330 <_strtod_l+0x8b8>
 800b372:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b376:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b37a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b37e:	f04f 3aff 	mov.w	sl, #4294967295
 800b382:	e7d5      	b.n	800b330 <_strtod_l+0x8b8>
 800b384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b386:	ea13 0f0a 	tst.w	r3, sl
 800b38a:	e7e1      	b.n	800b350 <_strtod_l+0x8d8>
 800b38c:	f7ff fb56 	bl	800aa3c <sulp>
 800b390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b394:	ec53 2b10 	vmov	r2, r3, d0
 800b398:	f7f4 ff7e 	bl	8000298 <__aeabi_dsub>
 800b39c:	2200      	movs	r2, #0
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	468b      	mov	fp, r1
 800b3a4:	f7f5 fb98 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d0c1      	beq.n	800b330 <_strtod_l+0x8b8>
 800b3ac:	e61a      	b.n	800afe4 <_strtod_l+0x56c>
 800b3ae:	4641      	mov	r1, r8
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7ff facd 	bl	800a950 <__ratio>
 800b3b6:	ec57 6b10 	vmov	r6, r7, d0
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 fb9c 	bl	8000b00 <__aeabi_dcmple>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d06f      	beq.n	800b4ac <_strtod_l+0xa34>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d17a      	bne.n	800b4c8 <_strtod_l+0xa50>
 800b3d2:	f1ba 0f00 	cmp.w	sl, #0
 800b3d6:	d158      	bne.n	800b48a <_strtod_l+0xa12>
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d15a      	bne.n	800b498 <_strtod_l+0xa20>
 800b3e2:	4b64      	ldr	r3, [pc, #400]	@ (800b574 <_strtod_l+0xafc>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	f7f5 fb7f 	bl	8000aec <__aeabi_dcmplt>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d159      	bne.n	800b4a6 <_strtod_l+0xa2e>
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4b60      	ldr	r3, [pc, #384]	@ (800b578 <_strtod_l+0xb00>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f7f5 f905 	bl	8000608 <__aeabi_dmul>
 800b3fe:	4606      	mov	r6, r0
 800b400:	460f      	mov	r7, r1
 800b402:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b406:	9606      	str	r6, [sp, #24]
 800b408:	9307      	str	r3, [sp, #28]
 800b40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b40e:	4d57      	ldr	r5, [pc, #348]	@ (800b56c <_strtod_l+0xaf4>)
 800b410:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b416:	401d      	ands	r5, r3
 800b418:	4b58      	ldr	r3, [pc, #352]	@ (800b57c <_strtod_l+0xb04>)
 800b41a:	429d      	cmp	r5, r3
 800b41c:	f040 80b2 	bne.w	800b584 <_strtod_l+0xb0c>
 800b420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b422:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b426:	ec4b ab10 	vmov	d0, sl, fp
 800b42a:	f7ff f9c9 	bl	800a7c0 <__ulp>
 800b42e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b432:	ec51 0b10 	vmov	r0, r1, d0
 800b436:	f7f5 f8e7 	bl	8000608 <__aeabi_dmul>
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	f7f4 ff2d 	bl	800029c <__adddf3>
 800b442:	460b      	mov	r3, r1
 800b444:	4949      	ldr	r1, [pc, #292]	@ (800b56c <_strtod_l+0xaf4>)
 800b446:	4a4e      	ldr	r2, [pc, #312]	@ (800b580 <_strtod_l+0xb08>)
 800b448:	4019      	ands	r1, r3
 800b44a:	4291      	cmp	r1, r2
 800b44c:	4682      	mov	sl, r0
 800b44e:	d942      	bls.n	800b4d6 <_strtod_l+0xa5e>
 800b450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b452:	4b47      	ldr	r3, [pc, #284]	@ (800b570 <_strtod_l+0xaf8>)
 800b454:	429a      	cmp	r2, r3
 800b456:	d103      	bne.n	800b460 <_strtod_l+0x9e8>
 800b458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b45a:	3301      	adds	r3, #1
 800b45c:	f43f ad2f 	beq.w	800aebe <_strtod_l+0x446>
 800b460:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b570 <_strtod_l+0xaf8>
 800b464:	f04f 3aff 	mov.w	sl, #4294967295
 800b468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b46a:	9805      	ldr	r0, [sp, #20]
 800b46c:	f7fe fe7c 	bl	800a168 <_Bfree>
 800b470:	9805      	ldr	r0, [sp, #20]
 800b472:	4649      	mov	r1, r9
 800b474:	f7fe fe78 	bl	800a168 <_Bfree>
 800b478:	9805      	ldr	r0, [sp, #20]
 800b47a:	4641      	mov	r1, r8
 800b47c:	f7fe fe74 	bl	800a168 <_Bfree>
 800b480:	9805      	ldr	r0, [sp, #20]
 800b482:	4621      	mov	r1, r4
 800b484:	f7fe fe70 	bl	800a168 <_Bfree>
 800b488:	e619      	b.n	800b0be <_strtod_l+0x646>
 800b48a:	f1ba 0f01 	cmp.w	sl, #1
 800b48e:	d103      	bne.n	800b498 <_strtod_l+0xa20>
 800b490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	f43f ada6 	beq.w	800afe4 <_strtod_l+0x56c>
 800b498:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b548 <_strtod_l+0xad0>
 800b49c:	4f35      	ldr	r7, [pc, #212]	@ (800b574 <_strtod_l+0xafc>)
 800b49e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	e7b1      	b.n	800b40a <_strtod_l+0x992>
 800b4a6:	4f34      	ldr	r7, [pc, #208]	@ (800b578 <_strtod_l+0xb00>)
 800b4a8:	2600      	movs	r6, #0
 800b4aa:	e7aa      	b.n	800b402 <_strtod_l+0x98a>
 800b4ac:	4b32      	ldr	r3, [pc, #200]	@ (800b578 <_strtod_l+0xb00>)
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f5 f8a8 	bl	8000608 <__aeabi_dmul>
 800b4b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d09f      	beq.n	800b402 <_strtod_l+0x98a>
 800b4c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4c6:	e7a0      	b.n	800b40a <_strtod_l+0x992>
 800b4c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b550 <_strtod_l+0xad8>
 800b4cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d0:	ec57 6b17 	vmov	r6, r7, d7
 800b4d4:	e799      	b.n	800b40a <_strtod_l+0x992>
 800b4d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1c1      	bne.n	800b468 <_strtod_l+0x9f0>
 800b4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4e8:	0d1b      	lsrs	r3, r3, #20
 800b4ea:	051b      	lsls	r3, r3, #20
 800b4ec:	429d      	cmp	r5, r3
 800b4ee:	d1bb      	bne.n	800b468 <_strtod_l+0x9f0>
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 fbe8 	bl	8000cc8 <__aeabi_d2lz>
 800b4f8:	f7f5 f858 	bl	80005ac <__aeabi_l2d>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f4 fec8 	bl	8000298 <__aeabi_dsub>
 800b508:	460b      	mov	r3, r1
 800b50a:	4602      	mov	r2, r0
 800b50c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b510:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b516:	ea46 060a 	orr.w	r6, r6, sl
 800b51a:	431e      	orrs	r6, r3
 800b51c:	d06f      	beq.n	800b5fe <_strtod_l+0xb86>
 800b51e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b558 <_strtod_l+0xae0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 fae2 	bl	8000aec <__aeabi_dcmplt>
 800b528:	2800      	cmp	r0, #0
 800b52a:	f47f acd3 	bne.w	800aed4 <_strtod_l+0x45c>
 800b52e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b560 <_strtod_l+0xae8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b538:	f7f5 faf6 	bl	8000b28 <__aeabi_dcmpgt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d093      	beq.n	800b468 <_strtod_l+0x9f0>
 800b540:	e4c8      	b.n	800aed4 <_strtod_l+0x45c>
 800b542:	bf00      	nop
 800b544:	f3af 8000 	nop.w
 800b548:	00000000 	.word	0x00000000
 800b54c:	bff00000 	.word	0xbff00000
 800b550:	00000000 	.word	0x00000000
 800b554:	3ff00000 	.word	0x3ff00000
 800b558:	94a03595 	.word	0x94a03595
 800b55c:	3fdfffff 	.word	0x3fdfffff
 800b560:	35afe535 	.word	0x35afe535
 800b564:	3fe00000 	.word	0x3fe00000
 800b568:	000fffff 	.word	0x000fffff
 800b56c:	7ff00000 	.word	0x7ff00000
 800b570:	7fefffff 	.word	0x7fefffff
 800b574:	3ff00000 	.word	0x3ff00000
 800b578:	3fe00000 	.word	0x3fe00000
 800b57c:	7fe00000 	.word	0x7fe00000
 800b580:	7c9fffff 	.word	0x7c9fffff
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	b323      	cbz	r3, 800b5d2 <_strtod_l+0xb5a>
 800b588:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b58c:	d821      	bhi.n	800b5d2 <_strtod_l+0xb5a>
 800b58e:	a328      	add	r3, pc, #160	@ (adr r3, 800b630 <_strtod_l+0xbb8>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	4630      	mov	r0, r6
 800b596:	4639      	mov	r1, r7
 800b598:	f7f5 fab2 	bl	8000b00 <__aeabi_dcmple>
 800b59c:	b1a0      	cbz	r0, 800b5c8 <_strtod_l+0xb50>
 800b59e:	4639      	mov	r1, r7
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7f5 fb09 	bl	8000bb8 <__aeabi_d2uiz>
 800b5a6:	2801      	cmp	r0, #1
 800b5a8:	bf38      	it	cc
 800b5aa:	2001      	movcc	r0, #1
 800b5ac:	f7f4 ffb2 	bl	8000514 <__aeabi_ui2d>
 800b5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	b9fb      	cbnz	r3, 800b5f8 <_strtod_l+0xb80>
 800b5b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5be:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5ce:	1b5b      	subs	r3, r3, r5
 800b5d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5da:	f7ff f8f1 	bl	800a7c0 <__ulp>
 800b5de:	4650      	mov	r0, sl
 800b5e0:	ec53 2b10 	vmov	r2, r3, d0
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f5 f80f 	bl	8000608 <__aeabi_dmul>
 800b5ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5ee:	f7f4 fe55 	bl	800029c <__adddf3>
 800b5f2:	4682      	mov	sl, r0
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	e770      	b.n	800b4da <_strtod_l+0xa62>
 800b5f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5fc:	e7e0      	b.n	800b5c0 <_strtod_l+0xb48>
 800b5fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800b638 <_strtod_l+0xbc0>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f5 fa72 	bl	8000aec <__aeabi_dcmplt>
 800b608:	e798      	b.n	800b53c <_strtod_l+0xac4>
 800b60a:	2300      	movs	r3, #0
 800b60c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b60e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	f7ff ba6d 	b.w	800aaf2 <_strtod_l+0x7a>
 800b618:	2a65      	cmp	r2, #101	@ 0x65
 800b61a:	f43f ab68 	beq.w	800acee <_strtod_l+0x276>
 800b61e:	2a45      	cmp	r2, #69	@ 0x45
 800b620:	f43f ab65 	beq.w	800acee <_strtod_l+0x276>
 800b624:	2301      	movs	r3, #1
 800b626:	f7ff bba0 	b.w	800ad6a <_strtod_l+0x2f2>
 800b62a:	bf00      	nop
 800b62c:	f3af 8000 	nop.w
 800b630:	ffc00000 	.word	0xffc00000
 800b634:	41dfffff 	.word	0x41dfffff
 800b638:	94a03595 	.word	0x94a03595
 800b63c:	3fcfffff 	.word	0x3fcfffff

0800b640 <_strtod_r>:
 800b640:	4b01      	ldr	r3, [pc, #4]	@ (800b648 <_strtod_r+0x8>)
 800b642:	f7ff ba19 	b.w	800aa78 <_strtod_l>
 800b646:	bf00      	nop
 800b648:	2000015c 	.word	0x2000015c

0800b64c <_strtol_l.isra.0>:
 800b64c:	2b24      	cmp	r3, #36	@ 0x24
 800b64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b652:	4686      	mov	lr, r0
 800b654:	4690      	mov	r8, r2
 800b656:	d801      	bhi.n	800b65c <_strtol_l.isra.0+0x10>
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d106      	bne.n	800b66a <_strtol_l.isra.0+0x1e>
 800b65c:	f7fd fdaa 	bl	80091b4 <__errno>
 800b660:	2316      	movs	r3, #22
 800b662:	6003      	str	r3, [r0, #0]
 800b664:	2000      	movs	r0, #0
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	4834      	ldr	r0, [pc, #208]	@ (800b73c <_strtol_l.isra.0+0xf0>)
 800b66c:	460d      	mov	r5, r1
 800b66e:	462a      	mov	r2, r5
 800b670:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b674:	5d06      	ldrb	r6, [r0, r4]
 800b676:	f016 0608 	ands.w	r6, r6, #8
 800b67a:	d1f8      	bne.n	800b66e <_strtol_l.isra.0+0x22>
 800b67c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b67e:	d110      	bne.n	800b6a2 <_strtol_l.isra.0+0x56>
 800b680:	782c      	ldrb	r4, [r5, #0]
 800b682:	2601      	movs	r6, #1
 800b684:	1c95      	adds	r5, r2, #2
 800b686:	f033 0210 	bics.w	r2, r3, #16
 800b68a:	d115      	bne.n	800b6b8 <_strtol_l.isra.0+0x6c>
 800b68c:	2c30      	cmp	r4, #48	@ 0x30
 800b68e:	d10d      	bne.n	800b6ac <_strtol_l.isra.0+0x60>
 800b690:	782a      	ldrb	r2, [r5, #0]
 800b692:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b696:	2a58      	cmp	r2, #88	@ 0x58
 800b698:	d108      	bne.n	800b6ac <_strtol_l.isra.0+0x60>
 800b69a:	786c      	ldrb	r4, [r5, #1]
 800b69c:	3502      	adds	r5, #2
 800b69e:	2310      	movs	r3, #16
 800b6a0:	e00a      	b.n	800b6b8 <_strtol_l.isra.0+0x6c>
 800b6a2:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6a4:	bf04      	itt	eq
 800b6a6:	782c      	ldrbeq	r4, [r5, #0]
 800b6a8:	1c95      	addeq	r5, r2, #2
 800b6aa:	e7ec      	b.n	800b686 <_strtol_l.isra.0+0x3a>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f6      	bne.n	800b69e <_strtol_l.isra.0+0x52>
 800b6b0:	2c30      	cmp	r4, #48	@ 0x30
 800b6b2:	bf14      	ite	ne
 800b6b4:	230a      	movne	r3, #10
 800b6b6:	2308      	moveq	r3, #8
 800b6b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	fbbc f9f3 	udiv	r9, ip, r3
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6d0:	2f09      	cmp	r7, #9
 800b6d2:	d80f      	bhi.n	800b6f4 <_strtol_l.isra.0+0xa8>
 800b6d4:	463c      	mov	r4, r7
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	dd1b      	ble.n	800b712 <_strtol_l.isra.0+0xc6>
 800b6da:	1c57      	adds	r7, r2, #1
 800b6dc:	d007      	beq.n	800b6ee <_strtol_l.isra.0+0xa2>
 800b6de:	4581      	cmp	r9, r0
 800b6e0:	d314      	bcc.n	800b70c <_strtol_l.isra.0+0xc0>
 800b6e2:	d101      	bne.n	800b6e8 <_strtol_l.isra.0+0x9c>
 800b6e4:	45a2      	cmp	sl, r4
 800b6e6:	db11      	blt.n	800b70c <_strtol_l.isra.0+0xc0>
 800b6e8:	fb00 4003 	mla	r0, r0, r3, r4
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6f2:	e7eb      	b.n	800b6cc <_strtol_l.isra.0+0x80>
 800b6f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6f8:	2f19      	cmp	r7, #25
 800b6fa:	d801      	bhi.n	800b700 <_strtol_l.isra.0+0xb4>
 800b6fc:	3c37      	subs	r4, #55	@ 0x37
 800b6fe:	e7ea      	b.n	800b6d6 <_strtol_l.isra.0+0x8a>
 800b700:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b704:	2f19      	cmp	r7, #25
 800b706:	d804      	bhi.n	800b712 <_strtol_l.isra.0+0xc6>
 800b708:	3c57      	subs	r4, #87	@ 0x57
 800b70a:	e7e4      	b.n	800b6d6 <_strtol_l.isra.0+0x8a>
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	e7ed      	b.n	800b6ee <_strtol_l.isra.0+0xa2>
 800b712:	1c53      	adds	r3, r2, #1
 800b714:	d108      	bne.n	800b728 <_strtol_l.isra.0+0xdc>
 800b716:	2322      	movs	r3, #34	@ 0x22
 800b718:	f8ce 3000 	str.w	r3, [lr]
 800b71c:	4660      	mov	r0, ip
 800b71e:	f1b8 0f00 	cmp.w	r8, #0
 800b722:	d0a0      	beq.n	800b666 <_strtol_l.isra.0+0x1a>
 800b724:	1e69      	subs	r1, r5, #1
 800b726:	e006      	b.n	800b736 <_strtol_l.isra.0+0xea>
 800b728:	b106      	cbz	r6, 800b72c <_strtol_l.isra.0+0xe0>
 800b72a:	4240      	negs	r0, r0
 800b72c:	f1b8 0f00 	cmp.w	r8, #0
 800b730:	d099      	beq.n	800b666 <_strtol_l.isra.0+0x1a>
 800b732:	2a00      	cmp	r2, #0
 800b734:	d1f6      	bne.n	800b724 <_strtol_l.isra.0+0xd8>
 800b736:	f8c8 1000 	str.w	r1, [r8]
 800b73a:	e794      	b.n	800b666 <_strtol_l.isra.0+0x1a>
 800b73c:	0800cef9 	.word	0x0800cef9

0800b740 <_strtol_r>:
 800b740:	f7ff bf84 	b.w	800b64c <_strtol_l.isra.0>

0800b744 <__ssputs_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	688e      	ldr	r6, [r1, #8]
 800b74a:	461f      	mov	r7, r3
 800b74c:	42be      	cmp	r6, r7
 800b74e:	680b      	ldr	r3, [r1, #0]
 800b750:	4682      	mov	sl, r0
 800b752:	460c      	mov	r4, r1
 800b754:	4690      	mov	r8, r2
 800b756:	d82d      	bhi.n	800b7b4 <__ssputs_r+0x70>
 800b758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b75c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b760:	d026      	beq.n	800b7b0 <__ssputs_r+0x6c>
 800b762:	6965      	ldr	r5, [r4, #20]
 800b764:	6909      	ldr	r1, [r1, #16]
 800b766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b76a:	eba3 0901 	sub.w	r9, r3, r1
 800b76e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b772:	1c7b      	adds	r3, r7, #1
 800b774:	444b      	add	r3, r9
 800b776:	106d      	asrs	r5, r5, #1
 800b778:	429d      	cmp	r5, r3
 800b77a:	bf38      	it	cc
 800b77c:	461d      	movcc	r5, r3
 800b77e:	0553      	lsls	r3, r2, #21
 800b780:	d527      	bpl.n	800b7d2 <__ssputs_r+0x8e>
 800b782:	4629      	mov	r1, r5
 800b784:	f7fe fc24 	bl	8009fd0 <_malloc_r>
 800b788:	4606      	mov	r6, r0
 800b78a:	b360      	cbz	r0, 800b7e6 <__ssputs_r+0xa2>
 800b78c:	6921      	ldr	r1, [r4, #16]
 800b78e:	464a      	mov	r2, r9
 800b790:	f7fd fd3d 	bl	800920e <memcpy>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	6126      	str	r6, [r4, #16]
 800b7a2:	6165      	str	r5, [r4, #20]
 800b7a4:	444e      	add	r6, r9
 800b7a6:	eba5 0509 	sub.w	r5, r5, r9
 800b7aa:	6026      	str	r6, [r4, #0]
 800b7ac:	60a5      	str	r5, [r4, #8]
 800b7ae:	463e      	mov	r6, r7
 800b7b0:	42be      	cmp	r6, r7
 800b7b2:	d900      	bls.n	800b7b6 <__ssputs_r+0x72>
 800b7b4:	463e      	mov	r6, r7
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	4641      	mov	r1, r8
 800b7bc:	f000 f9c6 	bl	800bb4c <memmove>
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	1b9b      	subs	r3, r3, r6
 800b7c4:	60a3      	str	r3, [r4, #8]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	4433      	add	r3, r6
 800b7ca:	6023      	str	r3, [r4, #0]
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	f000 fd7d 	bl	800c2d2 <_realloc_r>
 800b7d8:	4606      	mov	r6, r0
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d1e0      	bne.n	800b7a0 <__ssputs_r+0x5c>
 800b7de:	6921      	ldr	r1, [r4, #16]
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	f7fe fb81 	bl	8009ee8 <_free_r>
 800b7e6:	230c      	movs	r3, #12
 800b7e8:	f8ca 3000 	str.w	r3, [sl]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e7e9      	b.n	800b7ce <__ssputs_r+0x8a>
	...

0800b7fc <_svfiprintf_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4698      	mov	r8, r3
 800b802:	898b      	ldrh	r3, [r1, #12]
 800b804:	061b      	lsls	r3, r3, #24
 800b806:	b09d      	sub	sp, #116	@ 0x74
 800b808:	4607      	mov	r7, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4614      	mov	r4, r2
 800b80e:	d510      	bpl.n	800b832 <_svfiprintf_r+0x36>
 800b810:	690b      	ldr	r3, [r1, #16]
 800b812:	b973      	cbnz	r3, 800b832 <_svfiprintf_r+0x36>
 800b814:	2140      	movs	r1, #64	@ 0x40
 800b816:	f7fe fbdb 	bl	8009fd0 <_malloc_r>
 800b81a:	6028      	str	r0, [r5, #0]
 800b81c:	6128      	str	r0, [r5, #16]
 800b81e:	b930      	cbnz	r0, 800b82e <_svfiprintf_r+0x32>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	b01d      	add	sp, #116	@ 0x74
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	2340      	movs	r3, #64	@ 0x40
 800b830:	616b      	str	r3, [r5, #20]
 800b832:	2300      	movs	r3, #0
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	2320      	movs	r3, #32
 800b838:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b840:	2330      	movs	r3, #48	@ 0x30
 800b842:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9e0 <_svfiprintf_r+0x1e4>
 800b846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b84a:	f04f 0901 	mov.w	r9, #1
 800b84e:	4623      	mov	r3, r4
 800b850:	469a      	mov	sl, r3
 800b852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b856:	b10a      	cbz	r2, 800b85c <_svfiprintf_r+0x60>
 800b858:	2a25      	cmp	r2, #37	@ 0x25
 800b85a:	d1f9      	bne.n	800b850 <_svfiprintf_r+0x54>
 800b85c:	ebba 0b04 	subs.w	fp, sl, r4
 800b860:	d00b      	beq.n	800b87a <_svfiprintf_r+0x7e>
 800b862:	465b      	mov	r3, fp
 800b864:	4622      	mov	r2, r4
 800b866:	4629      	mov	r1, r5
 800b868:	4638      	mov	r0, r7
 800b86a:	f7ff ff6b 	bl	800b744 <__ssputs_r>
 800b86e:	3001      	adds	r0, #1
 800b870:	f000 80a7 	beq.w	800b9c2 <_svfiprintf_r+0x1c6>
 800b874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b876:	445a      	add	r2, fp
 800b878:	9209      	str	r2, [sp, #36]	@ 0x24
 800b87a:	f89a 3000 	ldrb.w	r3, [sl]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 809f 	beq.w	800b9c2 <_svfiprintf_r+0x1c6>
 800b884:	2300      	movs	r3, #0
 800b886:	f04f 32ff 	mov.w	r2, #4294967295
 800b88a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88e:	f10a 0a01 	add.w	sl, sl, #1
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	9307      	str	r3, [sp, #28]
 800b896:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b89a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b89c:	4654      	mov	r4, sl
 800b89e:	2205      	movs	r2, #5
 800b8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a4:	484e      	ldr	r0, [pc, #312]	@ (800b9e0 <_svfiprintf_r+0x1e4>)
 800b8a6:	f7f4 fc9b 	bl	80001e0 <memchr>
 800b8aa:	9a04      	ldr	r2, [sp, #16]
 800b8ac:	b9d8      	cbnz	r0, 800b8e6 <_svfiprintf_r+0xea>
 800b8ae:	06d0      	lsls	r0, r2, #27
 800b8b0:	bf44      	itt	mi
 800b8b2:	2320      	movmi	r3, #32
 800b8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8b8:	0711      	lsls	r1, r2, #28
 800b8ba:	bf44      	itt	mi
 800b8bc:	232b      	movmi	r3, #43	@ 0x2b
 800b8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c8:	d015      	beq.n	800b8f6 <_svfiprintf_r+0xfa>
 800b8ca:	9a07      	ldr	r2, [sp, #28]
 800b8cc:	4654      	mov	r4, sl
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8da:	3b30      	subs	r3, #48	@ 0x30
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	d94b      	bls.n	800b978 <_svfiprintf_r+0x17c>
 800b8e0:	b1b0      	cbz	r0, 800b910 <_svfiprintf_r+0x114>
 800b8e2:	9207      	str	r2, [sp, #28]
 800b8e4:	e014      	b.n	800b910 <_svfiprintf_r+0x114>
 800b8e6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	46a2      	mov	sl, r4
 800b8f4:	e7d2      	b.n	800b89c <_svfiprintf_r+0xa0>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	1d19      	adds	r1, r3, #4
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	9103      	str	r1, [sp, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfbb      	ittet	lt
 800b902:	425b      	neglt	r3, r3
 800b904:	f042 0202 	orrlt.w	r2, r2, #2
 800b908:	9307      	strge	r3, [sp, #28]
 800b90a:	9307      	strlt	r3, [sp, #28]
 800b90c:	bfb8      	it	lt
 800b90e:	9204      	strlt	r2, [sp, #16]
 800b910:	7823      	ldrb	r3, [r4, #0]
 800b912:	2b2e      	cmp	r3, #46	@ 0x2e
 800b914:	d10a      	bne.n	800b92c <_svfiprintf_r+0x130>
 800b916:	7863      	ldrb	r3, [r4, #1]
 800b918:	2b2a      	cmp	r3, #42	@ 0x2a
 800b91a:	d132      	bne.n	800b982 <_svfiprintf_r+0x186>
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	9203      	str	r2, [sp, #12]
 800b924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b928:	3402      	adds	r4, #2
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9f0 <_svfiprintf_r+0x1f4>
 800b930:	7821      	ldrb	r1, [r4, #0]
 800b932:	2203      	movs	r2, #3
 800b934:	4650      	mov	r0, sl
 800b936:	f7f4 fc53 	bl	80001e0 <memchr>
 800b93a:	b138      	cbz	r0, 800b94c <_svfiprintf_r+0x150>
 800b93c:	9b04      	ldr	r3, [sp, #16]
 800b93e:	eba0 000a 	sub.w	r0, r0, sl
 800b942:	2240      	movs	r2, #64	@ 0x40
 800b944:	4082      	lsls	r2, r0
 800b946:	4313      	orrs	r3, r2
 800b948:	3401      	adds	r4, #1
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b950:	4824      	ldr	r0, [pc, #144]	@ (800b9e4 <_svfiprintf_r+0x1e8>)
 800b952:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b956:	2206      	movs	r2, #6
 800b958:	f7f4 fc42 	bl	80001e0 <memchr>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d036      	beq.n	800b9ce <_svfiprintf_r+0x1d2>
 800b960:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <_svfiprintf_r+0x1ec>)
 800b962:	bb1b      	cbnz	r3, 800b9ac <_svfiprintf_r+0x1b0>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	3307      	adds	r3, #7
 800b968:	f023 0307 	bic.w	r3, r3, #7
 800b96c:	3308      	adds	r3, #8
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b972:	4433      	add	r3, r6
 800b974:	9309      	str	r3, [sp, #36]	@ 0x24
 800b976:	e76a      	b.n	800b84e <_svfiprintf_r+0x52>
 800b978:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97c:	460c      	mov	r4, r1
 800b97e:	2001      	movs	r0, #1
 800b980:	e7a8      	b.n	800b8d4 <_svfiprintf_r+0xd8>
 800b982:	2300      	movs	r3, #0
 800b984:	3401      	adds	r4, #1
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	4619      	mov	r1, r3
 800b98a:	f04f 0c0a 	mov.w	ip, #10
 800b98e:	4620      	mov	r0, r4
 800b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b994:	3a30      	subs	r2, #48	@ 0x30
 800b996:	2a09      	cmp	r2, #9
 800b998:	d903      	bls.n	800b9a2 <_svfiprintf_r+0x1a6>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0c6      	beq.n	800b92c <_svfiprintf_r+0x130>
 800b99e:	9105      	str	r1, [sp, #20]
 800b9a0:	e7c4      	b.n	800b92c <_svfiprintf_r+0x130>
 800b9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e7f0      	b.n	800b98e <_svfiprintf_r+0x192>
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ec <_svfiprintf_r+0x1f0>)
 800b9b4:	a904      	add	r1, sp, #16
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7fc fcbe 	bl	8008338 <_printf_float>
 800b9bc:	1c42      	adds	r2, r0, #1
 800b9be:	4606      	mov	r6, r0
 800b9c0:	d1d6      	bne.n	800b970 <_svfiprintf_r+0x174>
 800b9c2:	89ab      	ldrh	r3, [r5, #12]
 800b9c4:	065b      	lsls	r3, r3, #25
 800b9c6:	f53f af2d 	bmi.w	800b824 <_svfiprintf_r+0x28>
 800b9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9cc:	e72c      	b.n	800b828 <_svfiprintf_r+0x2c>
 800b9ce:	ab03      	add	r3, sp, #12
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	462a      	mov	r2, r5
 800b9d4:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <_svfiprintf_r+0x1f0>)
 800b9d6:	a904      	add	r1, sp, #16
 800b9d8:	4638      	mov	r0, r7
 800b9da:	f7fc ff45 	bl	8008868 <_printf_i>
 800b9de:	e7ed      	b.n	800b9bc <_svfiprintf_r+0x1c0>
 800b9e0:	0800ccf1 	.word	0x0800ccf1
 800b9e4:	0800ccfb 	.word	0x0800ccfb
 800b9e8:	08008339 	.word	0x08008339
 800b9ec:	0800b745 	.word	0x0800b745
 800b9f0:	0800ccf7 	.word	0x0800ccf7

0800b9f4 <__sflush_r>:
 800b9f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fc:	0716      	lsls	r6, r2, #28
 800b9fe:	4605      	mov	r5, r0
 800ba00:	460c      	mov	r4, r1
 800ba02:	d454      	bmi.n	800baae <__sflush_r+0xba>
 800ba04:	684b      	ldr	r3, [r1, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dc02      	bgt.n	800ba10 <__sflush_r+0x1c>
 800ba0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd48      	ble.n	800baa2 <__sflush_r+0xae>
 800ba10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba12:	2e00      	cmp	r6, #0
 800ba14:	d045      	beq.n	800baa2 <__sflush_r+0xae>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba1c:	682f      	ldr	r7, [r5, #0]
 800ba1e:	6a21      	ldr	r1, [r4, #32]
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	d030      	beq.n	800ba86 <__sflush_r+0x92>
 800ba24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	0759      	lsls	r1, r3, #29
 800ba2a:	d505      	bpl.n	800ba38 <__sflush_r+0x44>
 800ba2c:	6863      	ldr	r3, [r4, #4]
 800ba2e:	1ad2      	subs	r2, r2, r3
 800ba30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba32:	b10b      	cbz	r3, 800ba38 <__sflush_r+0x44>
 800ba34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	2300      	movs	r3, #0
 800ba3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba3c:	6a21      	ldr	r1, [r4, #32]
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b0      	blx	r6
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	d106      	bne.n	800ba56 <__sflush_r+0x62>
 800ba48:	6829      	ldr	r1, [r5, #0]
 800ba4a:	291d      	cmp	r1, #29
 800ba4c:	d82b      	bhi.n	800baa6 <__sflush_r+0xb2>
 800ba4e:	4a2a      	ldr	r2, [pc, #168]	@ (800baf8 <__sflush_r+0x104>)
 800ba50:	40ca      	lsrs	r2, r1
 800ba52:	07d6      	lsls	r6, r2, #31
 800ba54:	d527      	bpl.n	800baa6 <__sflush_r+0xb2>
 800ba56:	2200      	movs	r2, #0
 800ba58:	6062      	str	r2, [r4, #4]
 800ba5a:	04d9      	lsls	r1, r3, #19
 800ba5c:	6922      	ldr	r2, [r4, #16]
 800ba5e:	6022      	str	r2, [r4, #0]
 800ba60:	d504      	bpl.n	800ba6c <__sflush_r+0x78>
 800ba62:	1c42      	adds	r2, r0, #1
 800ba64:	d101      	bne.n	800ba6a <__sflush_r+0x76>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b903      	cbnz	r3, 800ba6c <__sflush_r+0x78>
 800ba6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba6e:	602f      	str	r7, [r5, #0]
 800ba70:	b1b9      	cbz	r1, 800baa2 <__sflush_r+0xae>
 800ba72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba76:	4299      	cmp	r1, r3
 800ba78:	d002      	beq.n	800ba80 <__sflush_r+0x8c>
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f7fe fa34 	bl	8009ee8 <_free_r>
 800ba80:	2300      	movs	r3, #0
 800ba82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba84:	e00d      	b.n	800baa2 <__sflush_r+0xae>
 800ba86:	2301      	movs	r3, #1
 800ba88:	4628      	mov	r0, r5
 800ba8a:	47b0      	blx	r6
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	1c50      	adds	r0, r2, #1
 800ba90:	d1c9      	bne.n	800ba26 <__sflush_r+0x32>
 800ba92:	682b      	ldr	r3, [r5, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0c6      	beq.n	800ba26 <__sflush_r+0x32>
 800ba98:	2b1d      	cmp	r3, #29
 800ba9a:	d001      	beq.n	800baa0 <__sflush_r+0xac>
 800ba9c:	2b16      	cmp	r3, #22
 800ba9e:	d11e      	bne.n	800bade <__sflush_r+0xea>
 800baa0:	602f      	str	r7, [r5, #0]
 800baa2:	2000      	movs	r0, #0
 800baa4:	e022      	b.n	800baec <__sflush_r+0xf8>
 800baa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baaa:	b21b      	sxth	r3, r3
 800baac:	e01b      	b.n	800bae6 <__sflush_r+0xf2>
 800baae:	690f      	ldr	r7, [r1, #16]
 800bab0:	2f00      	cmp	r7, #0
 800bab2:	d0f6      	beq.n	800baa2 <__sflush_r+0xae>
 800bab4:	0793      	lsls	r3, r2, #30
 800bab6:	680e      	ldr	r6, [r1, #0]
 800bab8:	bf08      	it	eq
 800baba:	694b      	ldreq	r3, [r1, #20]
 800babc:	600f      	str	r7, [r1, #0]
 800babe:	bf18      	it	ne
 800bac0:	2300      	movne	r3, #0
 800bac2:	eba6 0807 	sub.w	r8, r6, r7
 800bac6:	608b      	str	r3, [r1, #8]
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	dde9      	ble.n	800baa2 <__sflush_r+0xae>
 800bace:	6a21      	ldr	r1, [r4, #32]
 800bad0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bad2:	4643      	mov	r3, r8
 800bad4:	463a      	mov	r2, r7
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b0      	blx	r6
 800bada:	2800      	cmp	r0, #0
 800badc:	dc08      	bgt.n	800baf0 <__sflush_r+0xfc>
 800bade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295
 800baec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf0:	4407      	add	r7, r0
 800baf2:	eba8 0800 	sub.w	r8, r8, r0
 800baf6:	e7e7      	b.n	800bac8 <__sflush_r+0xd4>
 800baf8:	20400001 	.word	0x20400001

0800bafc <_fflush_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	690b      	ldr	r3, [r1, #16]
 800bb00:	4605      	mov	r5, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	b913      	cbnz	r3, 800bb0c <_fflush_r+0x10>
 800bb06:	2500      	movs	r5, #0
 800bb08:	4628      	mov	r0, r5
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	b118      	cbz	r0, 800bb16 <_fflush_r+0x1a>
 800bb0e:	6a03      	ldr	r3, [r0, #32]
 800bb10:	b90b      	cbnz	r3, 800bb16 <_fflush_r+0x1a>
 800bb12:	f7fd fa61 	bl	8008fd8 <__sinit>
 800bb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d0f3      	beq.n	800bb06 <_fflush_r+0xa>
 800bb1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb20:	07d0      	lsls	r0, r2, #31
 800bb22:	d404      	bmi.n	800bb2e <_fflush_r+0x32>
 800bb24:	0599      	lsls	r1, r3, #22
 800bb26:	d402      	bmi.n	800bb2e <_fflush_r+0x32>
 800bb28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb2a:	f7fd fb6e 	bl	800920a <__retarget_lock_acquire_recursive>
 800bb2e:	4628      	mov	r0, r5
 800bb30:	4621      	mov	r1, r4
 800bb32:	f7ff ff5f 	bl	800b9f4 <__sflush_r>
 800bb36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb38:	07da      	lsls	r2, r3, #31
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	d4e4      	bmi.n	800bb08 <_fflush_r+0xc>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	059b      	lsls	r3, r3, #22
 800bb42:	d4e1      	bmi.n	800bb08 <_fflush_r+0xc>
 800bb44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb46:	f7fd fb61 	bl	800920c <__retarget_lock_release_recursive>
 800bb4a:	e7dd      	b.n	800bb08 <_fflush_r+0xc>

0800bb4c <memmove>:
 800bb4c:	4288      	cmp	r0, r1
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	eb01 0402 	add.w	r4, r1, r2
 800bb54:	d902      	bls.n	800bb5c <memmove+0x10>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4623      	mov	r3, r4
 800bb5a:	d807      	bhi.n	800bb6c <memmove+0x20>
 800bb5c:	1e43      	subs	r3, r0, #1
 800bb5e:	42a1      	cmp	r1, r4
 800bb60:	d008      	beq.n	800bb74 <memmove+0x28>
 800bb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6a:	e7f8      	b.n	800bb5e <memmove+0x12>
 800bb6c:	4402      	add	r2, r0
 800bb6e:	4601      	mov	r1, r0
 800bb70:	428a      	cmp	r2, r1
 800bb72:	d100      	bne.n	800bb76 <memmove+0x2a>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb7e:	e7f7      	b.n	800bb70 <memmove+0x24>

0800bb80 <strncmp>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	b16a      	cbz	r2, 800bba0 <strncmp+0x20>
 800bb84:	3901      	subs	r1, #1
 800bb86:	1884      	adds	r4, r0, r2
 800bb88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d103      	bne.n	800bb9c <strncmp+0x1c>
 800bb94:	42a0      	cmp	r0, r4
 800bb96:	d001      	beq.n	800bb9c <strncmp+0x1c>
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	d1f5      	bne.n	800bb88 <strncmp+0x8>
 800bb9c:	1ad0      	subs	r0, r2, r3
 800bb9e:	bd10      	pop	{r4, pc}
 800bba0:	4610      	mov	r0, r2
 800bba2:	e7fc      	b.n	800bb9e <strncmp+0x1e>

0800bba4 <_sbrk_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d06      	ldr	r5, [pc, #24]	@ (800bbc0 <_sbrk_r+0x1c>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7f5 fd98 	bl	80016e4 <_sbrk>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_sbrk_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_sbrk_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20000864 	.word	0x20000864
 800bbc4:	00000000 	.word	0x00000000

0800bbc8 <nan>:
 800bbc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbd0 <nan+0x8>
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	7ff80000 	.word	0x7ff80000

0800bbd8 <__assert_func>:
 800bbd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbda:	4614      	mov	r4, r2
 800bbdc:	461a      	mov	r2, r3
 800bbde:	4b09      	ldr	r3, [pc, #36]	@ (800bc04 <__assert_func+0x2c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	68d8      	ldr	r0, [r3, #12]
 800bbe6:	b14c      	cbz	r4, 800bbfc <__assert_func+0x24>
 800bbe8:	4b07      	ldr	r3, [pc, #28]	@ (800bc08 <__assert_func+0x30>)
 800bbea:	9100      	str	r1, [sp, #0]
 800bbec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbf0:	4906      	ldr	r1, [pc, #24]	@ (800bc0c <__assert_func+0x34>)
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	f000 fba8 	bl	800c348 <fiprintf>
 800bbf8:	f000 fbb8 	bl	800c36c <abort>
 800bbfc:	4b04      	ldr	r3, [pc, #16]	@ (800bc10 <__assert_func+0x38>)
 800bbfe:	461c      	mov	r4, r3
 800bc00:	e7f3      	b.n	800bbea <__assert_func+0x12>
 800bc02:	bf00      	nop
 800bc04:	2000010c 	.word	0x2000010c
 800bc08:	0800cd0a 	.word	0x0800cd0a
 800bc0c:	0800cd17 	.word	0x0800cd17
 800bc10:	0800cd45 	.word	0x0800cd45

0800bc14 <_calloc_r>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	fba1 5402 	umull	r5, r4, r1, r2
 800bc1a:	b934      	cbnz	r4, 800bc2a <_calloc_r+0x16>
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	f7fe f9d7 	bl	8009fd0 <_malloc_r>
 800bc22:	4606      	mov	r6, r0
 800bc24:	b928      	cbnz	r0, 800bc32 <_calloc_r+0x1e>
 800bc26:	4630      	mov	r0, r6
 800bc28:	bd70      	pop	{r4, r5, r6, pc}
 800bc2a:	220c      	movs	r2, #12
 800bc2c:	6002      	str	r2, [r0, #0]
 800bc2e:	2600      	movs	r6, #0
 800bc30:	e7f9      	b.n	800bc26 <_calloc_r+0x12>
 800bc32:	462a      	mov	r2, r5
 800bc34:	4621      	mov	r1, r4
 800bc36:	f7fd fa6a 	bl	800910e <memset>
 800bc3a:	e7f4      	b.n	800bc26 <_calloc_r+0x12>

0800bc3c <rshift>:
 800bc3c:	6903      	ldr	r3, [r0, #16]
 800bc3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc4a:	f100 0414 	add.w	r4, r0, #20
 800bc4e:	dd45      	ble.n	800bcdc <rshift+0xa0>
 800bc50:	f011 011f 	ands.w	r1, r1, #31
 800bc54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc5c:	d10c      	bne.n	800bc78 <rshift+0x3c>
 800bc5e:	f100 0710 	add.w	r7, r0, #16
 800bc62:	4629      	mov	r1, r5
 800bc64:	42b1      	cmp	r1, r6
 800bc66:	d334      	bcc.n	800bcd2 <rshift+0x96>
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	1eea      	subs	r2, r5, #3
 800bc6e:	4296      	cmp	r6, r2
 800bc70:	bf38      	it	cc
 800bc72:	2300      	movcc	r3, #0
 800bc74:	4423      	add	r3, r4
 800bc76:	e015      	b.n	800bca4 <rshift+0x68>
 800bc78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc7c:	f1c1 0820 	rsb	r8, r1, #32
 800bc80:	40cf      	lsrs	r7, r1
 800bc82:	f105 0e04 	add.w	lr, r5, #4
 800bc86:	46a1      	mov	r9, r4
 800bc88:	4576      	cmp	r6, lr
 800bc8a:	46f4      	mov	ip, lr
 800bc8c:	d815      	bhi.n	800bcba <rshift+0x7e>
 800bc8e:	1a9a      	subs	r2, r3, r2
 800bc90:	0092      	lsls	r2, r2, #2
 800bc92:	3a04      	subs	r2, #4
 800bc94:	3501      	adds	r5, #1
 800bc96:	42ae      	cmp	r6, r5
 800bc98:	bf38      	it	cc
 800bc9a:	2200      	movcc	r2, #0
 800bc9c:	18a3      	adds	r3, r4, r2
 800bc9e:	50a7      	str	r7, [r4, r2]
 800bca0:	b107      	cbz	r7, 800bca4 <rshift+0x68>
 800bca2:	3304      	adds	r3, #4
 800bca4:	1b1a      	subs	r2, r3, r4
 800bca6:	42a3      	cmp	r3, r4
 800bca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bcac:	bf08      	it	eq
 800bcae:	2300      	moveq	r3, #0
 800bcb0:	6102      	str	r2, [r0, #16]
 800bcb2:	bf08      	it	eq
 800bcb4:	6143      	streq	r3, [r0, #20]
 800bcb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcba:	f8dc c000 	ldr.w	ip, [ip]
 800bcbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcc2:	ea4c 0707 	orr.w	r7, ip, r7
 800bcc6:	f849 7b04 	str.w	r7, [r9], #4
 800bcca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcce:	40cf      	lsrs	r7, r1
 800bcd0:	e7da      	b.n	800bc88 <rshift+0x4c>
 800bcd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bcd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bcda:	e7c3      	b.n	800bc64 <rshift+0x28>
 800bcdc:	4623      	mov	r3, r4
 800bcde:	e7e1      	b.n	800bca4 <rshift+0x68>

0800bce0 <__hexdig_fun>:
 800bce0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bce4:	2b09      	cmp	r3, #9
 800bce6:	d802      	bhi.n	800bcee <__hexdig_fun+0xe>
 800bce8:	3820      	subs	r0, #32
 800bcea:	b2c0      	uxtb	r0, r0
 800bcec:	4770      	bx	lr
 800bcee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bcf2:	2b05      	cmp	r3, #5
 800bcf4:	d801      	bhi.n	800bcfa <__hexdig_fun+0x1a>
 800bcf6:	3847      	subs	r0, #71	@ 0x47
 800bcf8:	e7f7      	b.n	800bcea <__hexdig_fun+0xa>
 800bcfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d801      	bhi.n	800bd06 <__hexdig_fun+0x26>
 800bd02:	3827      	subs	r0, #39	@ 0x27
 800bd04:	e7f1      	b.n	800bcea <__hexdig_fun+0xa>
 800bd06:	2000      	movs	r0, #0
 800bd08:	4770      	bx	lr
	...

0800bd0c <__gethex>:
 800bd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	b085      	sub	sp, #20
 800bd12:	468a      	mov	sl, r1
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	680b      	ldr	r3, [r1, #0]
 800bd18:	9001      	str	r0, [sp, #4]
 800bd1a:	4690      	mov	r8, r2
 800bd1c:	1c9c      	adds	r4, r3, #2
 800bd1e:	46a1      	mov	r9, r4
 800bd20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bd24:	2830      	cmp	r0, #48	@ 0x30
 800bd26:	d0fa      	beq.n	800bd1e <__gethex+0x12>
 800bd28:	eba9 0303 	sub.w	r3, r9, r3
 800bd2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bd30:	f7ff ffd6 	bl	800bce0 <__hexdig_fun>
 800bd34:	4605      	mov	r5, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d168      	bne.n	800be0c <__gethex+0x100>
 800bd3a:	49a0      	ldr	r1, [pc, #640]	@ (800bfbc <__gethex+0x2b0>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	4648      	mov	r0, r9
 800bd40:	f7ff ff1e 	bl	800bb80 <strncmp>
 800bd44:	4607      	mov	r7, r0
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d167      	bne.n	800be1a <__gethex+0x10e>
 800bd4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bd4e:	4626      	mov	r6, r4
 800bd50:	f7ff ffc6 	bl	800bce0 <__hexdig_fun>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d062      	beq.n	800be1e <__gethex+0x112>
 800bd58:	4623      	mov	r3, r4
 800bd5a:	7818      	ldrb	r0, [r3, #0]
 800bd5c:	2830      	cmp	r0, #48	@ 0x30
 800bd5e:	4699      	mov	r9, r3
 800bd60:	f103 0301 	add.w	r3, r3, #1
 800bd64:	d0f9      	beq.n	800bd5a <__gethex+0x4e>
 800bd66:	f7ff ffbb 	bl	800bce0 <__hexdig_fun>
 800bd6a:	fab0 f580 	clz	r5, r0
 800bd6e:	096d      	lsrs	r5, r5, #5
 800bd70:	f04f 0b01 	mov.w	fp, #1
 800bd74:	464a      	mov	r2, r9
 800bd76:	4616      	mov	r6, r2
 800bd78:	3201      	adds	r2, #1
 800bd7a:	7830      	ldrb	r0, [r6, #0]
 800bd7c:	f7ff ffb0 	bl	800bce0 <__hexdig_fun>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1f8      	bne.n	800bd76 <__gethex+0x6a>
 800bd84:	498d      	ldr	r1, [pc, #564]	@ (800bfbc <__gethex+0x2b0>)
 800bd86:	2201      	movs	r2, #1
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff fef9 	bl	800bb80 <strncmp>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d13f      	bne.n	800be12 <__gethex+0x106>
 800bd92:	b944      	cbnz	r4, 800bda6 <__gethex+0x9a>
 800bd94:	1c74      	adds	r4, r6, #1
 800bd96:	4622      	mov	r2, r4
 800bd98:	4616      	mov	r6, r2
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	7830      	ldrb	r0, [r6, #0]
 800bd9e:	f7ff ff9f 	bl	800bce0 <__hexdig_fun>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1f8      	bne.n	800bd98 <__gethex+0x8c>
 800bda6:	1ba4      	subs	r4, r4, r6
 800bda8:	00a7      	lsls	r7, r4, #2
 800bdaa:	7833      	ldrb	r3, [r6, #0]
 800bdac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bdb0:	2b50      	cmp	r3, #80	@ 0x50
 800bdb2:	d13e      	bne.n	800be32 <__gethex+0x126>
 800bdb4:	7873      	ldrb	r3, [r6, #1]
 800bdb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bdb8:	d033      	beq.n	800be22 <__gethex+0x116>
 800bdba:	2b2d      	cmp	r3, #45	@ 0x2d
 800bdbc:	d034      	beq.n	800be28 <__gethex+0x11c>
 800bdbe:	1c71      	adds	r1, r6, #1
 800bdc0:	2400      	movs	r4, #0
 800bdc2:	7808      	ldrb	r0, [r1, #0]
 800bdc4:	f7ff ff8c 	bl	800bce0 <__hexdig_fun>
 800bdc8:	1e43      	subs	r3, r0, #1
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	2b18      	cmp	r3, #24
 800bdce:	d830      	bhi.n	800be32 <__gethex+0x126>
 800bdd0:	f1a0 0210 	sub.w	r2, r0, #16
 800bdd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bdd8:	f7ff ff82 	bl	800bce0 <__hexdig_fun>
 800bddc:	f100 3cff 	add.w	ip, r0, #4294967295
 800bde0:	fa5f fc8c 	uxtb.w	ip, ip
 800bde4:	f1bc 0f18 	cmp.w	ip, #24
 800bde8:	f04f 030a 	mov.w	r3, #10
 800bdec:	d91e      	bls.n	800be2c <__gethex+0x120>
 800bdee:	b104      	cbz	r4, 800bdf2 <__gethex+0xe6>
 800bdf0:	4252      	negs	r2, r2
 800bdf2:	4417      	add	r7, r2
 800bdf4:	f8ca 1000 	str.w	r1, [sl]
 800bdf8:	b1ed      	cbz	r5, 800be36 <__gethex+0x12a>
 800bdfa:	f1bb 0f00 	cmp.w	fp, #0
 800bdfe:	bf0c      	ite	eq
 800be00:	2506      	moveq	r5, #6
 800be02:	2500      	movne	r5, #0
 800be04:	4628      	mov	r0, r5
 800be06:	b005      	add	sp, #20
 800be08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0c:	2500      	movs	r5, #0
 800be0e:	462c      	mov	r4, r5
 800be10:	e7b0      	b.n	800bd74 <__gethex+0x68>
 800be12:	2c00      	cmp	r4, #0
 800be14:	d1c7      	bne.n	800bda6 <__gethex+0x9a>
 800be16:	4627      	mov	r7, r4
 800be18:	e7c7      	b.n	800bdaa <__gethex+0x9e>
 800be1a:	464e      	mov	r6, r9
 800be1c:	462f      	mov	r7, r5
 800be1e:	2501      	movs	r5, #1
 800be20:	e7c3      	b.n	800bdaa <__gethex+0x9e>
 800be22:	2400      	movs	r4, #0
 800be24:	1cb1      	adds	r1, r6, #2
 800be26:	e7cc      	b.n	800bdc2 <__gethex+0xb6>
 800be28:	2401      	movs	r4, #1
 800be2a:	e7fb      	b.n	800be24 <__gethex+0x118>
 800be2c:	fb03 0002 	mla	r0, r3, r2, r0
 800be30:	e7ce      	b.n	800bdd0 <__gethex+0xc4>
 800be32:	4631      	mov	r1, r6
 800be34:	e7de      	b.n	800bdf4 <__gethex+0xe8>
 800be36:	eba6 0309 	sub.w	r3, r6, r9
 800be3a:	3b01      	subs	r3, #1
 800be3c:	4629      	mov	r1, r5
 800be3e:	2b07      	cmp	r3, #7
 800be40:	dc0a      	bgt.n	800be58 <__gethex+0x14c>
 800be42:	9801      	ldr	r0, [sp, #4]
 800be44:	f7fe f950 	bl	800a0e8 <_Balloc>
 800be48:	4604      	mov	r4, r0
 800be4a:	b940      	cbnz	r0, 800be5e <__gethex+0x152>
 800be4c:	4b5c      	ldr	r3, [pc, #368]	@ (800bfc0 <__gethex+0x2b4>)
 800be4e:	4602      	mov	r2, r0
 800be50:	21e4      	movs	r1, #228	@ 0xe4
 800be52:	485c      	ldr	r0, [pc, #368]	@ (800bfc4 <__gethex+0x2b8>)
 800be54:	f7ff fec0 	bl	800bbd8 <__assert_func>
 800be58:	3101      	adds	r1, #1
 800be5a:	105b      	asrs	r3, r3, #1
 800be5c:	e7ef      	b.n	800be3e <__gethex+0x132>
 800be5e:	f100 0a14 	add.w	sl, r0, #20
 800be62:	2300      	movs	r3, #0
 800be64:	4655      	mov	r5, sl
 800be66:	469b      	mov	fp, r3
 800be68:	45b1      	cmp	r9, r6
 800be6a:	d337      	bcc.n	800bedc <__gethex+0x1d0>
 800be6c:	f845 bb04 	str.w	fp, [r5], #4
 800be70:	eba5 050a 	sub.w	r5, r5, sl
 800be74:	10ad      	asrs	r5, r5, #2
 800be76:	6125      	str	r5, [r4, #16]
 800be78:	4658      	mov	r0, fp
 800be7a:	f7fe fa27 	bl	800a2cc <__hi0bits>
 800be7e:	016d      	lsls	r5, r5, #5
 800be80:	f8d8 6000 	ldr.w	r6, [r8]
 800be84:	1a2d      	subs	r5, r5, r0
 800be86:	42b5      	cmp	r5, r6
 800be88:	dd54      	ble.n	800bf34 <__gethex+0x228>
 800be8a:	1bad      	subs	r5, r5, r6
 800be8c:	4629      	mov	r1, r5
 800be8e:	4620      	mov	r0, r4
 800be90:	f7fe fdb3 	bl	800a9fa <__any_on>
 800be94:	4681      	mov	r9, r0
 800be96:	b178      	cbz	r0, 800beb8 <__gethex+0x1ac>
 800be98:	1e6b      	subs	r3, r5, #1
 800be9a:	1159      	asrs	r1, r3, #5
 800be9c:	f003 021f 	and.w	r2, r3, #31
 800bea0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bea4:	f04f 0901 	mov.w	r9, #1
 800bea8:	fa09 f202 	lsl.w	r2, r9, r2
 800beac:	420a      	tst	r2, r1
 800beae:	d003      	beq.n	800beb8 <__gethex+0x1ac>
 800beb0:	454b      	cmp	r3, r9
 800beb2:	dc36      	bgt.n	800bf22 <__gethex+0x216>
 800beb4:	f04f 0902 	mov.w	r9, #2
 800beb8:	4629      	mov	r1, r5
 800beba:	4620      	mov	r0, r4
 800bebc:	f7ff febe 	bl	800bc3c <rshift>
 800bec0:	442f      	add	r7, r5
 800bec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bec6:	42bb      	cmp	r3, r7
 800bec8:	da42      	bge.n	800bf50 <__gethex+0x244>
 800beca:	9801      	ldr	r0, [sp, #4]
 800becc:	4621      	mov	r1, r4
 800bece:	f7fe f94b 	bl	800a168 <_Bfree>
 800bed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bed4:	2300      	movs	r3, #0
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	25a3      	movs	r5, #163	@ 0xa3
 800beda:	e793      	b.n	800be04 <__gethex+0xf8>
 800bedc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bee0:	2a2e      	cmp	r2, #46	@ 0x2e
 800bee2:	d012      	beq.n	800bf0a <__gethex+0x1fe>
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d104      	bne.n	800bef2 <__gethex+0x1e6>
 800bee8:	f845 bb04 	str.w	fp, [r5], #4
 800beec:	f04f 0b00 	mov.w	fp, #0
 800bef0:	465b      	mov	r3, fp
 800bef2:	7830      	ldrb	r0, [r6, #0]
 800bef4:	9303      	str	r3, [sp, #12]
 800bef6:	f7ff fef3 	bl	800bce0 <__hexdig_fun>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	f000 000f 	and.w	r0, r0, #15
 800bf00:	4098      	lsls	r0, r3
 800bf02:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf06:	3304      	adds	r3, #4
 800bf08:	e7ae      	b.n	800be68 <__gethex+0x15c>
 800bf0a:	45b1      	cmp	r9, r6
 800bf0c:	d8ea      	bhi.n	800bee4 <__gethex+0x1d8>
 800bf0e:	492b      	ldr	r1, [pc, #172]	@ (800bfbc <__gethex+0x2b0>)
 800bf10:	9303      	str	r3, [sp, #12]
 800bf12:	2201      	movs	r2, #1
 800bf14:	4630      	mov	r0, r6
 800bf16:	f7ff fe33 	bl	800bb80 <strncmp>
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d1e1      	bne.n	800bee4 <__gethex+0x1d8>
 800bf20:	e7a2      	b.n	800be68 <__gethex+0x15c>
 800bf22:	1ea9      	subs	r1, r5, #2
 800bf24:	4620      	mov	r0, r4
 800bf26:	f7fe fd68 	bl	800a9fa <__any_on>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d0c2      	beq.n	800beb4 <__gethex+0x1a8>
 800bf2e:	f04f 0903 	mov.w	r9, #3
 800bf32:	e7c1      	b.n	800beb8 <__gethex+0x1ac>
 800bf34:	da09      	bge.n	800bf4a <__gethex+0x23e>
 800bf36:	1b75      	subs	r5, r6, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	462a      	mov	r2, r5
 800bf3e:	f7fe fb23 	bl	800a588 <__lshift>
 800bf42:	1b7f      	subs	r7, r7, r5
 800bf44:	4604      	mov	r4, r0
 800bf46:	f100 0a14 	add.w	sl, r0, #20
 800bf4a:	f04f 0900 	mov.w	r9, #0
 800bf4e:	e7b8      	b.n	800bec2 <__gethex+0x1b6>
 800bf50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf54:	42bd      	cmp	r5, r7
 800bf56:	dd6f      	ble.n	800c038 <__gethex+0x32c>
 800bf58:	1bed      	subs	r5, r5, r7
 800bf5a:	42ae      	cmp	r6, r5
 800bf5c:	dc34      	bgt.n	800bfc8 <__gethex+0x2bc>
 800bf5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d022      	beq.n	800bfac <__gethex+0x2a0>
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d024      	beq.n	800bfb4 <__gethex+0x2a8>
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d115      	bne.n	800bf9a <__gethex+0x28e>
 800bf6e:	42ae      	cmp	r6, r5
 800bf70:	d113      	bne.n	800bf9a <__gethex+0x28e>
 800bf72:	2e01      	cmp	r6, #1
 800bf74:	d10b      	bne.n	800bf8e <__gethex+0x282>
 800bf76:	9a02      	ldr	r2, [sp, #8]
 800bf78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	2301      	movs	r3, #1
 800bf80:	6123      	str	r3, [r4, #16]
 800bf82:	f8ca 3000 	str.w	r3, [sl]
 800bf86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf88:	2562      	movs	r5, #98	@ 0x62
 800bf8a:	601c      	str	r4, [r3, #0]
 800bf8c:	e73a      	b.n	800be04 <__gethex+0xf8>
 800bf8e:	1e71      	subs	r1, r6, #1
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7fe fd32 	bl	800a9fa <__any_on>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d1ed      	bne.n	800bf76 <__gethex+0x26a>
 800bf9a:	9801      	ldr	r0, [sp, #4]
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7fe f8e3 	bl	800a168 <_Bfree>
 800bfa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	2550      	movs	r5, #80	@ 0x50
 800bfaa:	e72b      	b.n	800be04 <__gethex+0xf8>
 800bfac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1f3      	bne.n	800bf9a <__gethex+0x28e>
 800bfb2:	e7e0      	b.n	800bf76 <__gethex+0x26a>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1dd      	bne.n	800bf76 <__gethex+0x26a>
 800bfba:	e7ee      	b.n	800bf9a <__gethex+0x28e>
 800bfbc:	0800ccef 	.word	0x0800ccef
 800bfc0:	0800cc85 	.word	0x0800cc85
 800bfc4:	0800cd46 	.word	0x0800cd46
 800bfc8:	1e6f      	subs	r7, r5, #1
 800bfca:	f1b9 0f00 	cmp.w	r9, #0
 800bfce:	d130      	bne.n	800c032 <__gethex+0x326>
 800bfd0:	b127      	cbz	r7, 800bfdc <__gethex+0x2d0>
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7fe fd10 	bl	800a9fa <__any_on>
 800bfda:	4681      	mov	r9, r0
 800bfdc:	117a      	asrs	r2, r7, #5
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bfe4:	f007 071f 	and.w	r7, r7, #31
 800bfe8:	40bb      	lsls	r3, r7
 800bfea:	4213      	tst	r3, r2
 800bfec:	4629      	mov	r1, r5
 800bfee:	4620      	mov	r0, r4
 800bff0:	bf18      	it	ne
 800bff2:	f049 0902 	orrne.w	r9, r9, #2
 800bff6:	f7ff fe21 	bl	800bc3c <rshift>
 800bffa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bffe:	1b76      	subs	r6, r6, r5
 800c000:	2502      	movs	r5, #2
 800c002:	f1b9 0f00 	cmp.w	r9, #0
 800c006:	d047      	beq.n	800c098 <__gethex+0x38c>
 800c008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c00c:	2b02      	cmp	r3, #2
 800c00e:	d015      	beq.n	800c03c <__gethex+0x330>
 800c010:	2b03      	cmp	r3, #3
 800c012:	d017      	beq.n	800c044 <__gethex+0x338>
 800c014:	2b01      	cmp	r3, #1
 800c016:	d109      	bne.n	800c02c <__gethex+0x320>
 800c018:	f019 0f02 	tst.w	r9, #2
 800c01c:	d006      	beq.n	800c02c <__gethex+0x320>
 800c01e:	f8da 3000 	ldr.w	r3, [sl]
 800c022:	ea49 0903 	orr.w	r9, r9, r3
 800c026:	f019 0f01 	tst.w	r9, #1
 800c02a:	d10e      	bne.n	800c04a <__gethex+0x33e>
 800c02c:	f045 0510 	orr.w	r5, r5, #16
 800c030:	e032      	b.n	800c098 <__gethex+0x38c>
 800c032:	f04f 0901 	mov.w	r9, #1
 800c036:	e7d1      	b.n	800bfdc <__gethex+0x2d0>
 800c038:	2501      	movs	r5, #1
 800c03a:	e7e2      	b.n	800c002 <__gethex+0x2f6>
 800c03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c03e:	f1c3 0301 	rsb	r3, r3, #1
 800c042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0f0      	beq.n	800c02c <__gethex+0x320>
 800c04a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c04e:	f104 0314 	add.w	r3, r4, #20
 800c052:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c056:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c05a:	f04f 0c00 	mov.w	ip, #0
 800c05e:	4618      	mov	r0, r3
 800c060:	f853 2b04 	ldr.w	r2, [r3], #4
 800c064:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c068:	d01b      	beq.n	800c0a2 <__gethex+0x396>
 800c06a:	3201      	adds	r2, #1
 800c06c:	6002      	str	r2, [r0, #0]
 800c06e:	2d02      	cmp	r5, #2
 800c070:	f104 0314 	add.w	r3, r4, #20
 800c074:	d13c      	bne.n	800c0f0 <__gethex+0x3e4>
 800c076:	f8d8 2000 	ldr.w	r2, [r8]
 800c07a:	3a01      	subs	r2, #1
 800c07c:	42b2      	cmp	r2, r6
 800c07e:	d109      	bne.n	800c094 <__gethex+0x388>
 800c080:	1171      	asrs	r1, r6, #5
 800c082:	2201      	movs	r2, #1
 800c084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c088:	f006 061f 	and.w	r6, r6, #31
 800c08c:	fa02 f606 	lsl.w	r6, r2, r6
 800c090:	421e      	tst	r6, r3
 800c092:	d13a      	bne.n	800c10a <__gethex+0x3fe>
 800c094:	f045 0520 	orr.w	r5, r5, #32
 800c098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c09a:	601c      	str	r4, [r3, #0]
 800c09c:	9b02      	ldr	r3, [sp, #8]
 800c09e:	601f      	str	r7, [r3, #0]
 800c0a0:	e6b0      	b.n	800be04 <__gethex+0xf8>
 800c0a2:	4299      	cmp	r1, r3
 800c0a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0a8:	d8d9      	bhi.n	800c05e <__gethex+0x352>
 800c0aa:	68a3      	ldr	r3, [r4, #8]
 800c0ac:	459b      	cmp	fp, r3
 800c0ae:	db17      	blt.n	800c0e0 <__gethex+0x3d4>
 800c0b0:	6861      	ldr	r1, [r4, #4]
 800c0b2:	9801      	ldr	r0, [sp, #4]
 800c0b4:	3101      	adds	r1, #1
 800c0b6:	f7fe f817 	bl	800a0e8 <_Balloc>
 800c0ba:	4681      	mov	r9, r0
 800c0bc:	b918      	cbnz	r0, 800c0c6 <__gethex+0x3ba>
 800c0be:	4b1a      	ldr	r3, [pc, #104]	@ (800c128 <__gethex+0x41c>)
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	2184      	movs	r1, #132	@ 0x84
 800c0c4:	e6c5      	b.n	800be52 <__gethex+0x146>
 800c0c6:	6922      	ldr	r2, [r4, #16]
 800c0c8:	3202      	adds	r2, #2
 800c0ca:	f104 010c 	add.w	r1, r4, #12
 800c0ce:	0092      	lsls	r2, r2, #2
 800c0d0:	300c      	adds	r0, #12
 800c0d2:	f7fd f89c 	bl	800920e <memcpy>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	9801      	ldr	r0, [sp, #4]
 800c0da:	f7fe f845 	bl	800a168 <_Bfree>
 800c0de:	464c      	mov	r4, r9
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0e8:	6122      	str	r2, [r4, #16]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	615a      	str	r2, [r3, #20]
 800c0ee:	e7be      	b.n	800c06e <__gethex+0x362>
 800c0f0:	6922      	ldr	r2, [r4, #16]
 800c0f2:	455a      	cmp	r2, fp
 800c0f4:	dd0b      	ble.n	800c10e <__gethex+0x402>
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7ff fd9f 	bl	800bc3c <rshift>
 800c0fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c102:	3701      	adds	r7, #1
 800c104:	42bb      	cmp	r3, r7
 800c106:	f6ff aee0 	blt.w	800beca <__gethex+0x1be>
 800c10a:	2501      	movs	r5, #1
 800c10c:	e7c2      	b.n	800c094 <__gethex+0x388>
 800c10e:	f016 061f 	ands.w	r6, r6, #31
 800c112:	d0fa      	beq.n	800c10a <__gethex+0x3fe>
 800c114:	4453      	add	r3, sl
 800c116:	f1c6 0620 	rsb	r6, r6, #32
 800c11a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c11e:	f7fe f8d5 	bl	800a2cc <__hi0bits>
 800c122:	42b0      	cmp	r0, r6
 800c124:	dbe7      	blt.n	800c0f6 <__gethex+0x3ea>
 800c126:	e7f0      	b.n	800c10a <__gethex+0x3fe>
 800c128:	0800cc85 	.word	0x0800cc85

0800c12c <L_shift>:
 800c12c:	f1c2 0208 	rsb	r2, r2, #8
 800c130:	0092      	lsls	r2, r2, #2
 800c132:	b570      	push	{r4, r5, r6, lr}
 800c134:	f1c2 0620 	rsb	r6, r2, #32
 800c138:	6843      	ldr	r3, [r0, #4]
 800c13a:	6804      	ldr	r4, [r0, #0]
 800c13c:	fa03 f506 	lsl.w	r5, r3, r6
 800c140:	432c      	orrs	r4, r5
 800c142:	40d3      	lsrs	r3, r2
 800c144:	6004      	str	r4, [r0, #0]
 800c146:	f840 3f04 	str.w	r3, [r0, #4]!
 800c14a:	4288      	cmp	r0, r1
 800c14c:	d3f4      	bcc.n	800c138 <L_shift+0xc>
 800c14e:	bd70      	pop	{r4, r5, r6, pc}

0800c150 <__match>:
 800c150:	b530      	push	{r4, r5, lr}
 800c152:	6803      	ldr	r3, [r0, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c15a:	b914      	cbnz	r4, 800c162 <__match+0x12>
 800c15c:	6003      	str	r3, [r0, #0]
 800c15e:	2001      	movs	r0, #1
 800c160:	bd30      	pop	{r4, r5, pc}
 800c162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c166:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c16a:	2d19      	cmp	r5, #25
 800c16c:	bf98      	it	ls
 800c16e:	3220      	addls	r2, #32
 800c170:	42a2      	cmp	r2, r4
 800c172:	d0f0      	beq.n	800c156 <__match+0x6>
 800c174:	2000      	movs	r0, #0
 800c176:	e7f3      	b.n	800c160 <__match+0x10>

0800c178 <__hexnan>:
 800c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	680b      	ldr	r3, [r1, #0]
 800c17e:	6801      	ldr	r1, [r0, #0]
 800c180:	115e      	asrs	r6, r3, #5
 800c182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c186:	f013 031f 	ands.w	r3, r3, #31
 800c18a:	b087      	sub	sp, #28
 800c18c:	bf18      	it	ne
 800c18e:	3604      	addne	r6, #4
 800c190:	2500      	movs	r5, #0
 800c192:	1f37      	subs	r7, r6, #4
 800c194:	4682      	mov	sl, r0
 800c196:	4690      	mov	r8, r2
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c19e:	46b9      	mov	r9, r7
 800c1a0:	463c      	mov	r4, r7
 800c1a2:	9502      	str	r5, [sp, #8]
 800c1a4:	46ab      	mov	fp, r5
 800c1a6:	784a      	ldrb	r2, [r1, #1]
 800c1a8:	1c4b      	adds	r3, r1, #1
 800c1aa:	9303      	str	r3, [sp, #12]
 800c1ac:	b342      	cbz	r2, 800c200 <__hexnan+0x88>
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	9105      	str	r1, [sp, #20]
 800c1b2:	9204      	str	r2, [sp, #16]
 800c1b4:	f7ff fd94 	bl	800bce0 <__hexdig_fun>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d151      	bne.n	800c260 <__hexnan+0xe8>
 800c1bc:	9a04      	ldr	r2, [sp, #16]
 800c1be:	9905      	ldr	r1, [sp, #20]
 800c1c0:	2a20      	cmp	r2, #32
 800c1c2:	d818      	bhi.n	800c1f6 <__hexnan+0x7e>
 800c1c4:	9b02      	ldr	r3, [sp, #8]
 800c1c6:	459b      	cmp	fp, r3
 800c1c8:	dd13      	ble.n	800c1f2 <__hexnan+0x7a>
 800c1ca:	454c      	cmp	r4, r9
 800c1cc:	d206      	bcs.n	800c1dc <__hexnan+0x64>
 800c1ce:	2d07      	cmp	r5, #7
 800c1d0:	dc04      	bgt.n	800c1dc <__hexnan+0x64>
 800c1d2:	462a      	mov	r2, r5
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f7ff ffa8 	bl	800c12c <L_shift>
 800c1dc:	4544      	cmp	r4, r8
 800c1de:	d952      	bls.n	800c286 <__hexnan+0x10e>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f1a4 0904 	sub.w	r9, r4, #4
 800c1e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c1ee:	464c      	mov	r4, r9
 800c1f0:	461d      	mov	r5, r3
 800c1f2:	9903      	ldr	r1, [sp, #12]
 800c1f4:	e7d7      	b.n	800c1a6 <__hexnan+0x2e>
 800c1f6:	2a29      	cmp	r2, #41	@ 0x29
 800c1f8:	d157      	bne.n	800c2aa <__hexnan+0x132>
 800c1fa:	3102      	adds	r1, #2
 800c1fc:	f8ca 1000 	str.w	r1, [sl]
 800c200:	f1bb 0f00 	cmp.w	fp, #0
 800c204:	d051      	beq.n	800c2aa <__hexnan+0x132>
 800c206:	454c      	cmp	r4, r9
 800c208:	d206      	bcs.n	800c218 <__hexnan+0xa0>
 800c20a:	2d07      	cmp	r5, #7
 800c20c:	dc04      	bgt.n	800c218 <__hexnan+0xa0>
 800c20e:	462a      	mov	r2, r5
 800c210:	4649      	mov	r1, r9
 800c212:	4620      	mov	r0, r4
 800c214:	f7ff ff8a 	bl	800c12c <L_shift>
 800c218:	4544      	cmp	r4, r8
 800c21a:	d936      	bls.n	800c28a <__hexnan+0x112>
 800c21c:	f1a8 0204 	sub.w	r2, r8, #4
 800c220:	4623      	mov	r3, r4
 800c222:	f853 1b04 	ldr.w	r1, [r3], #4
 800c226:	f842 1f04 	str.w	r1, [r2, #4]!
 800c22a:	429f      	cmp	r7, r3
 800c22c:	d2f9      	bcs.n	800c222 <__hexnan+0xaa>
 800c22e:	1b3b      	subs	r3, r7, r4
 800c230:	f023 0303 	bic.w	r3, r3, #3
 800c234:	3304      	adds	r3, #4
 800c236:	3401      	adds	r4, #1
 800c238:	3e03      	subs	r6, #3
 800c23a:	42b4      	cmp	r4, r6
 800c23c:	bf88      	it	hi
 800c23e:	2304      	movhi	r3, #4
 800c240:	4443      	add	r3, r8
 800c242:	2200      	movs	r2, #0
 800c244:	f843 2b04 	str.w	r2, [r3], #4
 800c248:	429f      	cmp	r7, r3
 800c24a:	d2fb      	bcs.n	800c244 <__hexnan+0xcc>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	b91b      	cbnz	r3, 800c258 <__hexnan+0xe0>
 800c250:	4547      	cmp	r7, r8
 800c252:	d128      	bne.n	800c2a6 <__hexnan+0x12e>
 800c254:	2301      	movs	r3, #1
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	2005      	movs	r0, #5
 800c25a:	b007      	add	sp, #28
 800c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c260:	3501      	adds	r5, #1
 800c262:	2d08      	cmp	r5, #8
 800c264:	f10b 0b01 	add.w	fp, fp, #1
 800c268:	dd06      	ble.n	800c278 <__hexnan+0x100>
 800c26a:	4544      	cmp	r4, r8
 800c26c:	d9c1      	bls.n	800c1f2 <__hexnan+0x7a>
 800c26e:	2300      	movs	r3, #0
 800c270:	f844 3c04 	str.w	r3, [r4, #-4]
 800c274:	2501      	movs	r5, #1
 800c276:	3c04      	subs	r4, #4
 800c278:	6822      	ldr	r2, [r4, #0]
 800c27a:	f000 000f 	and.w	r0, r0, #15
 800c27e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c282:	6020      	str	r0, [r4, #0]
 800c284:	e7b5      	b.n	800c1f2 <__hexnan+0x7a>
 800c286:	2508      	movs	r5, #8
 800c288:	e7b3      	b.n	800c1f2 <__hexnan+0x7a>
 800c28a:	9b01      	ldr	r3, [sp, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0dd      	beq.n	800c24c <__hexnan+0xd4>
 800c290:	f1c3 0320 	rsb	r3, r3, #32
 800c294:	f04f 32ff 	mov.w	r2, #4294967295
 800c298:	40da      	lsrs	r2, r3
 800c29a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c2a4:	e7d2      	b.n	800c24c <__hexnan+0xd4>
 800c2a6:	3f04      	subs	r7, #4
 800c2a8:	e7d0      	b.n	800c24c <__hexnan+0xd4>
 800c2aa:	2004      	movs	r0, #4
 800c2ac:	e7d5      	b.n	800c25a <__hexnan+0xe2>

0800c2ae <__ascii_mbtowc>:
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	b901      	cbnz	r1, 800c2b4 <__ascii_mbtowc+0x6>
 800c2b2:	a901      	add	r1, sp, #4
 800c2b4:	b142      	cbz	r2, 800c2c8 <__ascii_mbtowc+0x1a>
 800c2b6:	b14b      	cbz	r3, 800c2cc <__ascii_mbtowc+0x1e>
 800c2b8:	7813      	ldrb	r3, [r2, #0]
 800c2ba:	600b      	str	r3, [r1, #0]
 800c2bc:	7812      	ldrb	r2, [r2, #0]
 800c2be:	1e10      	subs	r0, r2, #0
 800c2c0:	bf18      	it	ne
 800c2c2:	2001      	movne	r0, #1
 800c2c4:	b002      	add	sp, #8
 800c2c6:	4770      	bx	lr
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	e7fb      	b.n	800c2c4 <__ascii_mbtowc+0x16>
 800c2cc:	f06f 0001 	mvn.w	r0, #1
 800c2d0:	e7f8      	b.n	800c2c4 <__ascii_mbtowc+0x16>

0800c2d2 <_realloc_r>:
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	4614      	mov	r4, r2
 800c2da:	460d      	mov	r5, r1
 800c2dc:	b921      	cbnz	r1, 800c2e8 <_realloc_r+0x16>
 800c2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	f7fd be74 	b.w	8009fd0 <_malloc_r>
 800c2e8:	b92a      	cbnz	r2, 800c2f6 <_realloc_r+0x24>
 800c2ea:	f7fd fdfd 	bl	8009ee8 <_free_r>
 800c2ee:	4625      	mov	r5, r4
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f6:	f000 f840 	bl	800c37a <_malloc_usable_size_r>
 800c2fa:	4284      	cmp	r4, r0
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	d802      	bhi.n	800c306 <_realloc_r+0x34>
 800c300:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c304:	d8f4      	bhi.n	800c2f0 <_realloc_r+0x1e>
 800c306:	4621      	mov	r1, r4
 800c308:	4638      	mov	r0, r7
 800c30a:	f7fd fe61 	bl	8009fd0 <_malloc_r>
 800c30e:	4680      	mov	r8, r0
 800c310:	b908      	cbnz	r0, 800c316 <_realloc_r+0x44>
 800c312:	4645      	mov	r5, r8
 800c314:	e7ec      	b.n	800c2f0 <_realloc_r+0x1e>
 800c316:	42b4      	cmp	r4, r6
 800c318:	4622      	mov	r2, r4
 800c31a:	4629      	mov	r1, r5
 800c31c:	bf28      	it	cs
 800c31e:	4632      	movcs	r2, r6
 800c320:	f7fc ff75 	bl	800920e <memcpy>
 800c324:	4629      	mov	r1, r5
 800c326:	4638      	mov	r0, r7
 800c328:	f7fd fdde 	bl	8009ee8 <_free_r>
 800c32c:	e7f1      	b.n	800c312 <_realloc_r+0x40>

0800c32e <__ascii_wctomb>:
 800c32e:	4603      	mov	r3, r0
 800c330:	4608      	mov	r0, r1
 800c332:	b141      	cbz	r1, 800c346 <__ascii_wctomb+0x18>
 800c334:	2aff      	cmp	r2, #255	@ 0xff
 800c336:	d904      	bls.n	800c342 <__ascii_wctomb+0x14>
 800c338:	228a      	movs	r2, #138	@ 0x8a
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	4770      	bx	lr
 800c342:	700a      	strb	r2, [r1, #0]
 800c344:	2001      	movs	r0, #1
 800c346:	4770      	bx	lr

0800c348 <fiprintf>:
 800c348:	b40e      	push	{r1, r2, r3}
 800c34a:	b503      	push	{r0, r1, lr}
 800c34c:	4601      	mov	r1, r0
 800c34e:	ab03      	add	r3, sp, #12
 800c350:	4805      	ldr	r0, [pc, #20]	@ (800c368 <fiprintf+0x20>)
 800c352:	f853 2b04 	ldr.w	r2, [r3], #4
 800c356:	6800      	ldr	r0, [r0, #0]
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	f000 f83f 	bl	800c3dc <_vfiprintf_r>
 800c35e:	b002      	add	sp, #8
 800c360:	f85d eb04 	ldr.w	lr, [sp], #4
 800c364:	b003      	add	sp, #12
 800c366:	4770      	bx	lr
 800c368:	2000010c 	.word	0x2000010c

0800c36c <abort>:
 800c36c:	b508      	push	{r3, lr}
 800c36e:	2006      	movs	r0, #6
 800c370:	f000 fa08 	bl	800c784 <raise>
 800c374:	2001      	movs	r0, #1
 800c376:	f7f5 f959 	bl	800162c <_exit>

0800c37a <_malloc_usable_size_r>:
 800c37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c37e:	1f18      	subs	r0, r3, #4
 800c380:	2b00      	cmp	r3, #0
 800c382:	bfbc      	itt	lt
 800c384:	580b      	ldrlt	r3, [r1, r0]
 800c386:	18c0      	addlt	r0, r0, r3
 800c388:	4770      	bx	lr

0800c38a <__sfputc_r>:
 800c38a:	6893      	ldr	r3, [r2, #8]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	b410      	push	{r4}
 800c392:	6093      	str	r3, [r2, #8]
 800c394:	da08      	bge.n	800c3a8 <__sfputc_r+0x1e>
 800c396:	6994      	ldr	r4, [r2, #24]
 800c398:	42a3      	cmp	r3, r4
 800c39a:	db01      	blt.n	800c3a0 <__sfputc_r+0x16>
 800c39c:	290a      	cmp	r1, #10
 800c39e:	d103      	bne.n	800c3a8 <__sfputc_r+0x1e>
 800c3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a4:	f000 b932 	b.w	800c60c <__swbuf_r>
 800c3a8:	6813      	ldr	r3, [r2, #0]
 800c3aa:	1c58      	adds	r0, r3, #1
 800c3ac:	6010      	str	r0, [r2, #0]
 800c3ae:	7019      	strb	r1, [r3, #0]
 800c3b0:	4608      	mov	r0, r1
 800c3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <__sfputs_r>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	460f      	mov	r7, r1
 800c3be:	4614      	mov	r4, r2
 800c3c0:	18d5      	adds	r5, r2, r3
 800c3c2:	42ac      	cmp	r4, r5
 800c3c4:	d101      	bne.n	800c3ca <__sfputs_r+0x12>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	e007      	b.n	800c3da <__sfputs_r+0x22>
 800c3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ce:	463a      	mov	r2, r7
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7ff ffda 	bl	800c38a <__sfputc_r>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d1f3      	bne.n	800c3c2 <__sfputs_r+0xa>
 800c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c3dc <_vfiprintf_r>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	b09d      	sub	sp, #116	@ 0x74
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	4698      	mov	r8, r3
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	b118      	cbz	r0, 800c3f4 <_vfiprintf_r+0x18>
 800c3ec:	6a03      	ldr	r3, [r0, #32]
 800c3ee:	b90b      	cbnz	r3, 800c3f4 <_vfiprintf_r+0x18>
 800c3f0:	f7fc fdf2 	bl	8008fd8 <__sinit>
 800c3f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3f6:	07d9      	lsls	r1, r3, #31
 800c3f8:	d405      	bmi.n	800c406 <_vfiprintf_r+0x2a>
 800c3fa:	89ab      	ldrh	r3, [r5, #12]
 800c3fc:	059a      	lsls	r2, r3, #22
 800c3fe:	d402      	bmi.n	800c406 <_vfiprintf_r+0x2a>
 800c400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c402:	f7fc ff02 	bl	800920a <__retarget_lock_acquire_recursive>
 800c406:	89ab      	ldrh	r3, [r5, #12]
 800c408:	071b      	lsls	r3, r3, #28
 800c40a:	d501      	bpl.n	800c410 <_vfiprintf_r+0x34>
 800c40c:	692b      	ldr	r3, [r5, #16]
 800c40e:	b99b      	cbnz	r3, 800c438 <_vfiprintf_r+0x5c>
 800c410:	4629      	mov	r1, r5
 800c412:	4630      	mov	r0, r6
 800c414:	f000 f938 	bl	800c688 <__swsetup_r>
 800c418:	b170      	cbz	r0, 800c438 <_vfiprintf_r+0x5c>
 800c41a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c41c:	07dc      	lsls	r4, r3, #31
 800c41e:	d504      	bpl.n	800c42a <_vfiprintf_r+0x4e>
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	b01d      	add	sp, #116	@ 0x74
 800c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42a:	89ab      	ldrh	r3, [r5, #12]
 800c42c:	0598      	lsls	r0, r3, #22
 800c42e:	d4f7      	bmi.n	800c420 <_vfiprintf_r+0x44>
 800c430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c432:	f7fc feeb 	bl	800920c <__retarget_lock_release_recursive>
 800c436:	e7f3      	b.n	800c420 <_vfiprintf_r+0x44>
 800c438:	2300      	movs	r3, #0
 800c43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c43c:	2320      	movs	r3, #32
 800c43e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c442:	f8cd 800c 	str.w	r8, [sp, #12]
 800c446:	2330      	movs	r3, #48	@ 0x30
 800c448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5f8 <_vfiprintf_r+0x21c>
 800c44c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c450:	f04f 0901 	mov.w	r9, #1
 800c454:	4623      	mov	r3, r4
 800c456:	469a      	mov	sl, r3
 800c458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c45c:	b10a      	cbz	r2, 800c462 <_vfiprintf_r+0x86>
 800c45e:	2a25      	cmp	r2, #37	@ 0x25
 800c460:	d1f9      	bne.n	800c456 <_vfiprintf_r+0x7a>
 800c462:	ebba 0b04 	subs.w	fp, sl, r4
 800c466:	d00b      	beq.n	800c480 <_vfiprintf_r+0xa4>
 800c468:	465b      	mov	r3, fp
 800c46a:	4622      	mov	r2, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	4630      	mov	r0, r6
 800c470:	f7ff ffa2 	bl	800c3b8 <__sfputs_r>
 800c474:	3001      	adds	r0, #1
 800c476:	f000 80a7 	beq.w	800c5c8 <_vfiprintf_r+0x1ec>
 800c47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c47c:	445a      	add	r2, fp
 800c47e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c480:	f89a 3000 	ldrb.w	r3, [sl]
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 809f 	beq.w	800c5c8 <_vfiprintf_r+0x1ec>
 800c48a:	2300      	movs	r3, #0
 800c48c:	f04f 32ff 	mov.w	r2, #4294967295
 800c490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c494:	f10a 0a01 	add.w	sl, sl, #1
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	9307      	str	r3, [sp, #28]
 800c49c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4a2:	4654      	mov	r4, sl
 800c4a4:	2205      	movs	r2, #5
 800c4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4aa:	4853      	ldr	r0, [pc, #332]	@ (800c5f8 <_vfiprintf_r+0x21c>)
 800c4ac:	f7f3 fe98 	bl	80001e0 <memchr>
 800c4b0:	9a04      	ldr	r2, [sp, #16]
 800c4b2:	b9d8      	cbnz	r0, 800c4ec <_vfiprintf_r+0x110>
 800c4b4:	06d1      	lsls	r1, r2, #27
 800c4b6:	bf44      	itt	mi
 800c4b8:	2320      	movmi	r3, #32
 800c4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4be:	0713      	lsls	r3, r2, #28
 800c4c0:	bf44      	itt	mi
 800c4c2:	232b      	movmi	r3, #43	@ 0x2b
 800c4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ce:	d015      	beq.n	800c4fc <_vfiprintf_r+0x120>
 800c4d0:	9a07      	ldr	r2, [sp, #28]
 800c4d2:	4654      	mov	r4, sl
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	f04f 0c0a 	mov.w	ip, #10
 800c4da:	4621      	mov	r1, r4
 800c4dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e0:	3b30      	subs	r3, #48	@ 0x30
 800c4e2:	2b09      	cmp	r3, #9
 800c4e4:	d94b      	bls.n	800c57e <_vfiprintf_r+0x1a2>
 800c4e6:	b1b0      	cbz	r0, 800c516 <_vfiprintf_r+0x13a>
 800c4e8:	9207      	str	r2, [sp, #28]
 800c4ea:	e014      	b.n	800c516 <_vfiprintf_r+0x13a>
 800c4ec:	eba0 0308 	sub.w	r3, r0, r8
 800c4f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	9304      	str	r3, [sp, #16]
 800c4f8:	46a2      	mov	sl, r4
 800c4fa:	e7d2      	b.n	800c4a2 <_vfiprintf_r+0xc6>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	1d19      	adds	r1, r3, #4
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	9103      	str	r1, [sp, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	bfbb      	ittet	lt
 800c508:	425b      	neglt	r3, r3
 800c50a:	f042 0202 	orrlt.w	r2, r2, #2
 800c50e:	9307      	strge	r3, [sp, #28]
 800c510:	9307      	strlt	r3, [sp, #28]
 800c512:	bfb8      	it	lt
 800c514:	9204      	strlt	r2, [sp, #16]
 800c516:	7823      	ldrb	r3, [r4, #0]
 800c518:	2b2e      	cmp	r3, #46	@ 0x2e
 800c51a:	d10a      	bne.n	800c532 <_vfiprintf_r+0x156>
 800c51c:	7863      	ldrb	r3, [r4, #1]
 800c51e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c520:	d132      	bne.n	800c588 <_vfiprintf_r+0x1ac>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	1d1a      	adds	r2, r3, #4
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	9203      	str	r2, [sp, #12]
 800c52a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c52e:	3402      	adds	r4, #2
 800c530:	9305      	str	r3, [sp, #20]
 800c532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c608 <_vfiprintf_r+0x22c>
 800c536:	7821      	ldrb	r1, [r4, #0]
 800c538:	2203      	movs	r2, #3
 800c53a:	4650      	mov	r0, sl
 800c53c:	f7f3 fe50 	bl	80001e0 <memchr>
 800c540:	b138      	cbz	r0, 800c552 <_vfiprintf_r+0x176>
 800c542:	9b04      	ldr	r3, [sp, #16]
 800c544:	eba0 000a 	sub.w	r0, r0, sl
 800c548:	2240      	movs	r2, #64	@ 0x40
 800c54a:	4082      	lsls	r2, r0
 800c54c:	4313      	orrs	r3, r2
 800c54e:	3401      	adds	r4, #1
 800c550:	9304      	str	r3, [sp, #16]
 800c552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c556:	4829      	ldr	r0, [pc, #164]	@ (800c5fc <_vfiprintf_r+0x220>)
 800c558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c55c:	2206      	movs	r2, #6
 800c55e:	f7f3 fe3f 	bl	80001e0 <memchr>
 800c562:	2800      	cmp	r0, #0
 800c564:	d03f      	beq.n	800c5e6 <_vfiprintf_r+0x20a>
 800c566:	4b26      	ldr	r3, [pc, #152]	@ (800c600 <_vfiprintf_r+0x224>)
 800c568:	bb1b      	cbnz	r3, 800c5b2 <_vfiprintf_r+0x1d6>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	3307      	adds	r3, #7
 800c56e:	f023 0307 	bic.w	r3, r3, #7
 800c572:	3308      	adds	r3, #8
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c578:	443b      	add	r3, r7
 800c57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c57c:	e76a      	b.n	800c454 <_vfiprintf_r+0x78>
 800c57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c582:	460c      	mov	r4, r1
 800c584:	2001      	movs	r0, #1
 800c586:	e7a8      	b.n	800c4da <_vfiprintf_r+0xfe>
 800c588:	2300      	movs	r3, #0
 800c58a:	3401      	adds	r4, #1
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	4619      	mov	r1, r3
 800c590:	f04f 0c0a 	mov.w	ip, #10
 800c594:	4620      	mov	r0, r4
 800c596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c59a:	3a30      	subs	r2, #48	@ 0x30
 800c59c:	2a09      	cmp	r2, #9
 800c59e:	d903      	bls.n	800c5a8 <_vfiprintf_r+0x1cc>
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0c6      	beq.n	800c532 <_vfiprintf_r+0x156>
 800c5a4:	9105      	str	r1, [sp, #20]
 800c5a6:	e7c4      	b.n	800c532 <_vfiprintf_r+0x156>
 800c5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e7f0      	b.n	800c594 <_vfiprintf_r+0x1b8>
 800c5b2:	ab03      	add	r3, sp, #12
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4b12      	ldr	r3, [pc, #72]	@ (800c604 <_vfiprintf_r+0x228>)
 800c5ba:	a904      	add	r1, sp, #16
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7fb febb 	bl	8008338 <_printf_float>
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	1c78      	adds	r0, r7, #1
 800c5c6:	d1d6      	bne.n	800c576 <_vfiprintf_r+0x19a>
 800c5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d405      	bmi.n	800c5da <_vfiprintf_r+0x1fe>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	059a      	lsls	r2, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_vfiprintf_r+0x1fe>
 800c5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5d6:	f7fc fe19 	bl	800920c <__retarget_lock_release_recursive>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	065b      	lsls	r3, r3, #25
 800c5de:	f53f af1f 	bmi.w	800c420 <_vfiprintf_r+0x44>
 800c5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5e4:	e71e      	b.n	800c424 <_vfiprintf_r+0x48>
 800c5e6:	ab03      	add	r3, sp, #12
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4b05      	ldr	r3, [pc, #20]	@ (800c604 <_vfiprintf_r+0x228>)
 800c5ee:	a904      	add	r1, sp, #16
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7fc f939 	bl	8008868 <_printf_i>
 800c5f6:	e7e4      	b.n	800c5c2 <_vfiprintf_r+0x1e6>
 800c5f8:	0800ccf1 	.word	0x0800ccf1
 800c5fc:	0800ccfb 	.word	0x0800ccfb
 800c600:	08008339 	.word	0x08008339
 800c604:	0800c3b9 	.word	0x0800c3b9
 800c608:	0800ccf7 	.word	0x0800ccf7

0800c60c <__swbuf_r>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	460e      	mov	r6, r1
 800c610:	4614      	mov	r4, r2
 800c612:	4605      	mov	r5, r0
 800c614:	b118      	cbz	r0, 800c61e <__swbuf_r+0x12>
 800c616:	6a03      	ldr	r3, [r0, #32]
 800c618:	b90b      	cbnz	r3, 800c61e <__swbuf_r+0x12>
 800c61a:	f7fc fcdd 	bl	8008fd8 <__sinit>
 800c61e:	69a3      	ldr	r3, [r4, #24]
 800c620:	60a3      	str	r3, [r4, #8]
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	071a      	lsls	r2, r3, #28
 800c626:	d501      	bpl.n	800c62c <__swbuf_r+0x20>
 800c628:	6923      	ldr	r3, [r4, #16]
 800c62a:	b943      	cbnz	r3, 800c63e <__swbuf_r+0x32>
 800c62c:	4621      	mov	r1, r4
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 f82a 	bl	800c688 <__swsetup_r>
 800c634:	b118      	cbz	r0, 800c63e <__swbuf_r+0x32>
 800c636:	f04f 37ff 	mov.w	r7, #4294967295
 800c63a:	4638      	mov	r0, r7
 800c63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	6922      	ldr	r2, [r4, #16]
 800c642:	1a98      	subs	r0, r3, r2
 800c644:	6963      	ldr	r3, [r4, #20]
 800c646:	b2f6      	uxtb	r6, r6
 800c648:	4283      	cmp	r3, r0
 800c64a:	4637      	mov	r7, r6
 800c64c:	dc05      	bgt.n	800c65a <__swbuf_r+0x4e>
 800c64e:	4621      	mov	r1, r4
 800c650:	4628      	mov	r0, r5
 800c652:	f7ff fa53 	bl	800bafc <_fflush_r>
 800c656:	2800      	cmp	r0, #0
 800c658:	d1ed      	bne.n	800c636 <__swbuf_r+0x2a>
 800c65a:	68a3      	ldr	r3, [r4, #8]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	60a3      	str	r3, [r4, #8]
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	701e      	strb	r6, [r3, #0]
 800c668:	6962      	ldr	r2, [r4, #20]
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d004      	beq.n	800c67a <__swbuf_r+0x6e>
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	07db      	lsls	r3, r3, #31
 800c674:	d5e1      	bpl.n	800c63a <__swbuf_r+0x2e>
 800c676:	2e0a      	cmp	r6, #10
 800c678:	d1df      	bne.n	800c63a <__swbuf_r+0x2e>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f7ff fa3d 	bl	800bafc <_fflush_r>
 800c682:	2800      	cmp	r0, #0
 800c684:	d0d9      	beq.n	800c63a <__swbuf_r+0x2e>
 800c686:	e7d6      	b.n	800c636 <__swbuf_r+0x2a>

0800c688 <__swsetup_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4b29      	ldr	r3, [pc, #164]	@ (800c730 <__swsetup_r+0xa8>)
 800c68c:	4605      	mov	r5, r0
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	460c      	mov	r4, r1
 800c692:	b118      	cbz	r0, 800c69c <__swsetup_r+0x14>
 800c694:	6a03      	ldr	r3, [r0, #32]
 800c696:	b90b      	cbnz	r3, 800c69c <__swsetup_r+0x14>
 800c698:	f7fc fc9e 	bl	8008fd8 <__sinit>
 800c69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a0:	0719      	lsls	r1, r3, #28
 800c6a2:	d422      	bmi.n	800c6ea <__swsetup_r+0x62>
 800c6a4:	06da      	lsls	r2, r3, #27
 800c6a6:	d407      	bmi.n	800c6b8 <__swsetup_r+0x30>
 800c6a8:	2209      	movs	r2, #9
 800c6aa:	602a      	str	r2, [r5, #0]
 800c6ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b6:	e033      	b.n	800c720 <__swsetup_r+0x98>
 800c6b8:	0758      	lsls	r0, r3, #29
 800c6ba:	d512      	bpl.n	800c6e2 <__swsetup_r+0x5a>
 800c6bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6be:	b141      	cbz	r1, 800c6d2 <__swsetup_r+0x4a>
 800c6c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6c4:	4299      	cmp	r1, r3
 800c6c6:	d002      	beq.n	800c6ce <__swsetup_r+0x46>
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f7fd fc0d 	bl	8009ee8 <_free_r>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6d2:	89a3      	ldrh	r3, [r4, #12]
 800c6d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c6d8:	81a3      	strh	r3, [r4, #12]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	6063      	str	r3, [r4, #4]
 800c6de:	6923      	ldr	r3, [r4, #16]
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	f043 0308 	orr.w	r3, r3, #8
 800c6e8:	81a3      	strh	r3, [r4, #12]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	b94b      	cbnz	r3, 800c702 <__swsetup_r+0x7a>
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6f8:	d003      	beq.n	800c702 <__swsetup_r+0x7a>
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f000 f883 	bl	800c808 <__smakebuf_r>
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	f013 0201 	ands.w	r2, r3, #1
 800c70a:	d00a      	beq.n	800c722 <__swsetup_r+0x9a>
 800c70c:	2200      	movs	r2, #0
 800c70e:	60a2      	str	r2, [r4, #8]
 800c710:	6962      	ldr	r2, [r4, #20]
 800c712:	4252      	negs	r2, r2
 800c714:	61a2      	str	r2, [r4, #24]
 800c716:	6922      	ldr	r2, [r4, #16]
 800c718:	b942      	cbnz	r2, 800c72c <__swsetup_r+0xa4>
 800c71a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c71e:	d1c5      	bne.n	800c6ac <__swsetup_r+0x24>
 800c720:	bd38      	pop	{r3, r4, r5, pc}
 800c722:	0799      	lsls	r1, r3, #30
 800c724:	bf58      	it	pl
 800c726:	6962      	ldrpl	r2, [r4, #20]
 800c728:	60a2      	str	r2, [r4, #8]
 800c72a:	e7f4      	b.n	800c716 <__swsetup_r+0x8e>
 800c72c:	2000      	movs	r0, #0
 800c72e:	e7f7      	b.n	800c720 <__swsetup_r+0x98>
 800c730:	2000010c 	.word	0x2000010c

0800c734 <_raise_r>:
 800c734:	291f      	cmp	r1, #31
 800c736:	b538      	push	{r3, r4, r5, lr}
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	d904      	bls.n	800c748 <_raise_r+0x14>
 800c73e:	2316      	movs	r3, #22
 800c740:	6003      	str	r3, [r0, #0]
 800c742:	f04f 30ff 	mov.w	r0, #4294967295
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c74a:	b112      	cbz	r2, 800c752 <_raise_r+0x1e>
 800c74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c750:	b94b      	cbnz	r3, 800c766 <_raise_r+0x32>
 800c752:	4628      	mov	r0, r5
 800c754:	f000 f830 	bl	800c7b8 <_getpid_r>
 800c758:	4622      	mov	r2, r4
 800c75a:	4601      	mov	r1, r0
 800c75c:	4628      	mov	r0, r5
 800c75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c762:	f000 b817 	b.w	800c794 <_kill_r>
 800c766:	2b01      	cmp	r3, #1
 800c768:	d00a      	beq.n	800c780 <_raise_r+0x4c>
 800c76a:	1c59      	adds	r1, r3, #1
 800c76c:	d103      	bne.n	800c776 <_raise_r+0x42>
 800c76e:	2316      	movs	r3, #22
 800c770:	6003      	str	r3, [r0, #0]
 800c772:	2001      	movs	r0, #1
 800c774:	e7e7      	b.n	800c746 <_raise_r+0x12>
 800c776:	2100      	movs	r1, #0
 800c778:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c77c:	4620      	mov	r0, r4
 800c77e:	4798      	blx	r3
 800c780:	2000      	movs	r0, #0
 800c782:	e7e0      	b.n	800c746 <_raise_r+0x12>

0800c784 <raise>:
 800c784:	4b02      	ldr	r3, [pc, #8]	@ (800c790 <raise+0xc>)
 800c786:	4601      	mov	r1, r0
 800c788:	6818      	ldr	r0, [r3, #0]
 800c78a:	f7ff bfd3 	b.w	800c734 <_raise_r>
 800c78e:	bf00      	nop
 800c790:	2000010c 	.word	0x2000010c

0800c794 <_kill_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4d07      	ldr	r5, [pc, #28]	@ (800c7b4 <_kill_r+0x20>)
 800c798:	2300      	movs	r3, #0
 800c79a:	4604      	mov	r4, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	4611      	mov	r1, r2
 800c7a0:	602b      	str	r3, [r5, #0]
 800c7a2:	f7f4 ff33 	bl	800160c <_kill>
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	d102      	bne.n	800c7b0 <_kill_r+0x1c>
 800c7aa:	682b      	ldr	r3, [r5, #0]
 800c7ac:	b103      	cbz	r3, 800c7b0 <_kill_r+0x1c>
 800c7ae:	6023      	str	r3, [r4, #0]
 800c7b0:	bd38      	pop	{r3, r4, r5, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20000864 	.word	0x20000864

0800c7b8 <_getpid_r>:
 800c7b8:	f7f4 bf20 	b.w	80015fc <_getpid>

0800c7bc <__swhatbuf_r>:
 800c7bc:	b570      	push	{r4, r5, r6, lr}
 800c7be:	460c      	mov	r4, r1
 800c7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	b096      	sub	sp, #88	@ 0x58
 800c7c8:	4615      	mov	r5, r2
 800c7ca:	461e      	mov	r6, r3
 800c7cc:	da0d      	bge.n	800c7ea <__swhatbuf_r+0x2e>
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7d4:	f04f 0100 	mov.w	r1, #0
 800c7d8:	bf14      	ite	ne
 800c7da:	2340      	movne	r3, #64	@ 0x40
 800c7dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	6031      	str	r1, [r6, #0]
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	b016      	add	sp, #88	@ 0x58
 800c7e8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ea:	466a      	mov	r2, sp
 800c7ec:	f000 f848 	bl	800c880 <_fstat_r>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	dbec      	blt.n	800c7ce <__swhatbuf_r+0x12>
 800c7f4:	9901      	ldr	r1, [sp, #4]
 800c7f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7fe:	4259      	negs	r1, r3
 800c800:	4159      	adcs	r1, r3
 800c802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c806:	e7eb      	b.n	800c7e0 <__swhatbuf_r+0x24>

0800c808 <__smakebuf_r>:
 800c808:	898b      	ldrh	r3, [r1, #12]
 800c80a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c80c:	079d      	lsls	r5, r3, #30
 800c80e:	4606      	mov	r6, r0
 800c810:	460c      	mov	r4, r1
 800c812:	d507      	bpl.n	800c824 <__smakebuf_r+0x1c>
 800c814:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	6123      	str	r3, [r4, #16]
 800c81c:	2301      	movs	r3, #1
 800c81e:	6163      	str	r3, [r4, #20]
 800c820:	b003      	add	sp, #12
 800c822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c824:	ab01      	add	r3, sp, #4
 800c826:	466a      	mov	r2, sp
 800c828:	f7ff ffc8 	bl	800c7bc <__swhatbuf_r>
 800c82c:	9f00      	ldr	r7, [sp, #0]
 800c82e:	4605      	mov	r5, r0
 800c830:	4639      	mov	r1, r7
 800c832:	4630      	mov	r0, r6
 800c834:	f7fd fbcc 	bl	8009fd0 <_malloc_r>
 800c838:	b948      	cbnz	r0, 800c84e <__smakebuf_r+0x46>
 800c83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83e:	059a      	lsls	r2, r3, #22
 800c840:	d4ee      	bmi.n	800c820 <__smakebuf_r+0x18>
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	f043 0302 	orr.w	r3, r3, #2
 800c84a:	81a3      	strh	r3, [r4, #12]
 800c84c:	e7e2      	b.n	800c814 <__smakebuf_r+0xc>
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	6020      	str	r0, [r4, #0]
 800c852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c856:	81a3      	strh	r3, [r4, #12]
 800c858:	9b01      	ldr	r3, [sp, #4]
 800c85a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c85e:	b15b      	cbz	r3, 800c878 <__smakebuf_r+0x70>
 800c860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c864:	4630      	mov	r0, r6
 800c866:	f000 f81d 	bl	800c8a4 <_isatty_r>
 800c86a:	b128      	cbz	r0, 800c878 <__smakebuf_r+0x70>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	f043 0301 	orr.w	r3, r3, #1
 800c876:	81a3      	strh	r3, [r4, #12]
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	431d      	orrs	r5, r3
 800c87c:	81a5      	strh	r5, [r4, #12]
 800c87e:	e7cf      	b.n	800c820 <__smakebuf_r+0x18>

0800c880 <_fstat_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	@ (800c8a0 <_fstat_r+0x20>)
 800c884:	2300      	movs	r3, #0
 800c886:	4604      	mov	r4, r0
 800c888:	4608      	mov	r0, r1
 800c88a:	4611      	mov	r1, r2
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	f7f4 ff01 	bl	8001694 <_fstat>
 800c892:	1c43      	adds	r3, r0, #1
 800c894:	d102      	bne.n	800c89c <_fstat_r+0x1c>
 800c896:	682b      	ldr	r3, [r5, #0]
 800c898:	b103      	cbz	r3, 800c89c <_fstat_r+0x1c>
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000864 	.word	0x20000864

0800c8a4 <_isatty_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d06      	ldr	r5, [pc, #24]	@ (800c8c0 <_isatty_r+0x1c>)
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	602b      	str	r3, [r5, #0]
 800c8b0:	f7f4 ff00 	bl	80016b4 <_isatty>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_isatty_r+0x1a>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_isatty_r+0x1a>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20000864 	.word	0x20000864

0800c8c4 <_init>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <_fini>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr
