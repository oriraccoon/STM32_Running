
0626_zero_mini_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b09c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b240  0800b240  0000c240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b774  0800b774  0000d2b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b774  0800b774  0000c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b77c  0800b77c  0000d2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b77c  0800b77c  0000c77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b780  0800b780  0000c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800b784  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200002b0  0800ba34  0000d2b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800ba34  0000d69c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015095  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c66  00000000  00000000  00022375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00025fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f30  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d6c  00000000  00000000  000282d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bccb  00000000  00000000  0004203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009351b  00000000  00000000  0005dd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1222  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006400  00000000  00000000  000f1268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f7668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b0 	.word	0x200002b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b224 	.word	0x0800b224

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b4 	.word	0x200002b4
 80001dc:	0800b224 	.word	0x0800b224

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b49      	ldr	r3, [pc, #292]	@ (8001170 <MX_GPIO_Init+0x140>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a48      	ldr	r2, [pc, #288]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b46      	ldr	r3, [pc, #280]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <MX_GPIO_Init+0x140>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a3a      	ldr	r2, [pc, #232]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <MX_GPIO_Init+0x140>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <MX_GPIO_Init+0x140>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a33      	ldr	r2, [pc, #204]	@ (8001170 <MX_GPIO_Init+0x140>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <MX_GPIO_Init+0x140>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80010bc:	482d      	ldr	r0, [pc, #180]	@ (8001174 <MX_GPIO_Init+0x144>)
 80010be:	f002 fc0b 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80010c2:	2200      	movs	r2, #0
 80010c4:	f24f 0107 	movw	r1, #61447	@ 0xf007
 80010c8:	482b      	ldr	r0, [pc, #172]	@ (8001178 <MX_GPIO_Init+0x148>)
 80010ca:	f002 fc05 	bl	80038d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80010d4:	4829      	ldr	r0, [pc, #164]	@ (800117c <MX_GPIO_Init+0x14c>)
 80010d6:	f002 fbff 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 80010da:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4823      	ldr	r0, [pc, #140]	@ (800117c <MX_GPIO_Init+0x14c>)
 80010f0:	f002 fa56 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80010f4:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4819      	ldr	r0, [pc, #100]	@ (8001174 <MX_GPIO_Init+0x144>)
 800110e:	f002 fa47 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001112:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8001116:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4813      	ldr	r0, [pc, #76]	@ (8001178 <MX_GPIO_Init+0x148>)
 800112c:	f002 fa38 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001130:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <MX_GPIO_Init+0x14c>)
 800114a:	f002 fa29 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800114e:	2328      	movs	r3, #40	@ 0x28
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_GPIO_Init+0x148>)
 8001162:	f002 fa1d 	bl	80035a0 <HAL_GPIO_Init>

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020400 	.word	0x40020400
 800117c:	40020000 	.word	0x40020000

08001180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001186:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <MX_I2C1_Init+0x54>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_I2C1_Init+0x50>)
 800118c:	4a12      	ldr	r2, [pc, #72]	@ (80011d8 <MX_I2C1_Init+0x58>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_I2C1_Init+0x50>)
 800119e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_I2C1_Init+0x50>)
 80011be:	f002 fba5 	bl	800390c <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c8:	f000 f8d2 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200002cc 	.word	0x200002cc
 80011d4:	40005400 	.word	0x40005400
 80011d8:	000186a0 	.word	0x000186a0

080011dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_I2C_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122c:	2304      	movs	r3, #4
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <HAL_I2C_MspInit+0x8c>)
 8001238:	f002 f9b2 	bl	80035a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 8001246:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800124a:	6413      	str	r3, [r2, #64]	@ 0x40
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_I2C_MspInit+0x88>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40005400 	.word	0x40005400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f001 ff5c 	bl	800312c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f814 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f7ff feda 	bl	8001030 <MX_GPIO_Init>
  MX_TIM2_Init();
 800127c:	f000 fa62 	bl	8001744 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001280:	f000 fc3c 	bl	8001afc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001284:	f7ff ff7c 	bl	8001180 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001288:	f000 faa8 	bl	80017dc <MX_TIM3_Init>
  MX_TIM1_Init();
 800128c:	f000 f9ba 	bl	8001604 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001290:	f000 fb1c 	bl	80018cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8001294:	f001 f97e 	bl	8002594 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8001298:	f001 f96c 	bl	8002574 <ap_main>
 800129c:	e7fc      	b.n	8001298 <main+0x2c>
	...

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	@ 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	@ 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f006 fbdd 	bl	8007a6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <SystemClock_Config+0xc8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	4a26      	ldr	r2, [pc, #152]	@ (8001368 <SystemClock_Config+0xc8>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d4:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <SystemClock_Config+0xc8>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b21      	ldr	r3, [pc, #132]	@ (800136c <SystemClock_Config+0xcc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	@ (800136c <SystemClock_Config+0xcc>)
 80012ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <SystemClock_Config+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001300:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001310:	2304      	movs	r3, #4
 8001312:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001314:	2364      	movs	r3, #100	@ 0x64
 8001316:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800131c:	2304      	movs	r3, #4
 800131e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f002 ff8f 	bl	8004248 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001330:	f000 f81e 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001338:	2302      	movs	r3, #2
 800133a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f9f1 	bl	8004738 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800135c:	f000 f808 	bl	8001370 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	@ 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f002 f81c 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f001 fed5 	bl	80031d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <TIM2_IRQHandler+0x10>)
 8001432:	f003 fdc1 	bl	8004fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000036c 	.word	0x2000036c

08001440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <USART2_IRQHandler+0x10>)
 8001446:	f004 fc75 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000444 	.word	0x20000444

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800146e:	f006 fb51 	bl	8007b14 <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
  return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <_exit+0x12>

0800149a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e00a      	b.n	80014c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ac:	f3af 8000 	nop.w
 80014b0:	4601      	mov	r1, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf0      	blt.n	80014ac <_read+0x12>
  }

  return len;
 80014ca:	687b      	ldr	r3, [r7, #4]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e009      	b.n	80014fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbf1      	blt.n	80014e6 <_write+0x12>
  }
  return len;
 8001502:	687b      	ldr	r3, [r7, #4]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_close>:

int _close(int file)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001534:	605a      	str	r2, [r3, #4]
  return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_isatty>:

int _isatty(int file)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f006 fab6 	bl	8007b14 <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20020000 	.word	0x20020000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000320 	.word	0x20000320
 80015dc:	200006a0 	.word	0x200006a0

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b096      	sub	sp, #88	@ 0x58
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	2220      	movs	r2, #32
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fa16 	bl	8007a6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <MX_TIM1_Init+0x138>)
 8001644:	4a3e      	ldr	r2, [pc, #248]	@ (8001740 <MX_TIM1_Init+0x13c>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001648:	4b3c      	ldr	r3, [pc, #240]	@ (800173c <MX_TIM1_Init+0x138>)
 800164a:	2263      	movs	r2, #99	@ 0x63
 800164c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <MX_TIM1_Init+0x138>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <MX_TIM1_Init+0x138>)
 8001656:	2263      	movs	r2, #99	@ 0x63
 8001658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b38      	ldr	r3, [pc, #224]	@ (800173c <MX_TIM1_Init+0x138>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001660:	4b36      	ldr	r3, [pc, #216]	@ (800173c <MX_TIM1_Init+0x138>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b35      	ldr	r3, [pc, #212]	@ (800173c <MX_TIM1_Init+0x138>)
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800166c:	4833      	ldr	r0, [pc, #204]	@ (800173c <MX_TIM1_Init+0x138>)
 800166e:	f003 fa83 	bl	8004b78 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001678:	f7ff fe7a 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001686:	4619      	mov	r1, r3
 8001688:	482c      	ldr	r0, [pc, #176]	@ (800173c <MX_TIM1_Init+0x138>)
 800168a:	f003 fe47 	bl	800531c <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001694:	f7ff fe6c 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001698:	4828      	ldr	r0, [pc, #160]	@ (800173c <MX_TIM1_Init+0x138>)
 800169a:	f003 fb1f 	bl	8004cdc <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80016a4:	f7ff fe64 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016b4:	4619      	mov	r1, r3
 80016b6:	4821      	ldr	r0, [pc, #132]	@ (800173c <MX_TIM1_Init+0x138>)
 80016b8:	f004 f9f2 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80016c2:	f7ff fe55 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c6:	2360      	movs	r3, #96	@ 0x60
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 5000-1;
 80016ca:	f241 3387 	movw	r3, #4999	@ 0x1387
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e8:	2204      	movs	r2, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	4813      	ldr	r0, [pc, #76]	@ (800173c <MX_TIM1_Init+0x138>)
 80016ee:	f003 fd53 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80016f8:	f7ff fe3a 	bl	8001370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM1_Init+0x138>)
 8001720:	f004 fa2c 	bl	8005b7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800172a:	f7ff fe21 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM1_Init+0x138>)
 8001730:	f000 f982 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3758      	adds	r7, #88	@ 0x58
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000324 	.word	0x20000324
 8001740:	40010000 	.word	0x40010000

08001744 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001760:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001762:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <MX_TIM2_Init+0x94>)
 800176a:	2263      	movs	r2, #99	@ 0x63
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001776:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <MX_TIM2_Init+0x94>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <MX_TIM2_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	4813      	ldr	r0, [pc, #76]	@ (80017d8 <MX_TIM2_Init+0x94>)
 800178a:	f003 f9f5 	bl	8004b78 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001794:	f7ff fdec 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <MX_TIM2_Init+0x94>)
 80017a6:	f003 fdb9 	bl	800531c <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017b0:	f7ff fdde 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_TIM2_Init+0x94>)
 80017c2:	f004 f96d 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f7ff fdd0 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000036c 	.word	0x2000036c

080017dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	@ 0x38
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 800180e:	4a2e      	ldr	r2, [pc, #184]	@ (80018c8 <MX_TIM3_Init+0xec>)
 8001810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001812:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001814:	2263      	movs	r2, #99	@ 0x63
 8001816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800181e:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001820:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001824:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182c:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001832:	4824      	ldr	r0, [pc, #144]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001834:	f003 f9a0 	bl	8004b78 <HAL_TIM_Base_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800183e:	f7ff fd97 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001842:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800184c:	4619      	mov	r1, r3
 800184e:	481d      	ldr	r0, [pc, #116]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001850:	f003 fd64 	bl	800531c <HAL_TIM_ConfigClockSource>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800185a:	f7ff fd89 	bl	8001370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800185e:	4819      	ldr	r0, [pc, #100]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 8001860:	f003 fa3c 	bl	8004cdc <HAL_TIM_PWM_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800186a:	f7ff fd81 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001876:	f107 0320 	add.w	r3, r7, #32
 800187a:	4619      	mov	r1, r3
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 800187e:	f004 f90f 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001888:	f7ff fd72 	bl	8001370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188c:	2360      	movs	r3, #96	@ 0x60
 800188e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001890:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 80018a6:	f003 fc77 	bl	8005198 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018b0:	f7ff fd5e 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018b4:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <MX_TIM3_Init+0xe8>)
 80018b6:	f000 f8bf 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3738      	adds	r7, #56	@ 0x38
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200003b4 	.word	0x200003b4
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <MX_TIM4_Init+0x94>)
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <MX_TIM4_Init+0x98>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_TIM4_Init+0x94>)
 80018f0:	2263      	movs	r2, #99	@ 0x63
 80018f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_TIM4_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <MX_TIM4_Init+0x94>)
 80018fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_TIM4_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_TIM4_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800190e:	4814      	ldr	r0, [pc, #80]	@ (8001960 <MX_TIM4_Init+0x94>)
 8001910:	f003 f932 	bl	8004b78 <HAL_TIM_Base_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800191a:	f7ff fd29 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4619      	mov	r1, r3
 800192a:	480d      	ldr	r0, [pc, #52]	@ (8001960 <MX_TIM4_Init+0x94>)
 800192c:	f003 fcf6 	bl	800531c <HAL_TIM_ConfigClockSource>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001936:	f7ff fd1b 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	@ (8001960 <MX_TIM4_Init+0x94>)
 8001948:	f004 f8aa 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001952:	f7ff fd0d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003fc 	.word	0x200003fc
 8001964:	40000800 	.word	0x40000800

08001968 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2c      	ldr	r2, [pc, #176]	@ (8001a28 <HAL_TIM_Base_MspInit+0xc0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10e      	bne.n	8001998 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a2a      	ldr	r2, [pc, #168]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001996:	e042      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a0:	d116      	bne.n	80019d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a20      	ldr	r2, [pc, #128]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	201c      	movs	r0, #28
 80019c4:	f001 fd23 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c8:	201c      	movs	r0, #28
 80019ca:	f001 fd3c 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 80019ce:	e026      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a16      	ldr	r2, [pc, #88]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10e      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	e012      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <HAL_TIM_Base_MspInit+0xcc>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10d      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc4>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11f      	bne.n	8001a9a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <HAL_TIM_MspPostInit+0xb8>)
 8001a94:	f001 fd84 	bl	80035a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a98:	e022      	b.n	8001ae0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <HAL_TIM_MspPostInit+0xbc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d11d      	bne.n	8001ae0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ac0:	2310      	movs	r3, #16
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <HAL_TIM_MspPostInit+0xc0>)
 8001adc:	f001 fd60 	bl	80035a0 <HAL_GPIO_Init>
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40020400 	.word	0x40020400

08001afc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <MX_USART2_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f004 f888 	bl	8005c48 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f7ff fc17 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000444 	.word	0x20000444
 8001b4c:	40004400 	.word	0x40004400

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <HAL_UART_MspInit+0x94>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d133      	bne.n	8001bda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_UART_MspInit+0x98>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001baa:	230c      	movs	r3, #12
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4809      	ldr	r0, [pc, #36]	@ (8001bec <HAL_UART_MspInit+0x9c>)
 8001bc6:	f001 fceb 	bl	80035a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2026      	movs	r0, #38	@ 0x26
 8001bd0:	f001 fc1d 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd4:	2026      	movs	r0, #38	@ 0x26
 8001bd6:	f001 fc36 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40004400 	.word	0x40004400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bf4:	f7ff fcf4 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f005 ff7f 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7ff fb23 	bl	800126c <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8001c34:	0800b784 	.word	0x0800b784
  ldr r2, =_sbss
 8001c38:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8001c3c:	2000069c 	.word	0x2000069c

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>

08001c42 <Controller_Excute>:
    .song = 0
};


void Controller_Excute()
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
	Controller_Mode();
 8001c46:	f000 f84b 	bl	8001ce0 <Controller_Mode>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <Controller_OutData>:

// C2P
void Controller_OutData(C2P_Data *c2p_data)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	memcpy(c2p_data, &OutputData, sizeof(C2P_Data));
 8001c58:	2228      	movs	r2, #40	@ 0x28
 8001c5a:	4904      	ldr	r1, [pc, #16]	@ (8001c6c <Controller_OutData+0x1c>)
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f005 ff86 	bl	8007b6e <memcpy>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <Controller_SetInputData>:



void Controller_SetInputData(inputData_TypeDef inputData)
{
 8001c70:	b490      	push	{r4, r7}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	463c      	mov	r4, r7
 8001c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (inputData.id == LCD_MODE) {
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d103      	bne.n	8001c8a <Controller_SetInputData+0x1a>
		controlData.id = LCD_MODE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e01a      	b.n	8001cc0 <Controller_SetInputData+0x50>
	}
	else if (inputData.id == RUN_STOP) {
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d103      	bne.n	8001c98 <Controller_SetInputData+0x28>
		controlData.id = RUN_STOP;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e013      	b.n	8001cc0 <Controller_SetInputData+0x50>
	}
	else if (inputData.id == SPEED) {
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d103      	bne.n	8001ca6 <Controller_SetInputData+0x36>
		controlData.id = SPEED;
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e00c      	b.n	8001cc0 <Controller_SetInputData+0x50>
	}
	else if(inputData.id == ULTRA){
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b05      	cmp	r3, #5
 8001caa:	d103      	bne.n	8001cb4 <Controller_SetInputData+0x44>
		controlData.id = ULTRA;
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e005      	b.n	8001cc0 <Controller_SetInputData+0x50>
	}
	else if(inputData.id == SONG){
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d102      	bne.n	8001cc0 <Controller_SetInputData+0x50>
		controlData.id = SONG;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	601a      	str	r2, [r3, #0]
	}
	controlData.data = inputData.data;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a06      	ldr	r2, [pc, #24]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001cc4:	6053      	str	r3, [r2, #4]
	controlData.lcd_data = inputData.lcd_data;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001cca:	6093      	str	r3, [r2, #8]
	controlData.speed_data = inputData.speed_data;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a03      	ldr	r2, [pc, #12]	@ (8001cdc <Controller_SetInputData+0x6c>)
 8001cd0:	60d3      	str	r3, [r2, #12]
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc90      	pop	{r4, r7}
 8001cda:	4770      	bx	lr
 8001cdc:	2000048c 	.word	0x2000048c

08001ce0 <Controller_Mode>:

void Controller_Mode()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	Time_curr();
 8001ce4:	f000 f86c 	bl	8001dc0 <Time_curr>
	switch(controlData.id)
 8001ce8:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <Controller_Mode+0xd8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d85f      	bhi.n	8001db2 <Controller_Mode+0xd2>
 8001cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf8 <Controller_Mode+0x18>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d6f 	.word	0x08001d6f
 8001cfc:	08001d11 	.word	0x08001d11
 8001d00:	08001db3 	.word	0x08001db3
 8001d04:	08001d7d 	.word	0x08001d7d
 8001d08:	08001d89 	.word	0x08001d89
 8001d0c:	08001da3 	.word	0x08001da3
	{
	case RUN_STOP:
		controlData.id = NO_CONTROL;
 8001d10:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <Controller_Mode+0xd8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		OutputData.runstop ^= 1;
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]
		if(OutputData.runstop == 0){
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <Controller_Mode+0x7e>
			 OutputData.speed = 0;
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	731a      	strb	r2, [r3, #12]
			 OutputData.lcd_mode = 0;
 8001d38:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			 OutputData.calories = 0;
 8001d40:	491e      	ldr	r1, [pc, #120]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			 OutputData.distance = 0;
 8001d4e:	491b      	ldr	r1, [pc, #108]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
		else {
			OutputData.speed = 1;
			OutputData.lcd_mode = 1;
		}
		break;
 8001d5c:	e029      	b.n	8001db2 <Controller_Mode+0xd2>
			OutputData.speed = 1;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	731a      	strb	r2, [r3, #12]
			OutputData.lcd_mode = 1;
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		break;
 8001d6c:	e021      	b.n	8001db2 <Controller_Mode+0xd2>

	case LCD_MODE:
		OutputData.lcd_mode = controlData.lcd_data;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <Controller_Mode+0xd8>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		break;
 8001d7a:	e01a      	b.n	8001db2 <Controller_Mode+0xd2>

	case SPEED:
		OutputData.speed = controlData.speed_data;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <Controller_Mode+0xd8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d84:	731a      	strb	r2, [r3, #12]
		break;
 8001d86:	e014      	b.n	8001db2 <Controller_Mode+0xd2>

	case ULTRA:
		if (controlData.data > 100){
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <Controller_Mode+0xd8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b64      	cmp	r3, #100	@ 0x64
 8001d8e:	dd0f      	ble.n	8001db0 <Controller_Mode+0xd0>
			OutputData.lcd_mode = WARNING;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			OutputData.song = 3;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <Controller_Mode+0xdc>)
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		}
		break;
 8001da0:	e006      	b.n	8001db0 <Controller_Mode+0xd0>

	case SONG:
		OutputData.song = controlData.data;
 8001da2:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <Controller_Mode+0xd8>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <Controller_Mode+0xdc>)
 8001daa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		break;
 8001dae:	e000      	b.n	8001db2 <Controller_Mode+0xd2>
		break;
 8001db0:	bf00      	nop
	}
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000048c 	.word	0x2000048c
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <Time_curr>:


static uint8_t pre_sec = 0;

void Time_curr(){
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
   uint8_t met;
   OutputData.running_time = StopWatch_Excute();
 8001dc6:	4c48      	ldr	r4, [pc, #288]	@ (8001ee8 <Time_curr+0x128>)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fcc0 	bl	8002750 <StopWatch_Excute>
 8001dd0:	1da3      	adds	r3, r4, #6
 8001dd2:	463a      	mov	r2, r7
 8001dd4:	6811      	ldr	r1, [r2, #0]
 8001dd6:	6019      	str	r1, [r3, #0]
 8001dd8:	8892      	ldrh	r2, [r2, #4]
 8001dda:	809a      	strh	r2, [r3, #4]
   OutputData.current_time = TimeWatch_Excute();
 8001ddc:	4c42      	ldr	r4, [pc, #264]	@ (8001ee8 <Time_curr+0x128>)
 8001dde:	463b      	mov	r3, r7
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fd49 	bl	8002878 <TimeWatch_Excute>
 8001de6:	4622      	mov	r2, r4
 8001de8:	463b      	mov	r3, r7
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	6010      	str	r0, [r2, #0]
 8001dee:	889b      	ldrh	r3, [r3, #4]
 8001df0:	8093      	strh	r3, [r2, #4]
   if(OutputData.running_time.sec != pre_sec){
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <Time_curr+0x128>)
 8001df4:	7a5a      	ldrb	r2, [r3, #9]
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <Time_curr+0x12c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d010      	beq.n	8001e20 <Time_curr+0x60>
      OutputData.distance += 0.28;
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <Time_curr+0x128>)
 8001e00:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e04:	a334      	add	r3, pc, #208	@ (adr r3, 8001ed8 <Time_curr+0x118>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fa47 	bl	800029c <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4935      	ldr	r1, [pc, #212]	@ (8001ee8 <Time_curr+0x128>)
 8001e14:	e9c1 2304 	strd	r2, r3, [r1, #16]
      pre_sec = OutputData.running_time.sec;
 8001e18:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <Time_curr+0x128>)
 8001e1a:	7a5a      	ldrb	r2, [r3, #9]
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <Time_curr+0x12c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
   }

   switch(OutputData.speed){
 8001e20:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <Time_curr+0x128>)
 8001e22:	7b1b      	ldrb	r3, [r3, #12]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d835      	bhi.n	8001e94 <Time_curr+0xd4>
 8001e28:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <Time_curr+0x70>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	08001e5f 	.word	0x08001e5f
 8001e38:	08001e65 	.word	0x08001e65
 8001e3c:	08001e6b 	.word	0x08001e6b
 8001e40:	08001e71 	.word	0x08001e71
 8001e44:	08001e77 	.word	0x08001e77
 8001e48:	08001e7d 	.word	0x08001e7d
 8001e4c:	08001e83 	.word	0x08001e83
 8001e50:	08001e89 	.word	0x08001e89
 8001e54:	08001e8f 	.word	0x08001e8f
   case 0:
	   met = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
	   break;
 8001e5c:	e01a      	b.n	8001e94 <Time_curr+0xd4>
   case 1:
      met = 15;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	73fb      	strb	r3, [r7, #15]
      break;
 8001e62:	e017      	b.n	8001e94 <Time_curr+0xd4>
   case 2:
      met = 20;
 8001e64:	2314      	movs	r3, #20
 8001e66:	73fb      	strb	r3, [r7, #15]
      break;
 8001e68:	e014      	b.n	8001e94 <Time_curr+0xd4>
   case 3:
      met = 28;
 8001e6a:	231c      	movs	r3, #28
 8001e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e6e:	e011      	b.n	8001e94 <Time_curr+0xd4>
   case 4:
      met = 33;
 8001e70:	2321      	movs	r3, #33	@ 0x21
 8001e72:	73fb      	strb	r3, [r7, #15]
      break;
 8001e74:	e00e      	b.n	8001e94 <Time_curr+0xd4>
   case 5:
      met = 38;
 8001e76:	2326      	movs	r3, #38	@ 0x26
 8001e78:	73fb      	strb	r3, [r7, #15]
      break;
 8001e7a:	e00b      	b.n	8001e94 <Time_curr+0xd4>
   case 6:
      met = 43;
 8001e7c:	232b      	movs	r3, #43	@ 0x2b
 8001e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e80:	e008      	b.n	8001e94 <Time_curr+0xd4>
   case 7:
      met = 60;
 8001e82:	233c      	movs	r3, #60	@ 0x3c
 8001e84:	73fb      	strb	r3, [r7, #15]
      break;
 8001e86:	e005      	b.n	8001e94 <Time_curr+0xd4>
   case 8:
      met = 83;
 8001e88:	2353      	movs	r3, #83	@ 0x53
 8001e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8c:	e002      	b.n	8001e94 <Time_curr+0xd4>
   case 9:
      met = 98;
 8001e8e:	2362      	movs	r3, #98	@ 0x62
 8001e90:	73fb      	strb	r3, [r7, #15]
      break;
 8001e92:	bf00      	nop
   }
   OutputData.calories = met * 72 * OutputData.distance /10000;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb48 	bl	8000534 <__aeabi_i2d>
 8001ea4:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <Time_curr+0x128>)
 8001ea6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001eaa:	f7fe fbad 	bl	8000608 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001ee0 <Time_curr+0x120>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fcce 	bl	800085c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <Time_curr+0x128>)
 8001ec6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	1eb851ec 	.word	0x1eb851ec
 8001edc:	3fd1eb85 	.word	0x3fd1eb85
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40c38800 	.word	0x40c38800
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	2000049c 	.word	0x2000049c

08001ef0 <Listener_Init>:
static uint8_t toggleFlag = 0;

inputData_TypeDef inputData = {0};

void Listener_Init()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	Button_Init(&hBtnLcdMode, GPIOB, GPIO_PIN_5);
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	490f      	ldr	r1, [pc, #60]	@ (8001f34 <Listener_Init+0x44>)
 8001ef8:	480f      	ldr	r0, [pc, #60]	@ (8001f38 <Listener_Init+0x48>)
 8001efa:	f000 fccf 	bl	800289c <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8001efe:	2208      	movs	r2, #8
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <Listener_Init+0x44>)
 8001f02:	480e      	ldr	r0, [pc, #56]	@ (8001f3c <Listener_Init+0x4c>)
 8001f04:	f000 fcca 	bl	800289c <Button_Init>
	Button_Init(&hBtnSpeedUp, GPIOA, GPIO_PIN_10);
 8001f08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <Listener_Init+0x50>)
 8001f0e:	480d      	ldr	r0, [pc, #52]	@ (8001f44 <Listener_Init+0x54>)
 8001f10:	f000 fcc4 	bl	800289c <Button_Init>
	Button_Init(&hBtnSpeedDown, GPIOA, GPIO_PIN_7); // modify the pin number
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	490a      	ldr	r1, [pc, #40]	@ (8001f40 <Listener_Init+0x50>)
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <Listener_Init+0x58>)
 8001f1a:	f000 fcbf 	bl	800289c <Button_Init>

	Que_Init(&uartRxQue);
 8001f1e:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <Listener_Init+0x5c>)
 8001f20:	f000 fb42 	bl	80025a8 <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 8001f24:	2201      	movs	r2, #1
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <Listener_Init+0x60>)
 8001f28:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <Listener_Init+0x64>)
 8001f2a:	f003 fedd 	bl	8005ce8 <HAL_UART_Receive_IT>
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020400 	.word	0x40020400
 8001f38:	20000504 	.word	0x20000504
 8001f3c:	20000510 	.word	0x20000510
 8001f40:	40020000 	.word	0x40020000
 8001f44:	2000051c 	.word	0x2000051c
 8001f48:	20000528 	.word	0x20000528
 8001f4c:	200004a0 	.word	0x200004a0
 8001f50:	2000049d 	.word	0x2000049d
 8001f54:	20000444 	.word	0x20000444

08001f58 <Listener_Excute>:

void Listener_Excute()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8001f5c:	f000 f806 	bl	8001f6c <Listener_CheckButton>
	Listener_CheckUart();
 8001f60:	f000 f890 	bl	8002084 <Listener_CheckUart>
	Listener_CheckUltra();
 8001f64:	f000 f926 	bl	80021b4 <Listener_CheckUltra>
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <Listener_CheckButton>:

void Listener_CheckButton()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
   static uint32_t prevChkBtnTime = 0;
   uint32_t curTick = HAL_GetTick();
 8001f72:	f001 f941 	bl	80031f8 <HAL_GetTick>
 8001f76:	6078      	str	r0, [r7, #4]
   if (curTick - prevChkBtnTime < 100) {
 8001f78:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <Listener_CheckButton+0xfc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b63      	cmp	r3, #99	@ 0x63
 8001f82:	d96d      	bls.n	8002060 <Listener_CheckButton+0xf4>
      return;
   }
   prevChkBtnTime = curTick;
 8001f84:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <Listener_CheckButton+0xfc>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]

   if (Button_GetState(&hBtnLcdMode) == ACT_RELEASED) {
 8001f8a:	4838      	ldr	r0, [pc, #224]	@ (800206c <Listener_CheckButton+0x100>)
 8001f8c:	f000 fc9c 	bl	80028c8 <Button_GetState>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d114      	bne.n	8001fc0 <Listener_CheckButton+0x54>
      inputData.id = LCD_MODE;
 8001f96:	4b36      	ldr	r3, [pc, #216]	@ (8002070 <Listener_CheckButton+0x104>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
      if (inputData.lcd_data >= 4){
 8001f9c:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <Listener_CheckButton+0x104>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	dd03      	ble.n	8001fac <Listener_CheckButton+0x40>
         inputData.lcd_data = 1;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	e004      	b.n	8001fb6 <Listener_CheckButton+0x4a>
      }
      else{
         inputData.lcd_data ++;
 8001fac:	4b30      	ldr	r3, [pc, #192]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fb4:	6093      	str	r3, [r2, #8]
      }
      Controller_SetInputData(inputData);
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fba:	f7ff fe59 	bl	8001c70 <Controller_SetInputData>
 8001fbe:	e050      	b.n	8002062 <Listener_CheckButton+0xf6>
   }
   else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 8001fc0:	482c      	ldr	r0, [pc, #176]	@ (8002074 <Listener_CheckButton+0x108>)
 8001fc2:	f000 fc81 	bl	80028c8 <Button_GetState>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d113      	bne.n	8001ff4 <Listener_CheckButton+0x88>
      inputData.id = RUN_STOP;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fce:	2202      	movs	r2, #2
 8001fd0:	601a      	str	r2, [r3, #0]
      toggleFlag ^= 1;
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <Listener_CheckButton+0x10c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	f083 0301 	eor.w	r3, r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <Listener_CheckButton+0x10c>)
 8001fde:	701a      	strb	r2, [r3, #0]
      inputData.lcd_data = toggleFlag;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	@ (8002078 <Listener_CheckButton+0x10c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fe8:	609a      	str	r2, [r3, #8]
      Controller_SetInputData(inputData);
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <Listener_CheckButton+0x104>)
 8001fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fee:	f7ff fe3f 	bl	8001c70 <Controller_SetInputData>
 8001ff2:	e036      	b.n	8002062 <Listener_CheckButton+0xf6>
   }
   else if (Button_GetState(&hBtnSpeedUp) == ACT_PUSHED) {
 8001ff4:	4821      	ldr	r0, [pc, #132]	@ (800207c <Listener_CheckButton+0x110>)
 8001ff6:	f000 fc67 	bl	80028c8 <Button_GetState>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d114      	bne.n	800202a <Listener_CheckButton+0xbe>
      inputData.id = SPEED;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <Listener_CheckButton+0x104>)
 8002002:	2204      	movs	r2, #4
 8002004:	601a      	str	r2, [r3, #0]
      if (inputData.speed_data >= 9){
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <Listener_CheckButton+0x104>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b08      	cmp	r3, #8
 800200c:	dd03      	ble.n	8002016 <Listener_CheckButton+0xaa>
         inputData.speed_data = 9;
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <Listener_CheckButton+0x104>)
 8002010:	2209      	movs	r2, #9
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	e004      	b.n	8002020 <Listener_CheckButton+0xb4>
      }
      else{
         inputData.speed_data ++;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <Listener_CheckButton+0x104>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <Listener_CheckButton+0x104>)
 800201e:	60d3      	str	r3, [r2, #12]
      }
      Controller_SetInputData(inputData);
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <Listener_CheckButton+0x104>)
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	f7ff fe24 	bl	8001c70 <Controller_SetInputData>
 8002028:	e01b      	b.n	8002062 <Listener_CheckButton+0xf6>
   }
   else if (Button_GetState(&hBtnSpeedDown) == ACT_PUSHED) {
 800202a:	4815      	ldr	r0, [pc, #84]	@ (8002080 <Listener_CheckButton+0x114>)
 800202c:	f000 fc4c 	bl	80028c8 <Button_GetState>
 8002030:	4603      	mov	r3, r0
 8002032:	2b01      	cmp	r3, #1
 8002034:	d115      	bne.n	8002062 <Listener_CheckButton+0xf6>
      inputData.id = SPEED;
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <Listener_CheckButton+0x104>)
 8002038:	2204      	movs	r2, #4
 800203a:	601a      	str	r2, [r3, #0]
      if (inputData.speed_data == 0){
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <Listener_CheckButton+0x104>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <Listener_CheckButton+0xe0>
         inputData.speed_data = 0;
 8002044:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <Listener_CheckButton+0x104>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e004      	b.n	8002056 <Listener_CheckButton+0xea>
      }
      else{
         inputData.speed_data --;
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <Listener_CheckButton+0x104>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	3b01      	subs	r3, #1
 8002052:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <Listener_CheckButton+0x104>)
 8002054:	60d3      	str	r3, [r2, #12]
      }
      Controller_SetInputData(inputData);
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <Listener_CheckButton+0x104>)
 8002058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205a:	f7ff fe09 	bl	8001c70 <Controller_SetInputData>
 800205e:	e000      	b.n	8002062 <Listener_CheckButton+0xf6>
      return;
 8002060:	bf00      	nop
   }
}
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200004cc 	.word	0x200004cc
 800206c:	20000504 	.word	0x20000504
 8002070:	200004bc 	.word	0x200004bc
 8002074:	20000510 	.word	0x20000510
 8002078:	200004b8 	.word	0x200004b8
 800207c:	2000051c 	.word	0x2000051c
 8002080:	20000528 	.word	0x20000528

08002084 <Listener_CheckUart>:

void Listener_CheckUart()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
	if (isQueEmpty(&uartRxQue)) {
 800208a:	483e      	ldr	r0, [pc, #248]	@ (8002184 <Listener_CheckUart+0x100>)
 800208c:	f000 fab7 	bl	80025fe <isQueEmpty>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d171      	bne.n	800217a <Listener_CheckUart+0xf6>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 8002096:	483b      	ldr	r0, [pc, #236]	@ (8002184 <Listener_CheckUart+0x100>)
 8002098:	f000 fae7 	bl	800266a <deQue>
 800209c:	6178      	str	r0, [r7, #20]

	inputData_TypeDef inputData;

	if (uartRxData == 'v') {
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b76      	cmp	r3, #118	@ 0x76
 80020a2:	d106      	bne.n	80020b2 <Listener_CheckUart+0x2e>
		inputData.id = SPEED;
 80020a4:	2304      	movs	r3, #4
 80020a6:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ac:	f7ff fde0 	bl	8001c70 <Controller_SetInputData>
 80020b0:	e064      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == 's') {
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b73      	cmp	r3, #115	@ 0x73
 80020b6:	d106      	bne.n	80020c6 <Listener_CheckUart+0x42>
		inputData.id = SONG;
 80020b8:	2306      	movs	r3, #6
 80020ba:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c0:	f7ff fdd6 	bl	8001c70 <Controller_SetInputData>
 80020c4:	e05a      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '1') {
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b31      	cmp	r3, #49	@ 0x31
 80020ca:	d106      	bne.n	80020da <Listener_CheckUart+0x56>
		inputData.data = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d4:	f7ff fdcc 	bl	8001c70 <Controller_SetInputData>
 80020d8:	e050      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '2') {
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b32      	cmp	r3, #50	@ 0x32
 80020de:	d106      	bne.n	80020ee <Listener_CheckUart+0x6a>
		inputData.data = 2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e8:	f7ff fdc2 	bl	8001c70 <Controller_SetInputData>
 80020ec:	e046      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '3') {
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b33      	cmp	r3, #51	@ 0x33
 80020f2:	d106      	bne.n	8002102 <Listener_CheckUart+0x7e>
		inputData.data = 3;
 80020f4:	2303      	movs	r3, #3
 80020f6:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fc:	f7ff fdb8 	bl	8001c70 <Controller_SetInputData>
 8002100:	e03c      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '4') {
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b34      	cmp	r3, #52	@ 0x34
 8002106:	d106      	bne.n	8002116 <Listener_CheckUart+0x92>
		inputData.data = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002110:	f7ff fdae 	bl	8001c70 <Controller_SetInputData>
 8002114:	e032      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '5') {
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b35      	cmp	r3, #53	@ 0x35
 800211a:	d106      	bne.n	800212a <Listener_CheckUart+0xa6>
		inputData.data = 5;
 800211c:	2305      	movs	r3, #5
 800211e:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002124:	f7ff fda4 	bl	8001c70 <Controller_SetInputData>
 8002128:	e028      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '6') {
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b36      	cmp	r3, #54	@ 0x36
 800212e:	d106      	bne.n	800213e <Listener_CheckUart+0xba>
		inputData.data = 6;
 8002130:	2306      	movs	r3, #6
 8002132:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002138:	f7ff fd9a 	bl	8001c70 <Controller_SetInputData>
 800213c:	e01e      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '7') {
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b37      	cmp	r3, #55	@ 0x37
 8002142:	d106      	bne.n	8002152 <Listener_CheckUart+0xce>
		inputData.data = 7;
 8002144:	2307      	movs	r3, #7
 8002146:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	f7ff fd90 	bl	8001c70 <Controller_SetInputData>
 8002150:	e014      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '8') {
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b38      	cmp	r3, #56	@ 0x38
 8002156:	d106      	bne.n	8002166 <Listener_CheckUart+0xe2>
		inputData.data = 8;
 8002158:	2308      	movs	r3, #8
 800215a:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002160:	f7ff fd86 	bl	8001c70 <Controller_SetInputData>
 8002164:	e00a      	b.n	800217c <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '9') {
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b39      	cmp	r3, #57	@ 0x39
 800216a:	d107      	bne.n	800217c <Listener_CheckUart+0xf8>
		inputData.data = 9;
 800216c:	2309      	movs	r3, #9
 800216e:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002174:	f7ff fd7c 	bl	8001c70 <Controller_SetInputData>
 8002178:	e000      	b.n	800217c <Listener_CheckUart+0xf8>
		return;
 800217a:	bf00      	nop
	}
}
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200004a0 	.word	0x200004a0

08002188 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <Listener_UartCallBack+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	4806      	ldr	r0, [pc, #24]	@ (80021ac <Listener_UartCallBack+0x24>)
 8002194:	f000 fa46 	bl	8002624 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8002198:	2201      	movs	r2, #1
 800219a:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <Listener_UartCallBack+0x20>)
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <Listener_UartCallBack+0x28>)
 800219e:	f003 fda3 	bl	8005ce8 <HAL_UART_Receive_IT>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000049d 	.word	0x2000049d
 80021ac:	200004a0 	.word	0x200004a0
 80021b0:	20000444 	.word	0x20000444

080021b4 <Listener_CheckUltra>:

void Listener_CheckUltra(){
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	//inputData.data = Ultra_Start();
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <Motor_Init>:
 */

#include "Motor_Speed.h"

void Motor_Init()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	DC_Motor_Init(&htim1, TIM_CHANNEL_2);
 80021c8:	2104      	movs	r1, #4
 80021ca:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <Motor_Init+0x10>)
 80021cc:	f000 fbae 	bl	800292c <DC_Motor_Init>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000324 	.word	0x20000324

080021d8 <Motor_Start>:

void Motor_Start(uint32_t speed)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	DC_Motor_SetFreq(speed);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fbb9 	bl	8002958 <DC_Motor_SetFreq>
	DC_Motor_Start();
 80021e6:	f000 fc1b 	bl	8002a20 <DC_Motor_Start>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <Motor_Stop>:

void Motor_Stop()
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
	DC_Motor_Stop();
 80021f6:	f000 fc23 	bl	8002a40 <DC_Motor_Stop>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <Presenter_Init>:
// Controller to Presenter Data
static C2P_Data p_data;

// Initial Func
void Presenter_Init()
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8002204:	4803      	ldr	r0, [pc, #12]	@ (8002214 <Presenter_Init+0x14>)
 8002206:	f000 fdf5 	bl	8002df4 <LCD_Init>
	Motor_Init();
 800220a:	f7ff ffdb 	bl	80021c4 <Motor_Init>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200002cc 	.word	0x200002cc

08002218 <Presenter_Excute>:


// Behavior Func at ap_main.c
void Presenter_Excute()
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	Controller_OutData(&p_data);
 800221c:	480f      	ldr	r0, [pc, #60]	@ (800225c <Presenter_Excute+0x44>)
 800221e:	f7ff fd17 	bl	8001c50 <Controller_OutData>
	Presenter_DispLCD(p_data.lcd_mode);
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <Presenter_Excute+0x44>)
 8002224:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002228:	4618      	mov	r0, r3
 800222a:	f000 f819 	bl	8002260 <Presenter_DispLCD>
//	Presenter_DispMonitor(p_data.uartRxData);
	Presenter_DispFnd_CurrentTime(p_data.current_time);
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <Presenter_Excute+0x44>)
 8002230:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002234:	f000 f88a 	bl	800234c <Presenter_DispFnd_CurrentTime>
	Presenter_DispLED_Dist(p_data.distance);
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <Presenter_Excute+0x44>)
 800223a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fcb9 	bl	8000bb8 <__aeabi_d2uiz>
 8002246:	4603      	mov	r3, r0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f94d 	bl	80024e8 <Presenter_DispLED_Dist>
//	Presenter_SongBuzzer(p_data.song);
	Presenter_SpeedMotor(p_data.speed);
 800224e:	4b03      	ldr	r3, [pc, #12]	@ (800225c <Presenter_Excute+0x44>)
 8002250:	7b1b      	ldrb	r3, [r3, #12]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f860 	bl	8002318 <Presenter_SpeedMotor>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200004d8 	.word	0x200004d8

08002260 <Presenter_DispLCD>:

// LCD DISP
void Presenter_DispLCD(uint8_t lcd_mode)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	if (prev_lcd_mode != lcd_mode) {
 800226a:	4b28      	ldr	r3, [pc, #160]	@ (800230c <Presenter_DispLCD+0xac>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	429a      	cmp	r2, r3
 8002272:	d009      	beq.n	8002288 <Presenter_DispLCD+0x28>
		LCD_writeStringXY(0, 0, "                ");
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <Presenter_DispLCD+0xb0>)
 8002276:	2100      	movs	r1, #0
 8002278:	2000      	movs	r0, #0
 800227a:	f000 ff08 	bl	800308e <LCD_writeStringXY>
		LCD_writeStringXY(1, 0, "                ");
 800227e:	4a24      	ldr	r2, [pc, #144]	@ (8002310 <Presenter_DispLCD+0xb0>)
 8002280:	2100      	movs	r1, #0
 8002282:	2001      	movs	r0, #1
 8002284:	f000 ff03 	bl	800308e <LCD_writeStringXY>
	}
	switch (lcd_mode) {
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d837      	bhi.n	80022fe <Presenter_DispLCD+0x9e>
 800228e:	a201      	add	r2, pc, #4	@ (adr r2, 8002294 <Presenter_DispLCD+0x34>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	080022ff 	.word	0x080022ff
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	080022f9 	.word	0x080022f9
		case LCD_OFF:
			break;
		case RUN_DIST:
			Presenter_DispLCD_RUN_DIST(p_data.running_time, p_data.distance);
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <Presenter_DispLCD+0xb4>)
 80022aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <Presenter_DispLCD+0xb4>)
 80022b0:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80022b4:	4611      	mov	r1, r2
 80022b6:	895a      	ldrh	r2, [r3, #10]
 80022b8:	2300      	movs	r3, #0
 80022ba:	f362 030f 	bfi	r3, r2, #0, #16
 80022be:	eeb0 0a47 	vmov.f32	s0, s14
 80022c2:	eef0 0a67 	vmov.f32	s1, s15
 80022c6:	4608      	mov	r0, r1
 80022c8:	4619      	mov	r1, r3
 80022ca:	f000 f86b 	bl	80023a4 <Presenter_DispLCD_RUN_DIST>
			break;
 80022ce:	e016      	b.n	80022fe <Presenter_DispLCD+0x9e>
		case CAL_SPEED:
			Presenter_DispLCD_CAL_SPEED(p_data.calories, p_data.speed);
 80022d0:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <Presenter_DispLCD+0xb4>)
 80022d2:	ed93 7b06 	vldr	d7, [r3, #24]
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <Presenter_DispLCD+0xb4>)
 80022d8:	7b1b      	ldrb	r3, [r3, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	eeb0 0a47 	vmov.f32	s0, s14
 80022e0:	eef0 0a67 	vmov.f32	s1, s15
 80022e4:	f000 f890 	bl	8002408 <Presenter_DispLCD_CAL_SPEED>
			break;
 80022e8:	e009      	b.n	80022fe <Presenter_DispLCD+0x9e>
		case SONG_TITLE:
			Presenter_DispLCD_SONG_TITLE(p_data.song);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <Presenter_DispLCD+0xb4>)
 80022ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f8b5 	bl	8002460 <Presenter_DispLCD_SONG_TITLE>
			break;
 80022f6:	e002      	b.n	80022fe <Presenter_DispLCD+0x9e>
		case WARNING:
			Presenter_DispLCD_WARNING();
 80022f8:	f000 f8ea 	bl	80024d0 <Presenter_DispLCD_WARNING>
			break;
 80022fc:	bf00      	nop
	}
	prev_lcd_mode = lcd_mode;
 80022fe:	4a03      	ldr	r2, [pc, #12]	@ (800230c <Presenter_DispLCD+0xac>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	7013      	strb	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200004d0 	.word	0x200004d0
 8002310:	0800b240 	.word	0x0800b240
 8002314:	200004d8 	.word	0x200004d8

08002318 <Presenter_SpeedMotor>:
}


// MOTOR RUN
void Presenter_SpeedMotor(uint8_t speed)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	if (speed == 0) Motor_Stop();
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <Presenter_SpeedMotor+0x16>
 8002328:	f7ff ff63 	bl	80021f2 <Motor_Stop>
	else Motor_Start((5000-(speed*100)));
}
 800232c:	e00a      	b.n	8002344 <Presenter_SpeedMotor+0x2c>
	else Motor_Start((5000-(speed*100)));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800233c:	3308      	adds	r3, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff4a 	bl	80021d8 <Motor_Start>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <Presenter_DispFnd_CurrentTime>:

}


void Presenter_DispFnd_CurrentTime(watch_t current_time)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	463b      	mov	r3, r7
 8002354:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(current_time.hour*100 + current_time.min);
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	461a      	mov	r2, r3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4413      	add	r3, r2
 8002360:	461a      	mov	r2, r3
 8002362:	0091      	lsls	r1, r2, #2
 8002364:	461a      	mov	r2, r3
 8002366:	460b      	mov	r3, r1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	b29b      	uxth	r3, r3
 800236e:	78ba      	ldrb	r2, [r7, #2]
 8002370:	4413      	add	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fb9b 	bl	8002ab0 <FND_WriteData>

	FND_WriteDp(FND_DP_1000|FND_DP_10|FND_DP_1, FND_DP_OFF);
 800237a:	2100      	movs	r1, #0
 800237c:	200b      	movs	r0, #11
 800237e:	f000 fb6f 	bl	8002a60 <FND_WriteDp>

	if (current_time.msec < 500) {
 8002382:	88bb      	ldrh	r3, [r7, #4]
 8002384:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002388:	d204      	bcs.n	8002394 <Presenter_DispFnd_CurrentTime+0x48>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 800238a:	2101      	movs	r1, #1
 800238c:	2004      	movs	r0, #4
 800238e:	f000 fb67 	bl	8002a60 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 8002392:	e003      	b.n	800239c <Presenter_DispFnd_CurrentTime+0x50>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8002394:	2100      	movs	r1, #0
 8002396:	2004      	movs	r0, #4
 8002398:	f000 fb62 	bl	8002a60 <FND_WriteDp>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <Presenter_DispLCD_RUN_DIST>:




void Presenter_DispLCD_RUN_DIST(watch_t running_time, double distance)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0a0      	sub	sp, #128	@ 0x80
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80023b2:	ed87 0b00 	vstr	d0, [r7]
	char str1[50];
	char str2[50];

	sprintf(str1, "RunTime:%02d:%02d:%02d", running_time.hour, running_time.min, running_time.sec);
 80023b6:	7a7b      	ldrb	r3, [r7, #9]
 80023b8:	461a      	mov	r2, r3
 80023ba:	7abb      	ldrb	r3, [r7, #10]
 80023bc:	4619      	mov	r1, r3
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	460b      	mov	r3, r1
 80023c8:	490d      	ldr	r1, [pc, #52]	@ (8002400 <Presenter_DispLCD_RUN_DIST+0x5c>)
 80023ca:	f005 faeb 	bl	80079a4 <siprintf>
	sprintf(str2, "distance:%.2fm", distance);
 80023ce:	f107 0010 	add.w	r0, r7, #16
 80023d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023d6:	490b      	ldr	r1, [pc, #44]	@ (8002404 <Presenter_DispLCD_RUN_DIST+0x60>)
 80023d8:	f005 fae4 	bl	80079a4 <siprintf>

	LCD_writeStringXY(0, 0, str1);
 80023dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023e0:	461a      	mov	r2, r3
 80023e2:	2100      	movs	r1, #0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f000 fe52 	bl	800308e <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	461a      	mov	r2, r3
 80023f0:	2100      	movs	r1, #0
 80023f2:	2001      	movs	r0, #1
 80023f4:	f000 fe4b 	bl	800308e <LCD_writeStringXY>
}
 80023f8:	bf00      	nop
 80023fa:	3778      	adds	r7, #120	@ 0x78
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0800b2c8 	.word	0x0800b2c8
 8002404:	0800b2e0 	.word	0x0800b2e0

08002408 <Presenter_DispLCD_CAL_SPEED>:

void Presenter_DispLCD_CAL_SPEED(double calories, uint8_t speed)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b09e      	sub	sp, #120	@ 0x78
 800240c:	af00      	add	r7, sp, #0
 800240e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	char str1[50];
	char str2[50];

	sprintf(str1, "calories:%.2f", calories);
 8002416:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800241a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241e:	490e      	ldr	r1, [pc, #56]	@ (8002458 <Presenter_DispLCD_CAL_SPEED+0x50>)
 8002420:	f005 fac0 	bl	80079a4 <siprintf>
	sprintf(str2, "speed:%d", speed);
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	490c      	ldr	r1, [pc, #48]	@ (800245c <Presenter_DispLCD_CAL_SPEED+0x54>)
 800242c:	4618      	mov	r0, r3
 800242e:	f005 fab9 	bl	80079a4 <siprintf>

	LCD_writeStringXY(0, 0, str1);
 8002432:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002436:	461a      	mov	r2, r3
 8002438:	2100      	movs	r1, #0
 800243a:	2000      	movs	r0, #0
 800243c:	f000 fe27 	bl	800308e <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	461a      	mov	r2, r3
 8002446:	2100      	movs	r1, #0
 8002448:	2001      	movs	r0, #1
 800244a:	f000 fe20 	bl	800308e <LCD_writeStringXY>
}
 800244e:	bf00      	nop
 8002450:	3778      	adds	r7, #120	@ 0x78
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	0800b2f0 	.word	0x0800b2f0
 800245c:	0800b300 	.word	0x0800b300

08002460 <Presenter_DispLCD_SONG_TITLE>:

void Presenter_DispLCD_SONG_TITLE(uint8_t song)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	switch (song) {
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d823      	bhi.n	80024b8 <Presenter_DispLCD_SONG_TITLE+0x58>
 8002470:	a201      	add	r2, pc, #4	@ (adr r2, 8002478 <Presenter_DispLCD_SONG_TITLE+0x18>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002489 	.word	0x08002489
 800247c:	08002495 	.word	0x08002495
 8002480:	080024a1 	.word	0x080024a1
 8002484:	080024ad 	.word	0x080024ad
		case 0:
			LCD_writeStringXY(0, 0, "0");
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <Presenter_DispLCD_SONG_TITLE+0x60>)
 800248a:	2100      	movs	r1, #0
 800248c:	2000      	movs	r0, #0
 800248e:	f000 fdfe 	bl	800308e <LCD_writeStringXY>
			break;
 8002492:	e011      	b.n	80024b8 <Presenter_DispLCD_SONG_TITLE+0x58>
		case 1:
			LCD_writeStringXY(0, 0, "1");
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <Presenter_DispLCD_SONG_TITLE+0x64>)
 8002496:	2100      	movs	r1, #0
 8002498:	2000      	movs	r0, #0
 800249a:	f000 fdf8 	bl	800308e <LCD_writeStringXY>
			break;
 800249e:	e00b      	b.n	80024b8 <Presenter_DispLCD_SONG_TITLE+0x58>
		case 2:
			LCD_writeStringXY(0, 0, "2");
 80024a0:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <Presenter_DispLCD_SONG_TITLE+0x68>)
 80024a2:	2100      	movs	r1, #0
 80024a4:	2000      	movs	r0, #0
 80024a6:	f000 fdf2 	bl	800308e <LCD_writeStringXY>
			break;
 80024aa:	e005      	b.n	80024b8 <Presenter_DispLCD_SONG_TITLE+0x58>
		case 3:
			LCD_writeStringXY(0, 0, "3");
 80024ac:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <Presenter_DispLCD_SONG_TITLE+0x6c>)
 80024ae:	2100      	movs	r1, #0
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 fdec 	bl	800308e <LCD_writeStringXY>
			break;
 80024b6:	bf00      	nop
	}
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	0800b30c 	.word	0x0800b30c
 80024c4:	0800b310 	.word	0x0800b310
 80024c8:	0800b314 	.word	0x0800b314
 80024cc:	0800b318 	.word	0x0800b318

080024d0 <Presenter_DispLCD_WARNING>:

void Presenter_DispLCD_WARNING()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "TOO FAR!!!");
 80024d4:	4a03      	ldr	r2, [pc, #12]	@ (80024e4 <Presenter_DispLCD_WARNING+0x14>)
 80024d6:	2100      	movs	r1, #0
 80024d8:	2000      	movs	r0, #0
 80024da:	f000 fdd8 	bl	800308e <LCD_writeStringXY>
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800b31c 	.word	0x0800b31c

080024e8 <Presenter_DispLED_Dist>:



// LED (Dist)
void Presenter_DispLED_Dist(uint32_t dist)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	int led_data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
	if(dist%50==0) led_data = (led_data << 1) + 1;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <Presenter_DispLED_Dist+0x3c>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	2132      	movs	r1, #50	@ 0x32
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <Presenter_DispLED_Dist+0x2a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	3301      	adds	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]

	LedBar_Write(led_data);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fdce 	bl	80030b8 <LedBar_Write>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	51eb851f 	.word	0x51eb851f

08002528 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002538:	d105      	bne.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 800253a:	f000 fac9 	bl	8002ad0 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 800253e:	f000 f959 	bl	80027f4 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 8002542:	f000 f8b7 	bl	80026b4 <StopWatch_IncTimeCallBack>
	}
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_UART_RxCpltCallback+0x20>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 8002562:	f7ff fe11 	bl	8002188 <Listener_UartCallBack>
	}
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40004400 	.word	0x40004400

08002574 <ap_main>:




int ap_main()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 8002578:	4805      	ldr	r0, [pc, #20]	@ (8002590 <ap_main+0x1c>)
 800257a:	f002 fb4d 	bl	8004c18 <HAL_TIM_Base_Start_IT>
	while(1)
	{
		Listener_Excute();
 800257e:	f7ff fceb 	bl	8001f58 <Listener_Excute>
		Controller_Excute();
 8002582:	f7ff fb5e 	bl	8001c42 <Controller_Excute>
		Presenter_Excute();
 8002586:	f7ff fe47 	bl	8002218 <Presenter_Excute>
		Listener_Excute();
 800258a:	bf00      	nop
 800258c:	e7f7      	b.n	800257e <ap_main+0xa>
 800258e:	bf00      	nop
 8002590:	2000036c 	.word	0x2000036c

08002594 <ap_init>:

	return 0;
}

void ap_init()
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	Listener_Init();
 8002598:	f7ff fcaa 	bl	8001ef0 <Listener_Init>
	Presenter_Init();
 800259c:	f7ff fe30 	bl	8002200 <Presenter_Init>
	Motor_Init();
 80025a0:	f7ff fe10 	bl	80021c4 <Motor_Init>
//	Sound_Init();
//	Sound_POWERON();
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	3301      	adds	r3, #1
 80025da:	4259      	negs	r1, r3
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	f001 0103 	and.w	r1, r1, #3
 80025e4:	bf58      	it	pl
 80025e6:	424b      	negpl	r3, r1
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffca 	bl	80025c8 <isQueFull>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d113      	bne.n	8002662 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3202      	adds	r2, #2
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	3301      	adds	r3, #1
 800264e:	425a      	negs	r2, r3
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	bf58      	it	pl
 800265a:	4253      	negpl	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6053      	str	r3, [r2, #4]
 8002660:	e000      	b.n	8002664 <enQue+0x40>
		return;
 8002662:	bf00      	nop
}
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <deQue>:

int deQue(Que_TypeDef *q)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffc3 	bl	80025fe <isQueEmpty>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d114      	bne.n	80026a8 <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3202      	adds	r2, #2
 8002686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800268a:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	425a      	negs	r2, r3
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	bf58      	it	pl
 800269e:	4253      	negpl	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6013      	str	r3, [r2, #0]
	return data;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e001      	b.n	80026ac <deQue+0x42>
		return;
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 80026b8:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <StopWatch_IncTimeCallBack+0x14>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 80026c0:	f000 f804 	bl	80026cc <StopWatch_IncTime>
	}
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000500 	.word	0x20000500

080026cc <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <StopWatch_IncTime+0x80>)
 80026d2:	889b      	ldrh	r3, [r3, #4]
 80026d4:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80026d8:	4293      	cmp	r3, r2
 80026da:	d806      	bhi.n	80026ea <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <StopWatch_IncTime+0x80>)
 80026de:	889b      	ldrh	r3, [r3, #4]
 80026e0:	3301      	adds	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <StopWatch_IncTime+0x80>)
 80026e6:	809a      	strh	r2, [r3, #4]
		return;
 80026e8:	e02c      	b.n	8002744 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <StopWatch_IncTime+0x80>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <StopWatch_IncTime+0x80>)
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80026f6:	d806      	bhi.n	8002706 <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <StopWatch_IncTime+0x80>)
 80026fa:	78db      	ldrb	r3, [r3, #3]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <StopWatch_IncTime+0x80>)
 8002702:	70da      	strb	r2, [r3, #3]
		return;
 8002704:	e01e      	b.n	8002744 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <StopWatch_IncTime+0x80>)
 8002708:	2200      	movs	r2, #0
 800270a:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <StopWatch_IncTime+0x80>)
 800270e:	789b      	ldrb	r3, [r3, #2]
 8002710:	2b3a      	cmp	r3, #58	@ 0x3a
 8002712:	d806      	bhi.n	8002722 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <StopWatch_IncTime+0x80>)
 8002716:	789b      	ldrb	r3, [r3, #2]
 8002718:	3301      	adds	r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <StopWatch_IncTime+0x80>)
 800271e:	709a      	strb	r2, [r3, #2]
		return;
 8002720:	e010      	b.n	8002744 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <StopWatch_IncTime+0x80>)
 8002724:	2200      	movs	r2, #0
 8002726:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <StopWatch_IncTime+0x80>)
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b16      	cmp	r3, #22
 800272e:	d806      	bhi.n	800273e <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <StopWatch_IncTime+0x80>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	3301      	adds	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <StopWatch_IncTime+0x80>)
 800273a:	705a      	strb	r2, [r3, #1]
		return;
 800273c:	e002      	b.n	8002744 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 800273e:	4b03      	ldr	r3, [pc, #12]	@ (800274c <StopWatch_IncTime+0x80>)
 8002740:	2200      	movs	r2, #0
 8002742:	705a      	strb	r2, [r3, #1]
}
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	20000030 	.word	0x20000030

08002750 <StopWatch_Excute>:

watch_t StopWatch_Excute()
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	switch (stopWatchState)
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <StopWatch_Excute+0x38>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <StopWatch_Excute+0x16>
 8002760:	2b01      	cmp	r3, #1
 8002762:	d003      	beq.n	800276c <StopWatch_Excute+0x1c>
 8002764:	e005      	b.n	8002772 <StopWatch_Excute+0x22>
	{
	case STOP:
		StopWatch_Stop();
 8002766:	f000 f825 	bl	80027b4 <StopWatch_Stop>
		break;
 800276a:	e002      	b.n	8002772 <StopWatch_Excute+0x22>
	case RUN:
		StopWatch_Run();
 800276c:	f000 f810 	bl	8002790 <StopWatch_Run>
		break;
 8002770:	bf00      	nop
	}
	return stopWatch;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a05      	ldr	r2, [pc, #20]	@ (800278c <StopWatch_Excute+0x3c>)
 8002776:	6810      	ldr	r0, [r2, #0]
 8002778:	6018      	str	r0, [r3, #0]
 800277a:	8892      	ldrh	r2, [r2, #4]
 800277c:	809a      	strh	r2, [r3, #4]
}
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000500 	.word	0x20000500
 800278c:	20000030 	.word	0x20000030

08002790 <StopWatch_Run>:


void StopWatch_Run()
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	if (controlData.id == RUN_STOP) {
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <StopWatch_Run+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d102      	bne.n	80027a2 <StopWatch_Run+0x12>
		stopWatchState = STOP;
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <StopWatch_Run+0x20>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
	//		FND_WriteDp(FND_DP_1000, FND_DP_ON);
	//	}
	//	else {
	//		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	//	}
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	2000048c 	.word	0x2000048c
 80027b0:	20000500 	.word	0x20000500

080027b4 <StopWatch_Stop>:

void StopWatch_Stop()
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

	stopWatch.msec = 0;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <StopWatch_Stop+0x34>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <StopWatch_Stop+0x34>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <StopWatch_Stop+0x34>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <StopWatch_Stop+0x34>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	705a      	strb	r2, [r3, #1]
	if (controlData.id == RUN_STOP) {
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <StopWatch_Stop+0x38>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d102      	bne.n	80027de <StopWatch_Stop+0x2a>
		stopWatchState = RUN;
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <StopWatch_Stop+0x3c>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
	}

	//FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	20000030 	.word	0x20000030
 80027ec:	2000048c 	.word	0x2000048c
 80027f0:	20000500 	.word	0x20000500

080027f4 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 80027fa:	889b      	ldrh	r3, [r3, #4]
 80027fc:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8002800:	4293      	cmp	r3, r2
 8002802:	d806      	bhi.n	8002812 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002806:	889b      	ldrh	r3, [r3, #4]
 8002808:	3301      	adds	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800280e:	809a      	strh	r2, [r3, #4]
		return;
 8002810:	e02c      	b.n	800286c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002814:	2200      	movs	r2, #0
 8002816:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	2b3a      	cmp	r3, #58	@ 0x3a
 800281e:	d806      	bhi.n	800282e <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002822:	78db      	ldrb	r3, [r3, #3]
 8002824:	3301      	adds	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800282a:	70da      	strb	r2, [r3, #3]
		return;
 800282c:	e01e      	b.n	800286c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002830:	2200      	movs	r2, #0
 8002832:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	2b3a      	cmp	r3, #58	@ 0x3a
 800283a:	d806      	bhi.n	800284a <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800283e:	789b      	ldrb	r3, [r3, #2]
 8002840:	3301      	adds	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002846:	709a      	strb	r2, [r3, #2]
		return;
 8002848:	e010      	b.n	800286c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800284c:	2200      	movs	r2, #0
 800284e:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	2b16      	cmp	r3, #22
 8002856:	d806      	bhi.n	8002866 <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	3301      	adds	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002862:	705a      	strb	r2, [r3, #1]
		return;
 8002864:	e002      	b.n	800286c <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8002866:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <TimeWatch_IncTimeCallBack+0x80>)
 8002868:	2200      	movs	r2, #0
 800286a:	705a      	strb	r2, [r3, #1]
}
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	20000038 	.word	0x20000038

08002878 <TimeWatch_Excute>:

watch_t TimeWatch_Excute()
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	return timeWatch;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <TimeWatch_Excute+0x20>)
 8002884:	6810      	ldr	r0, [r2, #0]
 8002886:	6018      	str	r0, [r3, #0]
 8002888:	8892      	ldrh	r2, [r2, #4]
 800288a:	809a      	strh	r2, [r3, #4]
//		FND_WriteDp(FND_DP_100, FND_DP_ON);
//	}
//	else {
//		FND_WriteDp(FND_DP_100, FND_DP_OFF);
//	}
}
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20000038 	.word	0x20000038

0800289c <Button_Init>:
Button_Handler_t hBtnSpeedUp;
Button_Handler_t hBtnSpeedDown;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	609a      	str	r2, [r3, #8]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 ffe4 	bl	80038a8 <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10a      	bne.n	8002902 <Button_GetState+0x3a>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d107      	bne.n	8002902 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 80028f2:	2002      	movs	r0, #2
 80028f4:	f000 fc8c 	bl	8003210 <HAL_Delay>
		hbtn->prevState = PUSHED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <Button_GetState+0x58>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8002910:	2002      	movs	r0, #2
 8002912:	f000 fc7d 	bl	8003210 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 800291c:	2302      	movs	r3, #2
 800291e:	e000      	b.n	8002922 <Button_GetState+0x5a>
	}
	return NO_ACT;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8002936:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <DC_Motor_Init+0x24>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 800293c:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <DC_Motor_Init+0x28>)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000534 	.word	0x20000534
 8002954:	20000538 	.word	0x20000538

08002958 <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	if (freq < 1) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <DC_Motor_SetFreq+0x14>
		freq = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	e007      	b.n	800297c <DC_Motor_SetFreq+0x24>
	}
	else if (freq > 10000) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002972:	4293      	cmp	r3, r2
 8002974:	d902      	bls.n	800297c <DC_Motor_SetFreq+0x24>
		freq = 10000;
 8002976:	f242 7310 	movw	r3, #10000	@ 0x2710
 800297a:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(hmotorTim, 1000000/freq-1);
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <DC_Motor_SetFreq+0xb8>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fbb2 f2f3 	udiv	r2, r2, r3
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3a01      	subs	r2, #1
 800298c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800298e:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <DC_Motor_SetFreq+0xb8>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	fbb2 f2f3 	udiv	r2, r2, r3
 8002996:	4b1f      	ldr	r3, [pc, #124]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3a01      	subs	r2, #1
 800299c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 800299e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <DC_Motor_SetFreq+0xc0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <DC_Motor_SetFreq+0x62>
 80029a6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a1c <DC_Motor_SetFreq+0xc4>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3a01      	subs	r2, #1
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029b8:	e024      	b.n	8002a04 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <DC_Motor_SetFreq+0xc0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d109      	bne.n	80029d6 <DC_Motor_SetFreq+0x7e>
 80029c2:	4a16      	ldr	r2, [pc, #88]	@ (8002a1c <DC_Motor_SetFreq+0xc4>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029d4:	e016      	b.n	8002a04 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <DC_Motor_SetFreq+0xc0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d109      	bne.n	80029f2 <DC_Motor_SetFreq+0x9a>
 80029de:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <DC_Motor_SetFreq+0xc4>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80029f0:	e008      	b.n	8002a04 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <DC_Motor_SetFreq+0xc4>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <DC_Motor_SetFreq+0xbc>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	000f4240 	.word	0x000f4240
 8002a14:	20000534 	.word	0x20000534
 8002a18:	20000538 	.word	0x20000538
 8002a1c:	0007a120 	.word	0x0007a120

08002a20 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <DC_Motor_Start+0x18>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <DC_Motor_Start+0x1c>)
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f002 f9ae 	bl	8004d90 <HAL_TIM_PWM_Start>
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000534 	.word	0x20000534
 8002a3c:	20000538 	.word	0x20000538

08002a40 <DC_Motor_Stop>:
void DC_Motor_Stop()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(hmotorTim, motorTimChannel);
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <DC_Motor_Stop+0x18>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <DC_Motor_Stop+0x1c>)
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 fa4e 	bl	8004ef0 <HAL_TIM_PWM_Stop>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000534 	.word	0x20000534
 8002a5c:	20000538 	.word	0x20000538

08002a60 <FND_WriteDp>:
static uint8_t fndDispDp = 0;   // fnd dp data, xxxx1111 -> xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	460a      	mov	r2, r1
 8002a6a:	71fb      	strb	r3, [r7, #7]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8002a70:	79bb      	ldrb	r3, [r7, #6]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d107      	bne.n	8002a86 <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <FND_WriteDp+0x4c>)
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <FND_WriteDp+0x4c>)
 8002a82:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8002a84:	e00b      	b.n	8002a9e <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <FND_WriteDp+0x4c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b25b      	sxtb	r3, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	b25b      	sxtb	r3, r3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <FND_WriteDp+0x4c>)
 8002a9c:	701a      	strb	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	2000053e 	.word	0x2000053e

08002ab0 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <FND_WriteData+0x1c>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	8013      	strh	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	2000053c 	.word	0x2000053c

08002ad0 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8002ad4:	4b80      	ldr	r3, [pc, #512]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	425a      	negs	r2, r3
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	f002 0207 	and.w	r2, r2, #7
 8002ae4:	bf58      	it	pl
 8002ae6:	4253      	negpl	r3, r2
 8002ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002aea:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8002aec:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b07      	cmp	r3, #7
 8002af2:	f200 80ee 	bhi.w	8002cd2 <FND_DispDataCallBack+0x202>
 8002af6:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <FND_DispDataCallBack+0x2c>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b1d 	.word	0x08002b1d
 8002b00:	08002b4b 	.word	0x08002b4b
 8002b04:	08002b83 	.word	0x08002b83
 8002b08:	08002bbb 	.word	0x08002bbb
 8002b0c:	08002bf3 	.word	0x08002bf3
 8002b10:	08002c2b 	.word	0x08002c2b
 8002b14:	08002c63 	.word	0x08002c63
 8002b18:	08002c9b 	.word	0x08002c9b
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002b1c:	f000 f900 	bl	8002d20 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8002b20:	4b6e      	ldr	r3, [pc, #440]	@ (8002cdc <FND_DispDataCallBack+0x20c>)
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce0 <FND_DispDataCallBack+0x210>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	08d9      	lsrs	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f913 	bl	8002d64 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002b3e:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f8d4 	bl	8002cf0 <FND_DispOn>
		break;
 8002b48:	e0c3      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002b4a:	f000 f8e9 	bl	8002d20 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 8002b4e:	4b63      	ldr	r3, [pc, #396]	@ (8002cdc <FND_DispDataCallBack+0x20c>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4a63      	ldr	r2, [pc, #396]	@ (8002ce0 <FND_DispDataCallBack+0x210>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4b60      	ldr	r3, [pc, #384]	@ (8002ce0 <FND_DispDataCallBack+0x210>)
 8002b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b62:	08d9      	lsrs	r1, r3, #3
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 f8f7 	bl	8002d64 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002b76:	4b58      	ldr	r3, [pc, #352]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f8b8 	bl	8002cf0 <FND_DispOn>
		break;
 8002b80:	e0a7      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002b82:	f000 f8cd 	bl	8002d20 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8002b86:	4b55      	ldr	r3, [pc, #340]	@ (8002cdc <FND_DispDataCallBack+0x20c>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	4a56      	ldr	r2, [pc, #344]	@ (8002ce4 <FND_DispDataCallBack+0x214>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	4b52      	ldr	r3, [pc, #328]	@ (8002ce0 <FND_DispDataCallBack+0x210>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	08d9      	lsrs	r1, r3, #3
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f8db 	bl	8002d64 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f89c 	bl	8002cf0 <FND_DispOn>
		break;
 8002bb8:	e08b      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002bba:	f000 f8b1 	bl	8002d20 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8002bbe:	4b47      	ldr	r3, [pc, #284]	@ (8002cdc <FND_DispDataCallBack+0x20c>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	4a49      	ldr	r2, [pc, #292]	@ (8002ce8 <FND_DispDataCallBack+0x218>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b44      	ldr	r3, [pc, #272]	@ (8002ce0 <FND_DispDataCallBack+0x210>)
 8002bce:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd2:	08d9      	lsrs	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f8bf 	bl	8002d64 <FND_DispDigit>
		FND_DispOn(digitPos);
 8002be6:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f880 	bl	8002cf0 <FND_DispOn>
		break;
 8002bf0:	e06f      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002bf2:	f000 f895 	bl	8002d20 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cec <FND_DispDataCallBack+0x21c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8002c02:	200a      	movs	r0, #10
 8002c04:	f000 f8ae 	bl	8002d64 <FND_DispDigit>
 8002c08:	e002      	b.n	8002c10 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002c0a:	200b      	movs	r0, #11
 8002c0c:	f000 f8aa 	bl	8002d64 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	425a      	negs	r2, r3
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	f002 0203 	and.w	r2, r2, #3
 8002c1e:	bf58      	it	pl
 8002c20:	4253      	negpl	r3, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f864 	bl	8002cf0 <FND_DispOn>
		break;
 8002c28:	e053      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002c2a:	f000 f879 	bl	8002d20 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cec <FND_DispDataCallBack+0x21c>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8002c3a:	200a      	movs	r0, #10
 8002c3c:	f000 f892 	bl	8002d64 <FND_DispDigit>
 8002c40:	e002      	b.n	8002c48 <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002c42:	200b      	movs	r0, #11
 8002c44:	f000 f88e 	bl	8002d64 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	425a      	negs	r2, r3
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	bf58      	it	pl
 8002c58:	4253      	negpl	r3, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f848 	bl	8002cf0 <FND_DispOn>
		break;
 8002c60:	e037      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002c62:	f000 f85d 	bl	8002d20 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 8002c66:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <FND_DispDataCallBack+0x21c>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8002c72:	200a      	movs	r0, #10
 8002c74:	f000 f876 	bl	8002d64 <FND_DispDigit>
 8002c78:	e002      	b.n	8002c80 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002c7a:	200b      	movs	r0, #11
 8002c7c:	f000 f872 	bl	8002d64 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	425a      	negs	r2, r3
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	bf58      	it	pl
 8002c90:	4253      	negpl	r3, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f82c 	bl	8002cf0 <FND_DispOn>
		break;
 8002c98:	e01b      	b.n	8002cd2 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8002c9a:	f000 f841 	bl	8002d20 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 8002c9e:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <FND_DispDataCallBack+0x21c>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 8002caa:	200a      	movs	r0, #10
 8002cac:	f000 f85a 	bl	8002d64 <FND_DispDigit>
 8002cb0:	e002      	b.n	8002cb8 <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002cb2:	200b      	movs	r0, #11
 8002cb4:	f000 f856 	bl	8002d64 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <FND_DispDataCallBack+0x208>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	425a      	negs	r2, r3
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	bf58      	it	pl
 8002cc8:	4253      	negpl	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f810 	bl	8002cf0 <FND_DispOn>
		break;
 8002cd0:	bf00      	nop
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000540 	.word	0x20000540
 8002cdc:	2000053c 	.word	0x2000053c
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	51eb851f 	.word	0x51eb851f
 8002ce8:	10624dd3 	.word	0x10624dd3
 8002cec:	2000053e 	.word	0x2000053e

08002cf0 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 8002cf8:	4a08      	ldr	r2, [pc, #32]	@ (8002d1c <FND_DispOn+0x2c>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002d00:	4a06      	ldr	r2, [pc, #24]	@ (8002d1c <FND_DispOn+0x2c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f000 fde2 	bl	80038d8 <HAL_GPIO_WritePin>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000040 	.word	0x20000040

08002d20 <FND_DispOffAll>:

void FND_DispOffAll()
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	e010      	b.n	8002d4e <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <FND_DispOffAll+0x40>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <FND_DispOffAll+0x40>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	f000 fdc8 	bl	80038d8 <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	ddeb      	ble.n	8002d2c <FND_DispOffAll+0xc>
	}
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000040 	.word	0x20000040

08002d64 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <FND_DispDigit+0x88>)
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e02c      	b.n	8002dda <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	3318      	adds	r3, #24
 8002d84:	443b      	add	r3, r7
 8002d86:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa42 f303 	asr.w	r3, r2, r3
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10e      	bne.n	8002db8 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 8002d9a:	4a15      	ldr	r2, [pc, #84]	@ (8002df0 <FND_DispDigit+0x8c>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002da2:	4a13      	ldr	r2, [pc, #76]	@ (8002df0 <FND_DispDigit+0x8c>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	4619      	mov	r1, r3
 8002db2:	f000 fd91 	bl	80038d8 <HAL_GPIO_WritePin>
 8002db6:	e00d      	b.n	8002dd4 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <FND_DispDigit+0x8c>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <FND_DispDigit+0x8c>)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f000 fd82 	bl	80038d8 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b07      	cmp	r3, #7
 8002dde:	ddcf      	ble.n	8002d80 <FND_DispDigit+0x1c>
		}
	}
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	0800b328 	.word	0x0800b328
 8002df0:	20000060 	.word	0x20000060

08002df4 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8002dfc:	4a18      	ldr	r2, [pc, #96]	@ (8002e60 <LCD_Init+0x6c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8002e02:	2032      	movs	r0, #50	@ 0x32
 8002e04:	f000 fa04 	bl	8003210 <HAL_Delay>
	LCD_cmdMode();
 8002e08:	f000 f850 	bl	8002eac <LCD_cmdMode>
	LCD_writeMode();
 8002e0c:	f000 f872 	bl	8002ef4 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 8002e10:	2030      	movs	r0, #48	@ 0x30
 8002e12:	f000 f8a5 	bl	8002f60 <LCD_sendNibbleData>
	HAL_Delay(5);
 8002e16:	2005      	movs	r0, #5
 8002e18:	f000 f9fa 	bl	8003210 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002e1c:	2030      	movs	r0, #48	@ 0x30
 8002e1e:	f000 f89f 	bl	8002f60 <LCD_sendNibbleData>
	HAL_Delay(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f000 f9f4 	bl	8003210 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 8002e28:	2030      	movs	r0, #48	@ 0x30
 8002e2a:	f000 f899 	bl	8002f60 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 8002e2e:	2020      	movs	r0, #32
 8002e30:	f000 f896 	bl	8002f60 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 8002e34:	2028      	movs	r0, #40	@ 0x28
 8002e36:	f000 f8b7 	bl	8002fa8 <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 8002e3a:	2008      	movs	r0, #8
 8002e3c:	f000 f8b4 	bl	8002fa8 <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 8002e40:	2001      	movs	r0, #1
 8002e42:	f000 f8b1 	bl	8002fa8 <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 8002e46:	2006      	movs	r0, #6
 8002e48:	f000 f8ae 	bl	8002fa8 <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 8002e4c:	200c      	movs	r0, #12
 8002e4e:	f000 f8ab 	bl	8002fa8 <LCD_sendData>
	LCD_backLightOn();
 8002e52:	f000 f81b 	bl	8002e8c <LCD_backLightOn>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000548 	.word	0x20000548

08002e64 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 10);
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <LCD_sendI2C+0x24>)
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	1dfa      	adds	r2, r7, #7
 8002e74:	230a      	movs	r3, #10
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	214e      	movs	r1, #78	@ 0x4e
 8002e7c:	f000 fe8a 	bl	8003b94 <HAL_I2C_Master_Transmit>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000548 	.word	0x20000548

08002e8c <LCD_backLightOn>:

void LCD_backLightOn()
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <LCD_backLightOn+0x1c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4b03      	ldr	r3, [pc, #12]	@ (8002ea8 <LCD_backLightOn+0x1c>)
 8002e9c:	701a      	strb	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	20000544 	.word	0x20000544

08002eac <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <LCD_cmdMode+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <LCD_cmdMode+0x20>)
 8002ebc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002ebe:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <LCD_cmdMode+0x20>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff ffce 	bl	8002e64 <LCD_sendI2C>
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000544 	.word	0x20000544

08002ed0 <LCD_charMode>:

void LCD_charMode()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <LCD_charMode+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <LCD_charMode+0x20>)
 8002ee0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <LCD_charMode+0x20>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ffbc 	bl	8002e64 <LCD_sendI2C>
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000544 	.word	0x20000544

08002ef4 <LCD_writeMode>:

void LCD_writeMode()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <LCD_writeMode+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f023 0302 	bic.w	r3, r3, #2
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <LCD_writeMode+0x20>)
 8002f04:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002f06:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <LCD_writeMode+0x20>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffaa 	bl	8002e64 <LCD_sendI2C>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000544 	.word	0x20000544

08002f18 <LCD_E_High>:

void LCD_E_High()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <LCD_E_High+0x20>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <LCD_E_High+0x20>)
 8002f28:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002f2a:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <LCD_E_High+0x20>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff98 	bl	8002e64 <LCD_sendI2C>
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000544 	.word	0x20000544

08002f3c <LCD_E_Low>:

void LCD_E_Low()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <LCD_E_Low+0x20>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <LCD_E_Low+0x20>)
 8002f4c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002f4e:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <LCD_E_Low+0x20>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff86 	bl	8002e64 <LCD_sendI2C>
}
 8002f58:	bf00      	nop
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000544 	.word	0x20000544

08002f60 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 8002f6a:	f7ff ffd5 	bl	8002f18 <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	f023 030f 	bic.w	r3, r3, #15
 8002f76:	b25a      	sxtb	r2, r3
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <LCD_sendNibbleData+0x44>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <LCD_sendNibbleData+0x44>)
 8002f8c:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <LCD_sendNibbleData+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff66 	bl	8002e64 <LCD_sendI2C>
	LCD_E_Low();
 8002f98:	f7ff ffd0 	bl	8002f3c <LCD_E_Low>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000544 	.word	0x20000544

08002fa8 <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ffd3 	bl	8002f60 <LCD_sendNibbleData>

	data = data << 4;
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ffcc 	bl	8002f60 <LCD_sendNibbleData>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002fda:	f7ff ff8b 	bl	8002ef4 <LCD_writeMode>
	LCD_cmdMode();
 8002fde:	f7ff ff65 	bl	8002eac <LCD_cmdMode>
	LCD_sendData(data);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ffdf 	bl	8002fa8 <LCD_sendData>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002ffc:	f7ff ff7a 	bl	8002ef4 <LCD_writeMode>
	LCD_charMode();
 8003000:	f7ff ff66 	bl	8002ed0 <LCD_charMode>
	LCD_sendData(data);
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ffce 	bl	8002fa8 <LCD_sendData>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <LCD_writeString>:

void LCD_writeString(char *str)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e009      	b.n	8003036 <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ffe1 	bl	8002ff2 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ef      	bne.n	8003022 <LCD_writeString+0xe>
	}
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	460a      	mov	r2, r1
 8003056:	71fb      	strb	r3, [r7, #7]
 8003058:	4613      	mov	r3, r2
 800305a:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	019b      	lsls	r3, r3, #6
 8003070:	b2da      	uxtb	r2, r3
 8003072:	79bb      	ldrb	r3, [r7, #6]
 8003074:	4413      	add	r3, r2
 8003076:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3b80      	subs	r3, #128	@ 0x80
 800307c:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 800307e:	7bbb      	ldrb	r3, [r7, #14]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ffa5 	bl	8002fd0 <LCD_writeCmdData>
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	603a      	str	r2, [r7, #0]
 8003098:	71fb      	strb	r3, [r7, #7]
 800309a:	460b      	mov	r3, r1
 800309c:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 800309e:	79ba      	ldrb	r2, [r7, #6]
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ffd1 	bl	800304c <LCD_gotoXY>
	LCD_writeString(str);
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f7ff ffb2 	bl	8003014 <LCD_writeString>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e027      	b.n	8003118 <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	fa42 f303 	asr.w	r3, r2, r3
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 80030d8:	4a13      	ldr	r2, [pc, #76]	@ (8003128 <LedBar_Write+0x70>)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030e0:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <LedBar_Write+0x70>)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	4619      	mov	r1, r3
 80030f0:	f000 fbf2 	bl	80038d8 <HAL_GPIO_WritePin>
 80030f4:	e00d      	b.n	8003112 <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <LedBar_Write+0x70>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <LedBar_Write+0x70>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	b29b      	uxth	r3, r3
 800310a:	2201      	movs	r2, #1
 800310c:	4619      	mov	r1, r3
 800310e:	f000 fbe3 	bl	80038d8 <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3301      	adds	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b07      	cmp	r3, #7
 800311c:	ddd4      	ble.n	80030c8 <LedBar_Write+0x10>
		}
	}
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200000a0 	.word	0x200000a0

0800312c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003130:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <HAL_Init+0x40>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_Init+0x40>)
 8003142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_Init+0x40>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 f94f 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315a:	2000      	movs	r0, #0
 800315c:	f000 f808 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003160:	f7fe f90c 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_InitTick+0x54>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <HAL_InitTick+0x58>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003186:	fbb3 f3f1 	udiv	r3, r3, r1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f967 	bl	8003462 <HAL_SYSTICK_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00e      	b.n	80031bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d80a      	bhi.n	80031ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a4:	2200      	movs	r2, #0
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f000 f92f 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b0:	4a06      	ldr	r2, [pc, #24]	@ (80031cc <HAL_InitTick+0x5c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000000 	.word	0x20000000
 80031c8:	200000e4 	.word	0x200000e4
 80031cc:	200000e0 	.word	0x200000e0

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200000e4 	.word	0x200000e4
 80031f4:	2000054c 	.word	0x2000054c

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	2000054c 	.word	0x2000054c

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ffee 	bl	80031f8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d005      	beq.n	8003236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_Delay+0x44>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003236:	bf00      	nop
 8003238:	f7ff ffde 	bl	80031f8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d8f7      	bhi.n	8003238 <HAL_Delay+0x28>
  {
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	200000e4 	.word	0x200000e4

08003258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4907      	ldr	r1, [pc, #28]	@ (80032f4 <__NVIC_EnableIRQ+0x38>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff29 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff3e 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff31 	bl	80032bc <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffa2 	bl	80033b4 <SysTick_Config>
 8003470:	4603      	mov	r3, r0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff feb6 	bl	80031f8 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d008      	beq.n	80034ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2280      	movs	r2, #128	@ 0x80
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e052      	b.n	8003552 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0216 	bic.w	r2, r2, #22
 80034ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_DMA_Abort+0x62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034fc:	e013      	b.n	8003526 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034fe:	f7ff fe7b 	bl	80031f8 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b05      	cmp	r3, #5
 800350a:	d90c      	bls.n	8003526 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e015      	b.n	8003552 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e4      	bne.n	80034fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	223f      	movs	r2, #63	@ 0x3f
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d004      	beq.n	8003578 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2280      	movs	r2, #128	@ 0x80
 8003572:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e00c      	b.n	8003592 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2205      	movs	r2, #5
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e159      	b.n	8003870 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	f040 8148 	bne.w	800386a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d005      	beq.n	80035f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d130      	bne.n	8003654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	2203      	movs	r2, #3
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003628:	2201      	movs	r2, #1
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0201 	and.w	r2, r3, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b03      	cmp	r3, #3
 800365e:	d017      	beq.n	8003690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d123      	bne.n	80036e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	69b9      	ldr	r1, [r7, #24]
 80036e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0203 	and.w	r2, r3, #3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a2 	beq.w	800386a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b57      	ldr	r3, [pc, #348]	@ (8003888 <HAL_GPIO_Init+0x2e8>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	4a56      	ldr	r2, [pc, #344]	@ (8003888 <HAL_GPIO_Init+0x2e8>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003734:	6453      	str	r3, [r2, #68]	@ 0x44
 8003736:	4b54      	ldr	r3, [pc, #336]	@ (8003888 <HAL_GPIO_Init+0x2e8>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003742:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_GPIO_Init+0x2ec>)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a49      	ldr	r2, [pc, #292]	@ (8003890 <HAL_GPIO_Init+0x2f0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x202>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <HAL_GPIO_Init+0x2f4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x1fe>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_GPIO_Init+0x2f8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x1fa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a46      	ldr	r2, [pc, #280]	@ (800389c <HAL_GPIO_Init+0x2fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x1f6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a45      	ldr	r2, [pc, #276]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x1f2>
 800378e:	2304      	movs	r3, #4
 8003790:	e008      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 8003792:	2307      	movs	r3, #7
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 8003796:	2303      	movs	r3, #3
 8003798:	e004      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 800379a:	2302      	movs	r3, #2
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_GPIO_Init+0x204>
 80037a2:	2300      	movs	r3, #0
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f002 0203 	and.w	r2, r2, #3
 80037aa:	0092      	lsls	r2, r2, #2
 80037ac:	4093      	lsls	r3, r2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b4:	4935      	ldr	r1, [pc, #212]	@ (800388c <HAL_GPIO_Init+0x2ec>)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037e6:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ec:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003810:	4a24      	ldr	r2, [pc, #144]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003816:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800383a:	4a1a      	ldr	r2, [pc, #104]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003840:	4b18      	ldr	r3, [pc, #96]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003864:	4a0f      	ldr	r2, [pc, #60]	@ (80038a4 <HAL_GPIO_Init+0x304>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	f67f aea2 	bls.w	80035bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3724      	adds	r7, #36	@ 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800
 800388c:	40013800 	.word	0x40013800
 8003890:	40020000 	.word	0x40020000
 8003894:	40020400 	.word	0x40020400
 8003898:	40020800 	.word	0x40020800
 800389c:	40020c00 	.word	0x40020c00
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40013c00 	.word	0x40013c00

080038a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e001      	b.n	80038ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038f4:	e003      	b.n	80038fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e12b      	b.n	8003b76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fc52 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800395e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800396e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003970:	f001 f8da 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8003974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a81      	ldr	r2, [pc, #516]	@ (8003b80 <HAL_I2C_Init+0x274>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d807      	bhi.n	8003990 <HAL_I2C_Init+0x84>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a80      	ldr	r2, [pc, #512]	@ (8003b84 <HAL_I2C_Init+0x278>)
 8003984:	4293      	cmp	r3, r2
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e006      	b.n	800399e <HAL_I2C_Init+0x92>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a7d      	ldr	r2, [pc, #500]	@ (8003b88 <HAL_I2C_Init+0x27c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	bf94      	ite	ls
 8003998:	2301      	movls	r3, #1
 800399a:	2300      	movhi	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0e7      	b.n	8003b76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a78      	ldr	r2, [pc, #480]	@ (8003b8c <HAL_I2C_Init+0x280>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0c9b      	lsrs	r3, r3, #18
 80039b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003b80 <HAL_I2C_Init+0x274>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d802      	bhi.n	80039e0 <HAL_I2C_Init+0xd4>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	e009      	b.n	80039f4 <HAL_I2C_Init+0xe8>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a69      	ldr	r2, [pc, #420]	@ (8003b90 <HAL_I2C_Init+0x284>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	3301      	adds	r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	495c      	ldr	r1, [pc, #368]	@ (8003b80 <HAL_I2C_Init+0x274>)
 8003a10:	428b      	cmp	r3, r1
 8003a12:	d819      	bhi.n	8003a48 <HAL_I2C_Init+0x13c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e59      	subs	r1, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a22:	1c59      	adds	r1, r3, #1
 8003a24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a28:	400b      	ands	r3, r1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_I2C_Init+0x138>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e59      	subs	r1, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a42:	e051      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003a44:	2304      	movs	r3, #4
 8003a46:	e04f      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d111      	bne.n	8003a74 <HAL_I2C_Init+0x168>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1e58      	subs	r0, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e012      	b.n	8003a9a <HAL_I2C_Init+0x18e>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e58      	subs	r0, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Init+0x196>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e022      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_I2C_Init+0x1bc>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e58      	subs	r0, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	440b      	add	r3, r1
 8003ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac6:	e00f      	b.n	8003ae8 <HAL_I2C_Init+0x1dc>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1e58      	subs	r0, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	0099      	lsls	r1, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	6809      	ldr	r1, [r1, #0]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6911      	ldr	r1, [r2, #16]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68d2      	ldr	r2, [r2, #12]
 8003b22:	4311      	orrs	r1, r2
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	000186a0 	.word	0x000186a0
 8003b84:	001e847f 	.word	0x001e847f
 8003b88:	003d08ff 	.word	0x003d08ff
 8003b8c:	431bde83 	.word	0x431bde83
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	817b      	strh	r3, [r7, #10]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff fb26 	bl	80031f8 <HAL_GetTick>
 8003bac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	f040 80e0 	bne.w	8003d7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4970      	ldr	r1, [pc, #448]	@ (8003d88 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f964 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0d3      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2C_Master_Transmit+0x50>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0cc      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d007      	beq.n	8003c0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2221      	movs	r2, #33	@ 0x21
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2210      	movs	r2, #16
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	893a      	ldrh	r2, [r7, #8]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a50      	ldr	r2, [pc, #320]	@ (8003d8c <HAL_I2C_Master_Transmit+0x1f8>)
 8003c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6a3a      	ldr	r2, [r7, #32]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f89c 	bl	8003d90 <I2C_MasterRequestWrite>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e08d      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c78:	e066      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	6a39      	ldr	r1, [r7, #32]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa22 	bl	80040c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06b      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11b      	bne.n	8003d1c <HAL_I2C_Master_Transmit+0x188>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d017      	beq.n	8003d1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fa19 	bl	8004158 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d107      	bne.n	8003d44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e01a      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d194      	bne.n	8003c7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	00100002 	.word	0x00100002
 8003d8c:	ffff0000 	.word	0xffff0000

08003d90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d006      	beq.n	8003dba <I2C_MasterRequestWrite+0x2a>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d003      	beq.n	8003dba <I2C_MasterRequestWrite+0x2a>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003db8:	d108      	bne.n	8003dcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e00b      	b.n	8003de4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	2b12      	cmp	r3, #18
 8003dd2:	d107      	bne.n	8003de4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f84f 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0a:	d103      	bne.n	8003e14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e035      	b.n	8003e84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e20:	d108      	bne.n	8003e34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e01b      	b.n	8003e6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	11db      	asrs	r3, r3, #7
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 0306 	and.w	r3, r3, #6
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f063 030f 	orn	r3, r3, #15
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <I2C_MasterRequestWrite+0xfc>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f898 	bl	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e010      	b.n	8003e84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4907      	ldr	r1, [pc, #28]	@ (8003e90 <I2C_MasterRequestWrite+0x100>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f888 	bl	8003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	00010008 	.word	0x00010008
 8003e90:	00010002 	.word	0x00010002

08003e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea4:	e048      	b.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d044      	beq.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7ff f9a3 	bl	80031f8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d139      	bne.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10d      	bne.n	8003eea <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	e00c      	b.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d116      	bne.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e023      	b.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	0c1b      	lsrs	r3, r3, #16
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10d      	bne.n	8003f5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	43da      	mvns	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	e00c      	b.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf0c      	ite	eq
 8003f70:	2301      	moveq	r3, #1
 8003f72:	2300      	movne	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d093      	beq.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f96:	e071      	b.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa6:	d123      	bne.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e067      	b.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d041      	beq.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff8:	f7ff f8fe 	bl	80031f8 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d136      	bne.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10c      	bne.n	8004032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf14      	ite	ne
 800402a:	2301      	movne	r3, #1
 800402c:	2300      	moveq	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e00b      	b.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	43da      	mvns	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e021      	b.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10c      	bne.n	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	43da      	mvns	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e00b      	b.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f47f af6d 	bne.w	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d4:	e034      	b.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f886 	bl	80041e8 <I2C_IsAcknowledgeFailed>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e034      	b.n	8004150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d028      	beq.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7ff f883 	bl	80031f8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11d      	bne.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b80      	cmp	r3, #128	@ 0x80
 8004110:	d016      	beq.n	8004140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414a:	2b80      	cmp	r3, #128	@ 0x80
 800414c:	d1c3      	bne.n	80040d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004164:	e034      	b.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f83e 	bl	80041e8 <I2C_IsAcknowledgeFailed>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e034      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d028      	beq.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417e:	f7ff f83b 	bl	80031f8 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d302      	bcc.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11d      	bne.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d016      	beq.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e007      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d1c3      	bne.n	8004166 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fe:	d11b      	bne.n	8004238 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004208:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e267      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d075      	beq.n	8004352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004266:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00c      	beq.n	800428c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004272:	4b85      	ldr	r3, [pc, #532]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800427a:	2b08      	cmp	r3, #8
 800427c:	d112      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427e:	4b82      	ldr	r3, [pc, #520]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4b7e      	ldr	r3, [pc, #504]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05b      	beq.n	8004350 <HAL_RCC_OscConfig+0x108>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d157      	bne.n	8004350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e242      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x74>
 80042ae:	4b76      	ldr	r3, [pc, #472]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a75      	ldr	r2, [pc, #468]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x98>
 80042c6:	4b70      	ldr	r3, [pc, #448]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6c      	ldr	r2, [pc, #432]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042e0:	4b69      	ldr	r3, [pc, #420]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a68      	ldr	r2, [pc, #416]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b66      	ldr	r3, [pc, #408]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a65      	ldr	r2, [pc, #404]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe ff7a 	bl	80031f8 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe ff76 	bl	80031f8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e207      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xc0>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe ff66 	bl	80031f8 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe ff62 	bl	80031f8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	@ 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1f3      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	4b51      	ldr	r3, [pc, #324]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0xe8>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d063      	beq.n	8004426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800435e:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436a:	4b47      	ldr	r3, [pc, #284]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004376:	4b44      	ldr	r3, [pc, #272]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCC_OscConfig+0x152>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e1c7      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4937      	ldr	r1, [pc, #220]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	e03a      	b.n	8004426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCC_OscConfig+0x244>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fe ff1b 	bl	80031f8 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fe ff17 	bl	80031f8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1a8      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4925      	ldr	r1, [pc, #148]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_RCC_OscConfig+0x244>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fe fefa 	bl	80031f8 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fe fef6 	bl	80031f8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e187      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d036      	beq.n	80044a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443a:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <HAL_RCC_OscConfig+0x248>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fe feda 	bl	80031f8 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004448:	f7fe fed6 	bl	80031f8 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e167      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x200>
 8004466:	e01b      	b.n	80044a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004468:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_RCC_OscConfig+0x248>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446e:	f7fe fec3 	bl	80031f8 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	e00e      	b.n	8004494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fe febf 	bl	80031f8 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d907      	bls.n	8004494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e150      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
 8004488:	40023800 	.word	0x40023800
 800448c:	42470000 	.word	0x42470000
 8004490:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b88      	ldr	r3, [pc, #544]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ea      	bne.n	8004476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8097 	beq.w	80045dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b81      	ldr	r3, [pc, #516]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	4a7c      	ldr	r2, [pc, #496]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ce:	4b7a      	ldr	r3, [pc, #488]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b77      	ldr	r3, [pc, #476]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ea:	4b74      	ldr	r3, [pc, #464]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a73      	ldr	r2, [pc, #460]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7fe fe7f 	bl	80031f8 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fe fe7b 	bl	80031f8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e10c      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x2ea>
 8004524:	4b64      	ldr	r3, [pc, #400]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004528:	4a63      	ldr	r2, [pc, #396]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004530:	e01c      	b.n	800456c <HAL_RCC_OscConfig+0x324>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x30c>
 800453a:	4b5f      	ldr	r3, [pc, #380]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a5e      	ldr	r2, [pc, #376]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	6713      	str	r3, [r2, #112]	@ 0x70
 8004546:	4b5c      	ldr	r3, [pc, #368]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a5b      	ldr	r2, [pc, #364]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0x324>
 8004554:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	4a57      	ldr	r2, [pc, #348]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004560:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a54      	ldr	r2, [pc, #336]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 0304 	bic.w	r3, r3, #4
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fe fe40 	bl	80031f8 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fe fe3c 	bl	80031f8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0cb      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004592:	4b49      	ldr	r3, [pc, #292]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ee      	beq.n	800457c <HAL_RCC_OscConfig+0x334>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fe fe2a 	bl	80031f8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fe fe26 	bl	80031f8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0b5      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045be:	4b3e      	ldr	r3, [pc, #248]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ee      	bne.n	80045a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d0:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	4a38      	ldr	r2, [pc, #224]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80a1 	beq.w	8004728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e6:	4b34      	ldr	r3, [pc, #208]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d05c      	beq.n	80046ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d141      	bne.n	800467e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe fdfa 	bl	80031f8 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fe fdf6 	bl	80031f8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e087      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	019b      	lsls	r3, r3, #6
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	491b      	ldr	r1, [pc, #108]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fe fdcf 	bl	80031f8 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465e:	f7fe fdcb 	bl	80031f8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e05c      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004670:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x416>
 800467c:	e054      	b.n	8004728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fe fdb8 	bl	80031f8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7fe fdb4 	bl	80031f8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e045      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x444>
 80046aa:	e03d      	b.n	8004728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e038      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40007000 	.word	0x40007000
 80046c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x4ec>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d028      	beq.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d121      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d11a      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d111      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	3b01      	subs	r3, #1
 800470e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0cc      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b68      	ldr	r3, [pc, #416]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d90c      	bls.n	8004774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b65      	ldr	r3, [pc, #404]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a58      	ldr	r2, [pc, #352]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d044      	beq.n	8004858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d119      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	4b3f      	ldr	r3, [pc, #252]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e06f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004806:	4b3b      	ldr	r3, [pc, #236]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e067      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b37      	ldr	r3, [pc, #220]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4934      	ldr	r1, [pc, #208]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004828:	f7fe fce6 	bl	80031f8 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	e00a      	b.n	8004846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004830:	f7fe fce2 	bl	80031f8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e04f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 020c 	and.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d1eb      	bne.n	8004830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d20c      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	@ (80048fc <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_ClockConfig+0x1c8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fc46 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00
 80048f4:	40023800 	.word	0x40023800
 80048f8:	0800b334 	.word	0x0800b334
 80048fc:	20000000 	.word	0x20000000
 8004900:	200000e0 	.word	0x200000e0

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b094      	sub	sp, #80	@ 0x50
 800490a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491c:	4b79      	ldr	r3, [pc, #484]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d00d      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x40>
 8004928:	2b08      	cmp	r3, #8
 800492a:	f200 80e1 	bhi.w	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x34>
 8004932:	2b04      	cmp	r3, #4
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x3a>
 8004936:	e0db      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b73      	ldr	r3, [pc, #460]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800493c:	e0db      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493e:	4b73      	ldr	r3, [pc, #460]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8004940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004942:	e0d8      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004944:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800494e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d063      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	2200      	movs	r2, #0
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004964:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	2300      	movs	r3, #0
 8004970:	637b      	str	r3, [r7, #52]	@ 0x34
 8004972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4621      	mov	r1, r4
 8004990:	1a51      	subs	r1, r2, r1
 8004992:	6139      	str	r1, [r7, #16]
 8004994:	4629      	mov	r1, r5
 8004996:	eb63 0301 	sbc.w	r3, r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	018b      	lsls	r3, r1, #6
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b2:	4651      	mov	r1, sl
 80049b4:	018a      	lsls	r2, r1, #6
 80049b6:	4651      	mov	r1, sl
 80049b8:	ebb2 0801 	subs.w	r8, r2, r1
 80049bc:	4659      	mov	r1, fp
 80049be:	eb63 0901 	sbc.w	r9, r3, r1
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d6:	4690      	mov	r8, r2
 80049d8:	4699      	mov	r9, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	eb18 0303 	adds.w	r3, r8, r3
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	462b      	mov	r3, r5
 80049e4:	eb49 0303 	adc.w	r3, r9, r3
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049f6:	4629      	mov	r1, r5
 80049f8:	024b      	lsls	r3, r1, #9
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a00:	4621      	mov	r1, r4
 8004a02:	024a      	lsls	r2, r1, #9
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a14:	f7fc f940 	bl	8000c98 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e058      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0159      	lsls	r1, r3, #5
 8004a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4e:	0150      	lsls	r0, r2, #5
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4641      	mov	r1, r8
 8004a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a74:	ebb2 040a 	subs.w	r4, r2, sl
 8004a78:	eb63 050b 	sbc.w	r5, r3, fp
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	00eb      	lsls	r3, r5, #3
 8004a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8a:	00e2      	lsls	r2, r4, #3
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	461d      	mov	r5, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	18e3      	adds	r3, r4, r3
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	464b      	mov	r3, r9
 8004a98:	eb45 0303 	adc.w	r3, r5, r3
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	028b      	lsls	r3, r1, #10
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	028a      	lsls	r2, r1, #10
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	61fa      	str	r2, [r7, #28]
 8004ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac8:	f7fc f8e6 	bl	8000c98 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ae4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aee:	e002      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3750      	adds	r7, #80	@ 0x50
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	007a1200 	.word	0x007a1200

08004b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000000 	.word	0x20000000

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	0800b344 	.word	0x0800b344

08004b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b54:	f7ff ffdc 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0b5b      	lsrs	r3, r3, #13
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	@ (8004b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0800b344 	.word	0x0800b344

08004b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e041      	b.n	8004c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fee2 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 fca0 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e044      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5a:	d013      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xb4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d111      	bne.n	8004ca8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d010      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	e007      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40014000 	.word	0x40014000

08004cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e041      	b.n	8004d72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f839 	bl	8004d7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fbee 	bl	80054fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x24>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e022      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d109      	bne.n	8004dce <HAL_TIM_PWM_Start+0x3e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	2300      	moveq	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	e015      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d109      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x58>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_PWM_Start+0x6a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e068      	b.n	8004ed4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x82>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x92>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xa2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fe06 	bl	8005a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a23      	ldr	r2, [pc, #140]	@ (8004edc <HAL_TIM_PWM_Start+0x14c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <HAL_TIM_PWM_Start+0x14c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e74:	d013      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <HAL_TIM_PWM_Start+0x150>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <HAL_TIM_PWM_Start+0x154>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <HAL_TIM_PWM_Start+0x158>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIM_PWM_Start+0x10e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <HAL_TIM_PWM_Start+0x15c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d111      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b06      	cmp	r3, #6
 8004eae:	d010      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	e007      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40014000 	.word	0x40014000

08004ef0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fda6 	bl	8005a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <HAL_TIM_PWM_Stop+0xc4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d117      	bne.n	8004f42 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_TIM_PWM_Stop+0x52>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <HAL_TIM_PWM_Stop+0x52>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10f      	bne.n	8004f72 <HAL_TIM_PWM_Stop+0x82>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_PWM_Stop+0x82>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Stop+0x92>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f80:	e013      	b.n	8004faa <HAL_TIM_PWM_Stop+0xba>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d104      	bne.n	8004f92 <HAL_TIM_PWM_Stop+0xa2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f90:	e00b      	b.n	8004faa <HAL_TIM_PWM_Stop+0xba>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d104      	bne.n	8004fa2 <HAL_TIM_PWM_Stop+0xb2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa0:	e003      	b.n	8004faa <HAL_TIM_PWM_Stop+0xba>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40010000 	.word	0x40010000

08004fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d020      	beq.n	800501c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0202 	mvn.w	r2, #2
 8004fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa5b 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa4d 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fa5e 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d020      	beq.n	8005068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01b      	beq.n	8005068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0204 	mvn.w	r2, #4
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa35 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa27 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fa38 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01b      	beq.n	80050b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0208 	mvn.w	r2, #8
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2204      	movs	r2, #4
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa0f 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa01 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa12 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9e9 	bl	80054be <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9db 	bl	80054aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9ec 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0201 	mvn.w	r2, #1
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fd fa02 	bl	8002528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fd76 	bl	8005c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f9bd 	bl	80054e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00c      	beq.n	8005190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0220 	mvn.w	r2, #32
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fd48 	bl	8005c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0ae      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	f200 809f 	bhi.w	8005304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005305 	.word	0x08005305
 80051d4:	08005305 	.word	0x08005305
 80051d8:	08005305 	.word	0x08005305
 80051dc:	08005241 	.word	0x08005241
 80051e0:	08005305 	.word	0x08005305
 80051e4:	08005305 	.word	0x08005305
 80051e8:	08005305 	.word	0x08005305
 80051ec:	08005283 	.word	0x08005283
 80051f0:	08005305 	.word	0x08005305
 80051f4:	08005305 	.word	0x08005305
 80051f8:	08005305 	.word	0x08005305
 80051fc:	080052c3 	.word	0x080052c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 f9fe 	bl	8005608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0208 	orr.w	r2, r2, #8
 800521a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6999      	ldr	r1, [r3, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	619a      	str	r2, [r3, #24]
      break;
 800523e:	e064      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fa44 	bl	80056d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6999      	ldr	r1, [r3, #24]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	619a      	str	r2, [r3, #24]
      break;
 8005280:	e043      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fa8f 	bl	80057ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0208 	orr.w	r2, r2, #8
 800529c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0204 	bic.w	r2, r2, #4
 80052ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69d9      	ldr	r1, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	61da      	str	r2, [r3, #28]
      break;
 80052c0:	e023      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fad9 	bl	8005880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69d9      	ldr	r1, [r3, #28]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	021a      	lsls	r2, r3, #8
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	61da      	str	r2, [r3, #28]
      break;
 8005302:	e002      	b.n	800530a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	75fb      	strb	r3, [r7, #23]
      break;
 8005308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0x1c>
 8005334:	2302      	movs	r3, #2
 8005336:	e0b4      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x186>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800535e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005370:	d03e      	beq.n	80053f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005376:	f200 8087 	bhi.w	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537e:	f000 8086 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x172>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	d87f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b70      	cmp	r3, #112	@ 0x70
 800538a:	d01a      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xa6>
 800538c:	2b70      	cmp	r3, #112	@ 0x70
 800538e:	d87b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b60      	cmp	r3, #96	@ 0x60
 8005392:	d050      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x11a>
 8005394:	2b60      	cmp	r3, #96	@ 0x60
 8005396:	d877      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 8005398:	2b50      	cmp	r3, #80	@ 0x50
 800539a:	d03c      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0xfa>
 800539c:	2b50      	cmp	r3, #80	@ 0x50
 800539e:	d873      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053a0:	2b40      	cmp	r3, #64	@ 0x40
 80053a2:	d058      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x13a>
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d86f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053a8:	2b30      	cmp	r3, #48	@ 0x30
 80053aa:	d064      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053ac:	2b30      	cmp	r3, #48	@ 0x30
 80053ae:	d86b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d060      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d867      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d05a      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15a>
 80053c0:	e062      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	f000 fb1f 	bl	8005a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	609a      	str	r2, [r3, #8]
      break;
 80053ee:	e04f      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	f000 fb08 	bl	8005a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005412:	609a      	str	r2, [r3, #8]
      break;
 8005414:	e03c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fa7c 	bl	8005920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2150      	movs	r1, #80	@ 0x50
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fad5 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005434:	e02c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005442:	461a      	mov	r2, r3
 8005444:	f000 fa9b 	bl	800597e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2160      	movs	r1, #96	@ 0x60
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fac5 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005454:	e01c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005462:	461a      	mov	r2, r3
 8005464:	f000 fa5c 	bl	8005920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2140      	movs	r1, #64	@ 0x40
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fab5 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005474:	e00c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 faac 	bl	80059de <TIM_ITRx_SetConfig>
      break;
 8005486:	e003      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e000      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a37      	ldr	r2, [pc, #220]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <TIM_Base_SetConfig+0xf4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a33      	ldr	r2, [pc, #204]	@ (80055f4 <TIM_Base_SetConfig+0xf8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x38>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a32      	ldr	r2, [pc, #200]	@ (80055f8 <TIM_Base_SetConfig+0xfc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d017      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a25      	ldr	r2, [pc, #148]	@ (80055f0 <TIM_Base_SetConfig+0xf4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <TIM_Base_SetConfig+0xf8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <TIM_Base_SetConfig+0xfc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <TIM_Base_SetConfig+0x100>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <TIM_Base_SetConfig+0x104>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_Base_SetConfig+0x8a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <TIM_Base_SetConfig+0x108>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d108      	bne.n	8005598 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a0c      	ldr	r2, [pc, #48]	@ (80055ec <TIM_Base_SetConfig+0xf0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d103      	bne.n	80055c6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40014000 	.word	0x40014000
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0201 	bic.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f023 0302 	bic.w	r3, r3, #2
 8005650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <TIM_OC1_SetConfig+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10c      	bne.n	800567e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0308 	bic.w	r3, r3, #8
 800566a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a13      	ldr	r2, [pc, #76]	@ (80056d0 <TIM_OC1_SetConfig+0xc8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40010000 	.word	0x40010000

080056d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0210 	bic.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <TIM_OC2_SetConfig+0xd4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10d      	bne.n	8005750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800574e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <TIM_OC2_SetConfig+0xd4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d113      	bne.n	8005780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800575e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000

080057ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <TIM_OC3_SetConfig+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d10d      	bne.n	8005826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <TIM_OC3_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d113      	bne.n	8005856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	621a      	str	r2, [r3, #32]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	40010000 	.word	0x40010000

08005880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a10      	ldr	r2, [pc, #64]	@ (800591c <TIM_OC4_SetConfig+0x9c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d109      	bne.n	80058f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	019b      	lsls	r3, r3, #6
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40010000 	.word	0x40010000

08005920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 030a 	bic.w	r3, r3, #10
 800595c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800597e:	b480      	push	{r7}
 8005980:	b087      	sub	sp, #28
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	031b      	lsls	r3, r3, #12
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f043 0307 	orr.w	r3, r3, #7
 8005a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	609a      	str	r2, [r3, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2201      	movs	r2, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e050      	b.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b04:	d013      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a13      	ldr	r2, [pc, #76]	@ (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40014000 	.word	0x40014000

08005b7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e03d      	b.n	8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e042      	b.n	8005ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb ff6e 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	@ 0x24
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fcef 	bl	8006670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d112      	bne.n	8005d28 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_UART_Receive_IT+0x26>
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e00b      	b.n	8005d2a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d18:	88fb      	ldrh	r3, [r7, #6]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fad2 	bl	80062c8 <UART_Start_Receive_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b0ba      	sub	sp, #232	@ 0xe8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10f      	bne.n	8005d9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_UART_IRQHandler+0x66>
 8005d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbae 	bl	80064f4 <UART_Receive_IT>
      return;
 8005d98:	e273      	b.n	8006282 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80de 	beq.w	8005f60 <HAL_UART_IRQHandler+0x22c>
 8005da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d106      	bne.n	8005dbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005db4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80d1 	beq.w	8005f60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_UART_IRQHandler+0xae>
 8005dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_UART_IRQHandler+0xd2>
 8005dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfe:	f043 0202 	orr.w	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_UART_IRQHandler+0xf6>
 8005e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f043 0204 	orr.w	r2, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d011      	beq.n	8005e5a <HAL_UART_IRQHandler+0x126>
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 820a 	beq.w	8006278 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_UART_IRQHandler+0x14e>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb39 	bl	80064f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	bf0c      	ite	eq
 8005e90:	2301      	moveq	r3, #1
 8005e92:	2300      	movne	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <HAL_UART_IRQHandler+0x17a>
 8005ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d04f      	beq.n	8005f4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa44 	bl	800633c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	d141      	bne.n	8005f46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005eee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005efa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1d9      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8006144 <HAL_UART_IRQHandler+0x410>)
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd fb19 	bl	800355a <HAL_DMA_Abort_IT>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d016      	beq.n	8005f5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00e      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9ac 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e00a      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9a8 	bl	800629c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	e006      	b.n	8005f5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9a4 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f5a:	e18d      	b.n	8006278 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	bf00      	nop
    return;
 8005f5e:	e18b      	b.n	8006278 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 8167 	bne.w	8006238 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8160 	beq.w	8006238 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8159 	beq.w	8006238 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b40      	cmp	r3, #64	@ 0x40
 8005fa8:	f040 80ce 	bne.w	8006148 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80a9 	beq.w	8006114 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	f080 80a2 	bcs.w	8006114 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe2:	f000 8088 	beq.w	80060f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006012:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800601e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800602a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d9      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3314      	adds	r3, #20
 8006052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006056:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800605a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800605e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006068:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e1      	bne.n	8006032 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800607e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006092:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006094:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006098:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c6:	f023 0310 	bic.w	r3, r3, #16
 80060ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	330c      	adds	r3, #12
 80060d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e3      	bne.n	80060b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fd f9c2 	bl	800347a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	b29b      	uxth	r3, r3
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8cf 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006112:	e0b3      	b.n	800627c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006118:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800611c:	429a      	cmp	r2, r3
 800611e:	f040 80ad 	bne.w	800627c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612c:	f040 80a6 	bne.w	800627c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f8b7 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
      return;
 8006142:	e09b      	b.n	800627c <HAL_UART_IRQHandler+0x548>
 8006144:	08006403 	.word	0x08006403
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006150:	b29b      	uxth	r3, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 808e 	beq.w	8006280 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8089 	beq.w	8006280 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006184:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006192:	647a      	str	r2, [r7, #68]	@ 0x44
 8006194:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006198:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e3      	bne.n	800616e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3314      	adds	r3, #20
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	623b      	str	r3, [r7, #32]
   return(result);
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3314      	adds	r3, #20
 80061c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80061cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e3      	bne.n	80061a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330c      	adds	r3, #12
 80061f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f023 0310 	bic.w	r3, r3, #16
 8006202:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006210:	61fa      	str	r2, [r7, #28]
 8006212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	69b9      	ldr	r1, [r7, #24]
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	617b      	str	r3, [r7, #20]
   return(result);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e3      	bne.n	80061ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800622a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f83d 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006236:	e023      	b.n	8006280 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d009      	beq.n	8006258 <HAL_UART_IRQHandler+0x524>
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8e7 	bl	8006424 <UART_Transmit_IT>
    return;
 8006256:	e014      	b.n	8006282 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00e      	beq.n	8006282 <HAL_UART_IRQHandler+0x54e>
 8006264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f927 	bl	80064c4 <UART_EndTransmit_IT>
    return;
 8006276:	e004      	b.n	8006282 <HAL_UART_IRQHandler+0x54e>
    return;
 8006278:	bf00      	nop
 800627a:	e002      	b.n	8006282 <HAL_UART_IRQHandler+0x54e>
      return;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_UART_IRQHandler+0x54e>
      return;
 8006280:	bf00      	nop
  }
}
 8006282:	37e8      	adds	r7, #232	@ 0xe8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	88fa      	ldrh	r2, [r7, #6]
 80062e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2222      	movs	r2, #34	@ 0x22
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800630c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0220 	orr.w	r2, r2, #32
 800632c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b095      	sub	sp, #84	@ 0x54
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800635a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006364:	643a      	str	r2, [r7, #64]	@ 0x40
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800636a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	61fb      	str	r3, [r7, #28]
   return(result);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006398:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800639a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800639e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d119      	bne.n	80063e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f023 0310 	bic.w	r3, r3, #16
 80063ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063d4:	61ba      	str	r2, [r7, #24]
 80063d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6979      	ldr	r1, [r7, #20]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	613b      	str	r3, [r7, #16]
   return(result);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e5      	bne.n	80063b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063f6:	bf00      	nop
 80063f8:	3754      	adds	r7, #84	@ 0x54
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff ff40 	bl	800629c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b21      	cmp	r3, #33	@ 0x21
 8006436:	d13e      	bne.n	80064b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006440:	d114      	bne.n	800646c <UART_Transmit_IT+0x48>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d110      	bne.n	800646c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	1c9a      	adds	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]
 800646a:	e008      	b.n	800647e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6211      	str	r1, [r2, #32]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b01      	subs	r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4619      	mov	r1, r3
 800648c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fecf 	bl	8006288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	@ 0x30
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b22      	cmp	r3, #34	@ 0x22
 800650e:	f040 80aa 	bne.w	8006666 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651a:	d115      	bne.n	8006548 <UART_Receive_IT+0x54>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d111      	bne.n	8006548 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006536:	b29a      	uxth	r2, r3
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	629a      	str	r2, [r3, #40]	@ 0x28
 8006546:	e024      	b.n	8006592 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006556:	d007      	beq.n	8006568 <UART_Receive_IT+0x74>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <UART_Receive_IT+0x82>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d15d      	bne.n	8006662 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0220 	bic.w	r2, r2, #32
 80065b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d135      	bne.n	8006658 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	613b      	str	r3, [r7, #16]
   return(result);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	330c      	adds	r3, #12
 8006610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006612:	623a      	str	r2, [r7, #32]
 8006614:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69f9      	ldr	r1, [r7, #28]
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e5      	bne.n	80065f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d10a      	bne.n	800664a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fe2d 	bl	80062b0 <HAL_UARTEx_RxEventCallback>
 8006656:	e002      	b.n	800665e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fb ff79 	bl	8002550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e002      	b.n	8006668 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e000      	b.n	8006668 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3730      	adds	r7, #48	@ 0x30
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006674:	b0c0      	sub	sp, #256	@ 0x100
 8006676:	af00      	add	r7, sp, #0
 8006678:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	ea40 0301 	orr.w	r3, r0, r1
 8006698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066c8:	f021 010c 	bic.w	r1, r1, #12
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066d6:	430b      	orrs	r3, r1
 80066d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ea:	6999      	ldr	r1, [r3, #24]
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	ea40 0301 	orr.w	r3, r0, r1
 80066f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8f      	ldr	r3, [pc, #572]	@ (800693c <UART_SetConfig+0x2cc>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d005      	beq.n	8006710 <UART_SetConfig+0xa0>
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	4b8d      	ldr	r3, [pc, #564]	@ (8006940 <UART_SetConfig+0x2d0>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d104      	bne.n	800671a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006710:	f7fe fa1e 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8006714:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006718:	e003      	b.n	8006722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800671a:	f7fe fa05 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 800671e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672c:	f040 810c 	bne.w	8006948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006734:	2200      	movs	r2, #0
 8006736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800673a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800673e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	1891      	adds	r1, r2, r2
 8006748:	65b9      	str	r1, [r7, #88]	@ 0x58
 800674a:	415b      	adcs	r3, r3
 800674c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006752:	4621      	mov	r1, r4
 8006754:	eb12 0801 	adds.w	r8, r2, r1
 8006758:	4629      	mov	r1, r5
 800675a:	eb43 0901 	adc.w	r9, r3, r1
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800676e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006772:	4690      	mov	r8, r2
 8006774:	4699      	mov	r9, r3
 8006776:	4623      	mov	r3, r4
 8006778:	eb18 0303 	adds.w	r3, r8, r3
 800677c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006780:	462b      	mov	r3, r5
 8006782:	eb49 0303 	adc.w	r3, r9, r3
 8006786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800678a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006796:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800679a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800679e:	460b      	mov	r3, r1
 80067a0:	18db      	adds	r3, r3, r3
 80067a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a4:	4613      	mov	r3, r2
 80067a6:	eb42 0303 	adc.w	r3, r2, r3
 80067aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80067ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067b4:	f7fa fa70 	bl	8000c98 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4b61      	ldr	r3, [pc, #388]	@ (8006944 <UART_SetConfig+0x2d4>)
 80067be:	fba3 2302 	umull	r2, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	011c      	lsls	r4, r3, #4
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	1891      	adds	r1, r2, r2
 80067de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067e0:	415b      	adcs	r3, r3
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067e8:	4641      	mov	r1, r8
 80067ea:	eb12 0a01 	adds.w	sl, r2, r1
 80067ee:	4649      	mov	r1, r9
 80067f0:	eb43 0b01 	adc.w	fp, r3, r1
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006808:	4692      	mov	sl, r2
 800680a:	469b      	mov	fp, r3
 800680c:	4643      	mov	r3, r8
 800680e:	eb1a 0303 	adds.w	r3, sl, r3
 8006812:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006816:	464b      	mov	r3, r9
 8006818:	eb4b 0303 	adc.w	r3, fp, r3
 800681c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800682c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006834:	460b      	mov	r3, r1
 8006836:	18db      	adds	r3, r3, r3
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
 800683a:	4613      	mov	r3, r2
 800683c:	eb42 0303 	adc.w	r3, r2, r3
 8006840:	647b      	str	r3, [r7, #68]	@ 0x44
 8006842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800684a:	f7fa fa25 	bl	8000c98 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4611      	mov	r1, r2
 8006854:	4b3b      	ldr	r3, [pc, #236]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006856:	fba3 2301 	umull	r2, r3, r3, r1
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	@ 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1acb      	subs	r3, r1, r3
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800686a:	4b36      	ldr	r3, [pc, #216]	@ (8006944 <UART_SetConfig+0x2d4>)
 800686c:	fba3 2302 	umull	r2, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006878:	441c      	add	r4, r3
 800687a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687e:	2200      	movs	r2, #0
 8006880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006884:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006894:	415b      	adcs	r3, r3
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068d0:	464b      	mov	r3, r9
 80068d2:	460a      	mov	r2, r1
 80068d4:	eb42 0303 	adc.w	r3, r2, r3
 80068d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068f0:	460b      	mov	r3, r1
 80068f2:	18db      	adds	r3, r3, r3
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f6:	4613      	mov	r3, r2
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006906:	f7fa f9c7 	bl	8000c98 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006910:	fba3 1302 	umull	r1, r3, r3, r2
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	2164      	movs	r1, #100	@ 0x64
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	3332      	adds	r3, #50	@ 0x32
 8006922:	4a08      	ldr	r2, [pc, #32]	@ (8006944 <UART_SetConfig+0x2d4>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f003 0207 	and.w	r2, r3, #7
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4422      	add	r2, r4
 8006936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006938:	e106      	b.n	8006b48 <UART_SetConfig+0x4d8>
 800693a:	bf00      	nop
 800693c:	40011000 	.word	0x40011000
 8006940:	40011400 	.word	0x40011400
 8006944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800694c:	2200      	movs	r2, #0
 800694e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006952:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800695a:	4642      	mov	r2, r8
 800695c:	464b      	mov	r3, r9
 800695e:	1891      	adds	r1, r2, r2
 8006960:	6239      	str	r1, [r7, #32]
 8006962:	415b      	adcs	r3, r3
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
 8006966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800696a:	4641      	mov	r1, r8
 800696c:	1854      	adds	r4, r2, r1
 800696e:	4649      	mov	r1, r9
 8006970:	eb43 0501 	adc.w	r5, r3, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	00eb      	lsls	r3, r5, #3
 800697e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006982:	00e2      	lsls	r2, r4, #3
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	4643      	mov	r3, r8
 800698a:	18e3      	adds	r3, r4, r3
 800698c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006990:	464b      	mov	r3, r9
 8006992:	eb45 0303 	adc.w	r3, r5, r3
 8006996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069b6:	4629      	mov	r1, r5
 80069b8:	008b      	lsls	r3, r1, #2
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069c0:	4621      	mov	r1, r4
 80069c2:	008a      	lsls	r2, r1, #2
 80069c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069c8:	f7fa f966 	bl	8000c98 <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4b60      	ldr	r3, [pc, #384]	@ (8006b54 <UART_SetConfig+0x4e4>)
 80069d2:	fba3 2302 	umull	r2, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	011c      	lsls	r4, r3, #4
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	61b9      	str	r1, [r7, #24]
 80069f4:	415b      	adcs	r3, r3
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6139      	str	r1, [r7, #16]
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a54:	4649      	mov	r1, r9
 8006a56:	008b      	lsls	r3, r1, #2
 8006a58:	4641      	mov	r1, r8
 8006a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a5e:	4641      	mov	r1, r8
 8006a60:	008a      	lsls	r2, r1, #2
 8006a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a66:	f7fa f917 	bl	8000c98 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4b38      	ldr	r3, [pc, #224]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006a72:	fba3 2301 	umull	r2, r3, r3, r1
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2264      	movs	r2, #100	@ 0x64
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	1acb      	subs	r3, r1, r3
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	3332      	adds	r3, #50	@ 0x32
 8006a84:	4a33      	ldr	r2, [pc, #204]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a90:	441c      	add	r4, r3
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	1891      	adds	r1, r2, r2
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	415b      	adcs	r3, r3
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	1851      	adds	r1, r2, r1
 8006ab4:	6039      	str	r1, [r7, #0]
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	414b      	adcs	r3, r1
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ac8:	4659      	mov	r1, fp
 8006aca:	00cb      	lsls	r3, r1, #3
 8006acc:	4651      	mov	r1, sl
 8006ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	00ca      	lsls	r2, r1, #3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	4642      	mov	r2, r8
 8006ade:	189b      	adds	r3, r3, r2
 8006ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	460a      	mov	r2, r1
 8006ae6:	eb42 0303 	adc.w	r3, r2, r3
 8006aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b04:	4649      	mov	r1, r9
 8006b06:	008b      	lsls	r3, r1, #2
 8006b08:	4641      	mov	r1, r8
 8006b0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0e:	4641      	mov	r1, r8
 8006b10:	008a      	lsls	r2, r1, #2
 8006b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b16:	f7fa f8bf 	bl	8000c98 <__aeabi_uldivmod>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006b20:	fba3 1302 	umull	r1, r3, r3, r2
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	2164      	movs	r1, #100	@ 0x64
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	3332      	adds	r3, #50	@ 0x32
 8006b32:	4a08      	ldr	r2, [pc, #32]	@ (8006b54 <UART_SetConfig+0x4e4>)
 8006b34:	fba2 2303 	umull	r2, r3, r2, r3
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f003 020f 	and.w	r2, r3, #15
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4422      	add	r2, r4
 8006b46:	609a      	str	r2, [r3, #8]
}
 8006b48:	bf00      	nop
 8006b4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b54:	51eb851f 	.word	0x51eb851f

08006b58 <__cvt>:
 8006b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	ec57 6b10 	vmov	r6, r7, d0
 8006b60:	2f00      	cmp	r7, #0
 8006b62:	460c      	mov	r4, r1
 8006b64:	4619      	mov	r1, r3
 8006b66:	463b      	mov	r3, r7
 8006b68:	bfbb      	ittet	lt
 8006b6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b6e:	461f      	movlt	r7, r3
 8006b70:	2300      	movge	r3, #0
 8006b72:	232d      	movlt	r3, #45	@ 0x2d
 8006b74:	700b      	strb	r3, [r1, #0]
 8006b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b7c:	4691      	mov	r9, r2
 8006b7e:	f023 0820 	bic.w	r8, r3, #32
 8006b82:	bfbc      	itt	lt
 8006b84:	4632      	movlt	r2, r6
 8006b86:	4616      	movlt	r6, r2
 8006b88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b8c:	d005      	beq.n	8006b9a <__cvt+0x42>
 8006b8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b92:	d100      	bne.n	8006b96 <__cvt+0x3e>
 8006b94:	3401      	adds	r4, #1
 8006b96:	2102      	movs	r1, #2
 8006b98:	e000      	b.n	8006b9c <__cvt+0x44>
 8006b9a:	2103      	movs	r1, #3
 8006b9c:	ab03      	add	r3, sp, #12
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	ab02      	add	r3, sp, #8
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	ec47 6b10 	vmov	d0, r6, r7
 8006ba8:	4653      	mov	r3, sl
 8006baa:	4622      	mov	r2, r4
 8006bac:	f001 f87c 	bl	8007ca8 <_dtoa_r>
 8006bb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	d119      	bne.n	8006bec <__cvt+0x94>
 8006bb8:	f019 0f01 	tst.w	r9, #1
 8006bbc:	d00e      	beq.n	8006bdc <__cvt+0x84>
 8006bbe:	eb00 0904 	add.w	r9, r0, r4
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bce:	b108      	cbz	r0, 8006bd4 <__cvt+0x7c>
 8006bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bd4:	2230      	movs	r2, #48	@ 0x30
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	454b      	cmp	r3, r9
 8006bda:	d31e      	bcc.n	8006c1a <__cvt+0xc2>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be0:	1b5b      	subs	r3, r3, r5
 8006be2:	4628      	mov	r0, r5
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	b004      	add	sp, #16
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bf0:	eb00 0904 	add.w	r9, r0, r4
 8006bf4:	d1e5      	bne.n	8006bc2 <__cvt+0x6a>
 8006bf6:	7803      	ldrb	r3, [r0, #0]
 8006bf8:	2b30      	cmp	r3, #48	@ 0x30
 8006bfa:	d10a      	bne.n	8006c12 <__cvt+0xba>
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 ff68 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c08:	b918      	cbnz	r0, 8006c12 <__cvt+0xba>
 8006c0a:	f1c4 0401 	rsb	r4, r4, #1
 8006c0e:	f8ca 4000 	str.w	r4, [sl]
 8006c12:	f8da 3000 	ldr.w	r3, [sl]
 8006c16:	4499      	add	r9, r3
 8006c18:	e7d3      	b.n	8006bc2 <__cvt+0x6a>
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	9103      	str	r1, [sp, #12]
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e7d9      	b.n	8006bd6 <__cvt+0x7e>

08006c22 <__exponent>:
 8006c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c24:	2900      	cmp	r1, #0
 8006c26:	bfba      	itte	lt
 8006c28:	4249      	neglt	r1, r1
 8006c2a:	232d      	movlt	r3, #45	@ 0x2d
 8006c2c:	232b      	movge	r3, #43	@ 0x2b
 8006c2e:	2909      	cmp	r1, #9
 8006c30:	7002      	strb	r2, [r0, #0]
 8006c32:	7043      	strb	r3, [r0, #1]
 8006c34:	dd29      	ble.n	8006c8a <__exponent+0x68>
 8006c36:	f10d 0307 	add.w	r3, sp, #7
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	270a      	movs	r7, #10
 8006c3e:	461a      	mov	r2, r3
 8006c40:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c44:	fb07 1416 	mls	r4, r7, r6, r1
 8006c48:	3430      	adds	r4, #48	@ 0x30
 8006c4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c4e:	460c      	mov	r4, r1
 8006c50:	2c63      	cmp	r4, #99	@ 0x63
 8006c52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c56:	4631      	mov	r1, r6
 8006c58:	dcf1      	bgt.n	8006c3e <__exponent+0x1c>
 8006c5a:	3130      	adds	r1, #48	@ 0x30
 8006c5c:	1e94      	subs	r4, r2, #2
 8006c5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c62:	1c41      	adds	r1, r0, #1
 8006c64:	4623      	mov	r3, r4
 8006c66:	42ab      	cmp	r3, r5
 8006c68:	d30a      	bcc.n	8006c80 <__exponent+0x5e>
 8006c6a:	f10d 0309 	add.w	r3, sp, #9
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	42ac      	cmp	r4, r5
 8006c72:	bf88      	it	hi
 8006c74:	2300      	movhi	r3, #0
 8006c76:	3302      	adds	r3, #2
 8006c78:	4403      	add	r3, r0
 8006c7a:	1a18      	subs	r0, r3, r0
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c88:	e7ed      	b.n	8006c66 <__exponent+0x44>
 8006c8a:	2330      	movs	r3, #48	@ 0x30
 8006c8c:	3130      	adds	r1, #48	@ 0x30
 8006c8e:	7083      	strb	r3, [r0, #2]
 8006c90:	70c1      	strb	r1, [r0, #3]
 8006c92:	1d03      	adds	r3, r0, #4
 8006c94:	e7f1      	b.n	8006c7a <__exponent+0x58>
	...

08006c98 <_printf_float>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b08d      	sub	sp, #52	@ 0x34
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f000 fee9 	bl	8007a80 <_localeconv_r>
 8006cae:	6803      	ldr	r3, [r0, #0]
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7f9 fae4 	bl	8000280 <strlen>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc0:	9005      	str	r0, [sp, #20]
 8006cc2:	3307      	adds	r3, #7
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	f103 0208 	add.w	r2, r3, #8
 8006ccc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cd0:	f8d4 b000 	ldr.w	fp, [r4]
 8006cd4:	f8c8 2000 	str.w	r2, [r8]
 8006cd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ce6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cee:	4b9c      	ldr	r3, [pc, #624]	@ (8006f60 <_printf_float+0x2c8>)
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	f7f9 ff22 	bl	8000b3c <__aeabi_dcmpun>
 8006cf8:	bb70      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cfe:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <_printf_float+0x2c8>)
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	f7f9 fefc 	bl	8000b00 <__aeabi_dcmple>
 8006d08:	bb30      	cbnz	r0, 8006d58 <_printf_float+0xc0>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4649      	mov	r1, r9
 8006d12:	f7f9 feeb 	bl	8000aec <__aeabi_dcmplt>
 8006d16:	b110      	cbz	r0, 8006d1e <_printf_float+0x86>
 8006d18:	232d      	movs	r3, #45	@ 0x2d
 8006d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1e:	4a91      	ldr	r2, [pc, #580]	@ (8006f64 <_printf_float+0x2cc>)
 8006d20:	4b91      	ldr	r3, [pc, #580]	@ (8006f68 <_printf_float+0x2d0>)
 8006d22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d26:	bf8c      	ite	hi
 8006d28:	4690      	movhi	r8, r2
 8006d2a:	4698      	movls	r8, r3
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	f02b 0304 	bic.w	r3, fp, #4
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	f04f 0900 	mov.w	r9, #0
 8006d3a:	9700      	str	r7, [sp, #0]
 8006d3c:	4633      	mov	r3, r6
 8006d3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f9d2 	bl	80070ec <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f040 808d 	bne.w	8006e68 <_printf_float+0x1d0>
 8006d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d52:	b00d      	add	sp, #52	@ 0x34
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 feec 	bl	8000b3c <__aeabi_dcmpun>
 8006d64:	b140      	cbz	r0, 8006d78 <_printf_float+0xe0>
 8006d66:	464b      	mov	r3, r9
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bfbc      	itt	lt
 8006d6c:	232d      	movlt	r3, #45	@ 0x2d
 8006d6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d72:	4a7e      	ldr	r2, [pc, #504]	@ (8006f6c <_printf_float+0x2d4>)
 8006d74:	4b7e      	ldr	r3, [pc, #504]	@ (8006f70 <_printf_float+0x2d8>)
 8006d76:	e7d4      	b.n	8006d22 <_printf_float+0x8a>
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d7e:	9206      	str	r2, [sp, #24]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	d13b      	bne.n	8006dfc <_printf_float+0x164>
 8006d84:	2306      	movs	r3, #6
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d98:	ab09      	add	r3, sp, #36	@ 0x24
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	ec49 8b10 	vmov	d0, r8, r9
 8006da2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006da6:	4628      	mov	r0, r5
 8006da8:	f7ff fed6 	bl	8006b58 <__cvt>
 8006dac:	9b06      	ldr	r3, [sp, #24]
 8006dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006db0:	2b47      	cmp	r3, #71	@ 0x47
 8006db2:	4680      	mov	r8, r0
 8006db4:	d129      	bne.n	8006e0a <_printf_float+0x172>
 8006db6:	1cc8      	adds	r0, r1, #3
 8006db8:	db02      	blt.n	8006dc0 <_printf_float+0x128>
 8006dba:	6863      	ldr	r3, [r4, #4]
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	dd41      	ble.n	8006e44 <_printf_float+0x1ac>
 8006dc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006dc4:	fa5f fa8a 	uxtb.w	sl, sl
 8006dc8:	3901      	subs	r1, #1
 8006dca:	4652      	mov	r2, sl
 8006dcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006dd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dd2:	f7ff ff26 	bl	8006c22 <__exponent>
 8006dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dd8:	1813      	adds	r3, r2, r0
 8006dda:	2a01      	cmp	r2, #1
 8006ddc:	4681      	mov	r9, r0
 8006dde:	6123      	str	r3, [r4, #16]
 8006de0:	dc02      	bgt.n	8006de8 <_printf_float+0x150>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	07d2      	lsls	r2, r2, #31
 8006de6:	d501      	bpl.n	8006dec <_printf_float+0x154>
 8006de8:	3301      	adds	r3, #1
 8006dea:	6123      	str	r3, [r4, #16]
 8006dec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0a2      	beq.n	8006d3a <_printf_float+0xa2>
 8006df4:	232d      	movs	r3, #45	@ 0x2d
 8006df6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfa:	e79e      	b.n	8006d3a <_printf_float+0xa2>
 8006dfc:	9a06      	ldr	r2, [sp, #24]
 8006dfe:	2a47      	cmp	r2, #71	@ 0x47
 8006e00:	d1c2      	bne.n	8006d88 <_printf_float+0xf0>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1c0      	bne.n	8006d88 <_printf_float+0xf0>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e7bd      	b.n	8006d86 <_printf_float+0xee>
 8006e0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e0e:	d9db      	bls.n	8006dc8 <_printf_float+0x130>
 8006e10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e14:	d118      	bne.n	8006e48 <_printf_float+0x1b0>
 8006e16:	2900      	cmp	r1, #0
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	dd0b      	ble.n	8006e34 <_printf_float+0x19c>
 8006e1c:	6121      	str	r1, [r4, #16]
 8006e1e:	b913      	cbnz	r3, 8006e26 <_printf_float+0x18e>
 8006e20:	6822      	ldr	r2, [r4, #0]
 8006e22:	07d0      	lsls	r0, r2, #31
 8006e24:	d502      	bpl.n	8006e2c <_printf_float+0x194>
 8006e26:	3301      	adds	r3, #1
 8006e28:	440b      	add	r3, r1
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e2e:	f04f 0900 	mov.w	r9, #0
 8006e32:	e7db      	b.n	8006dec <_printf_float+0x154>
 8006e34:	b913      	cbnz	r3, 8006e3c <_printf_float+0x1a4>
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	07d2      	lsls	r2, r2, #31
 8006e3a:	d501      	bpl.n	8006e40 <_printf_float+0x1a8>
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	e7f4      	b.n	8006e2a <_printf_float+0x192>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e7f2      	b.n	8006e2a <_printf_float+0x192>
 8006e44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	db05      	blt.n	8006e5a <_printf_float+0x1c2>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	6121      	str	r1, [r4, #16]
 8006e52:	07d8      	lsls	r0, r3, #31
 8006e54:	d5ea      	bpl.n	8006e2c <_printf_float+0x194>
 8006e56:	1c4b      	adds	r3, r1, #1
 8006e58:	e7e7      	b.n	8006e2a <_printf_float+0x192>
 8006e5a:	2900      	cmp	r1, #0
 8006e5c:	bfd4      	ite	le
 8006e5e:	f1c1 0202 	rsble	r2, r1, #2
 8006e62:	2201      	movgt	r2, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	e7e0      	b.n	8006e2a <_printf_float+0x192>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	055a      	lsls	r2, r3, #21
 8006e6c:	d407      	bmi.n	8006e7e <_printf_float+0x1e6>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	4642      	mov	r2, r8
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d12b      	bne.n	8006ed4 <_printf_float+0x23c>
 8006e7c:	e767      	b.n	8006d4e <_printf_float+0xb6>
 8006e7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e82:	f240 80dd 	bls.w	8007040 <_printf_float+0x3a8>
 8006e86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f7f9 fe23 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d033      	beq.n	8006efe <_printf_float+0x266>
 8006e96:	4a37      	ldr	r2, [pc, #220]	@ (8006f74 <_printf_float+0x2dc>)
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f af54 	beq.w	8006d4e <_printf_float+0xb6>
 8006ea6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006eaa:	4543      	cmp	r3, r8
 8006eac:	db02      	blt.n	8006eb4 <_printf_float+0x21c>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	07d8      	lsls	r0, r3, #31
 8006eb2:	d50f      	bpl.n	8006ed4 <_printf_float+0x23c>
 8006eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b8      	blx	r7
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f43f af45 	beq.w	8006d4e <_printf_float+0xb6>
 8006ec4:	f04f 0900 	mov.w	r9, #0
 8006ec8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ecc:	f104 0a1a 	add.w	sl, r4, #26
 8006ed0:	45c8      	cmp	r8, r9
 8006ed2:	dc09      	bgt.n	8006ee8 <_printf_float+0x250>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	079b      	lsls	r3, r3, #30
 8006ed8:	f100 8103 	bmi.w	80070e2 <_printf_float+0x44a>
 8006edc:	68e0      	ldr	r0, [r4, #12]
 8006ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee0:	4298      	cmp	r0, r3
 8006ee2:	bfb8      	it	lt
 8006ee4:	4618      	movlt	r0, r3
 8006ee6:	e734      	b.n	8006d52 <_printf_float+0xba>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4652      	mov	r2, sl
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f af2b 	beq.w	8006d4e <_printf_float+0xb6>
 8006ef8:	f109 0901 	add.w	r9, r9, #1
 8006efc:	e7e8      	b.n	8006ed0 <_printf_float+0x238>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dc39      	bgt.n	8006f78 <_printf_float+0x2e0>
 8006f04:	4a1b      	ldr	r2, [pc, #108]	@ (8006f74 <_printf_float+0x2dc>)
 8006f06:	2301      	movs	r3, #1
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b8      	blx	r7
 8006f0e:	3001      	adds	r0, #1
 8006f10:	f43f af1d 	beq.w	8006d4e <_printf_float+0xb6>
 8006f14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f18:	ea59 0303 	orrs.w	r3, r9, r3
 8006f1c:	d102      	bne.n	8006f24 <_printf_float+0x28c>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	07d9      	lsls	r1, r3, #31
 8006f22:	d5d7      	bpl.n	8006ed4 <_printf_float+0x23c>
 8006f24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f af0d 	beq.w	8006d4e <_printf_float+0xb6>
 8006f34:	f04f 0a00 	mov.w	sl, #0
 8006f38:	f104 0b1a 	add.w	fp, r4, #26
 8006f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3e:	425b      	negs	r3, r3
 8006f40:	4553      	cmp	r3, sl
 8006f42:	dc01      	bgt.n	8006f48 <_printf_float+0x2b0>
 8006f44:	464b      	mov	r3, r9
 8006f46:	e793      	b.n	8006e70 <_printf_float+0x1d8>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	465a      	mov	r2, fp
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f aefb 	beq.w	8006d4e <_printf_float+0xb6>
 8006f58:	f10a 0a01 	add.w	sl, sl, #1
 8006f5c:	e7ee      	b.n	8006f3c <_printf_float+0x2a4>
 8006f5e:	bf00      	nop
 8006f60:	7fefffff 	.word	0x7fefffff
 8006f64:	0800b350 	.word	0x0800b350
 8006f68:	0800b34c 	.word	0x0800b34c
 8006f6c:	0800b358 	.word	0x0800b358
 8006f70:	0800b354 	.word	0x0800b354
 8006f74:	0800b35c 	.word	0x0800b35c
 8006f78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f7e:	4553      	cmp	r3, sl
 8006f80:	bfa8      	it	ge
 8006f82:	4653      	movge	r3, sl
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	4699      	mov	r9, r3
 8006f88:	dc36      	bgt.n	8006ff8 <_printf_float+0x360>
 8006f8a:	f04f 0b00 	mov.w	fp, #0
 8006f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f92:	f104 021a 	add.w	r2, r4, #26
 8006f96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f98:	9306      	str	r3, [sp, #24]
 8006f9a:	eba3 0309 	sub.w	r3, r3, r9
 8006f9e:	455b      	cmp	r3, fp
 8006fa0:	dc31      	bgt.n	8007006 <_printf_float+0x36e>
 8006fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa4:	459a      	cmp	sl, r3
 8006fa6:	dc3a      	bgt.n	800701e <_printf_float+0x386>
 8006fa8:	6823      	ldr	r3, [r4, #0]
 8006faa:	07da      	lsls	r2, r3, #31
 8006fac:	d437      	bmi.n	800701e <_printf_float+0x386>
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	ebaa 0903 	sub.w	r9, sl, r3
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006fba:	4599      	cmp	r9, r3
 8006fbc:	bfa8      	it	ge
 8006fbe:	4699      	movge	r9, r3
 8006fc0:	f1b9 0f00 	cmp.w	r9, #0
 8006fc4:	dc33      	bgt.n	800702e <_printf_float+0x396>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fce:	f104 0b1a 	add.w	fp, r4, #26
 8006fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd4:	ebaa 0303 	sub.w	r3, sl, r3
 8006fd8:	eba3 0309 	sub.w	r3, r3, r9
 8006fdc:	4543      	cmp	r3, r8
 8006fde:	f77f af79 	ble.w	8006ed4 <_printf_float+0x23c>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	465a      	mov	r2, fp
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f aeae 	beq.w	8006d4e <_printf_float+0xb6>
 8006ff2:	f108 0801 	add.w	r8, r8, #1
 8006ff6:	e7ec      	b.n	8006fd2 <_printf_float+0x33a>
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	d1c2      	bne.n	8006f8a <_printf_float+0x2f2>
 8007004:	e6a3      	b.n	8006d4e <_printf_float+0xb6>
 8007006:	2301      	movs	r3, #1
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	9206      	str	r2, [sp, #24]
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae9c 	beq.w	8006d4e <_printf_float+0xb6>
 8007016:	9a06      	ldr	r2, [sp, #24]
 8007018:	f10b 0b01 	add.w	fp, fp, #1
 800701c:	e7bb      	b.n	8006f96 <_printf_float+0x2fe>
 800701e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	d1c0      	bne.n	8006fae <_printf_float+0x316>
 800702c:	e68f      	b.n	8006d4e <_printf_float+0xb6>
 800702e:	9a06      	ldr	r2, [sp, #24]
 8007030:	464b      	mov	r3, r9
 8007032:	4442      	add	r2, r8
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	d1c3      	bne.n	8006fc6 <_printf_float+0x32e>
 800703e:	e686      	b.n	8006d4e <_printf_float+0xb6>
 8007040:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007044:	f1ba 0f01 	cmp.w	sl, #1
 8007048:	dc01      	bgt.n	800704e <_printf_float+0x3b6>
 800704a:	07db      	lsls	r3, r3, #31
 800704c:	d536      	bpl.n	80070bc <_printf_float+0x424>
 800704e:	2301      	movs	r3, #1
 8007050:	4642      	mov	r2, r8
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f ae78 	beq.w	8006d4e <_printf_float+0xb6>
 800705e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	f43f ae70 	beq.w	8006d4e <_printf_float+0xb6>
 800706e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007072:	2200      	movs	r2, #0
 8007074:	2300      	movs	r3, #0
 8007076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800707a:	f7f9 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800707e:	b9c0      	cbnz	r0, 80070b2 <_printf_float+0x41a>
 8007080:	4653      	mov	r3, sl
 8007082:	f108 0201 	add.w	r2, r8, #1
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	d10c      	bne.n	80070aa <_printf_float+0x412>
 8007090:	e65d      	b.n	8006d4e <_printf_float+0xb6>
 8007092:	2301      	movs	r3, #1
 8007094:	465a      	mov	r2, fp
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	f43f ae56 	beq.w	8006d4e <_printf_float+0xb6>
 80070a2:	f108 0801 	add.w	r8, r8, #1
 80070a6:	45d0      	cmp	r8, sl
 80070a8:	dbf3      	blt.n	8007092 <_printf_float+0x3fa>
 80070aa:	464b      	mov	r3, r9
 80070ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070b0:	e6df      	b.n	8006e72 <_printf_float+0x1da>
 80070b2:	f04f 0800 	mov.w	r8, #0
 80070b6:	f104 0b1a 	add.w	fp, r4, #26
 80070ba:	e7f4      	b.n	80070a6 <_printf_float+0x40e>
 80070bc:	2301      	movs	r3, #1
 80070be:	4642      	mov	r2, r8
 80070c0:	e7e1      	b.n	8007086 <_printf_float+0x3ee>
 80070c2:	2301      	movs	r3, #1
 80070c4:	464a      	mov	r2, r9
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f ae3e 	beq.w	8006d4e <_printf_float+0xb6>
 80070d2:	f108 0801 	add.w	r8, r8, #1
 80070d6:	68e3      	ldr	r3, [r4, #12]
 80070d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070da:	1a5b      	subs	r3, r3, r1
 80070dc:	4543      	cmp	r3, r8
 80070de:	dcf0      	bgt.n	80070c2 <_printf_float+0x42a>
 80070e0:	e6fc      	b.n	8006edc <_printf_float+0x244>
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	f104 0919 	add.w	r9, r4, #25
 80070ea:	e7f4      	b.n	80070d6 <_printf_float+0x43e>

080070ec <_printf_common>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	4616      	mov	r6, r2
 80070f2:	4698      	mov	r8, r3
 80070f4:	688a      	ldr	r2, [r1, #8]
 80070f6:	690b      	ldr	r3, [r1, #16]
 80070f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070fc:	4293      	cmp	r3, r2
 80070fe:	bfb8      	it	lt
 8007100:	4613      	movlt	r3, r2
 8007102:	6033      	str	r3, [r6, #0]
 8007104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007108:	4607      	mov	r7, r0
 800710a:	460c      	mov	r4, r1
 800710c:	b10a      	cbz	r2, 8007112 <_printf_common+0x26>
 800710e:	3301      	adds	r3, #1
 8007110:	6033      	str	r3, [r6, #0]
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	0699      	lsls	r1, r3, #26
 8007116:	bf42      	ittt	mi
 8007118:	6833      	ldrmi	r3, [r6, #0]
 800711a:	3302      	addmi	r3, #2
 800711c:	6033      	strmi	r3, [r6, #0]
 800711e:	6825      	ldr	r5, [r4, #0]
 8007120:	f015 0506 	ands.w	r5, r5, #6
 8007124:	d106      	bne.n	8007134 <_printf_common+0x48>
 8007126:	f104 0a19 	add.w	sl, r4, #25
 800712a:	68e3      	ldr	r3, [r4, #12]
 800712c:	6832      	ldr	r2, [r6, #0]
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	42ab      	cmp	r3, r5
 8007132:	dc26      	bgt.n	8007182 <_printf_common+0x96>
 8007134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	3b00      	subs	r3, #0
 800713c:	bf18      	it	ne
 800713e:	2301      	movne	r3, #1
 8007140:	0692      	lsls	r2, r2, #26
 8007142:	d42b      	bmi.n	800719c <_printf_common+0xb0>
 8007144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007148:	4641      	mov	r1, r8
 800714a:	4638      	mov	r0, r7
 800714c:	47c8      	blx	r9
 800714e:	3001      	adds	r0, #1
 8007150:	d01e      	beq.n	8007190 <_printf_common+0xa4>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	f003 0306 	and.w	r3, r3, #6
 800715a:	2b04      	cmp	r3, #4
 800715c:	bf02      	ittt	eq
 800715e:	68e5      	ldreq	r5, [r4, #12]
 8007160:	6833      	ldreq	r3, [r6, #0]
 8007162:	1aed      	subeq	r5, r5, r3
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	bf0c      	ite	eq
 8007168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800716c:	2500      	movne	r5, #0
 800716e:	4293      	cmp	r3, r2
 8007170:	bfc4      	itt	gt
 8007172:	1a9b      	subgt	r3, r3, r2
 8007174:	18ed      	addgt	r5, r5, r3
 8007176:	2600      	movs	r6, #0
 8007178:	341a      	adds	r4, #26
 800717a:	42b5      	cmp	r5, r6
 800717c:	d11a      	bne.n	80071b4 <_printf_common+0xc8>
 800717e:	2000      	movs	r0, #0
 8007180:	e008      	b.n	8007194 <_printf_common+0xa8>
 8007182:	2301      	movs	r3, #1
 8007184:	4652      	mov	r2, sl
 8007186:	4641      	mov	r1, r8
 8007188:	4638      	mov	r0, r7
 800718a:	47c8      	blx	r9
 800718c:	3001      	adds	r0, #1
 800718e:	d103      	bne.n	8007198 <_printf_common+0xac>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007198:	3501      	adds	r5, #1
 800719a:	e7c6      	b.n	800712a <_printf_common+0x3e>
 800719c:	18e1      	adds	r1, r4, r3
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	2030      	movs	r0, #48	@ 0x30
 80071a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071a6:	4422      	add	r2, r4
 80071a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071b0:	3302      	adds	r3, #2
 80071b2:	e7c7      	b.n	8007144 <_printf_common+0x58>
 80071b4:	2301      	movs	r3, #1
 80071b6:	4622      	mov	r2, r4
 80071b8:	4641      	mov	r1, r8
 80071ba:	4638      	mov	r0, r7
 80071bc:	47c8      	blx	r9
 80071be:	3001      	adds	r0, #1
 80071c0:	d0e6      	beq.n	8007190 <_printf_common+0xa4>
 80071c2:	3601      	adds	r6, #1
 80071c4:	e7d9      	b.n	800717a <_printf_common+0x8e>
	...

080071c8 <_printf_i>:
 80071c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	7e0f      	ldrb	r7, [r1, #24]
 80071ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071d0:	2f78      	cmp	r7, #120	@ 0x78
 80071d2:	4691      	mov	r9, r2
 80071d4:	4680      	mov	r8, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	469a      	mov	sl, r3
 80071da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071de:	d807      	bhi.n	80071f0 <_printf_i+0x28>
 80071e0:	2f62      	cmp	r7, #98	@ 0x62
 80071e2:	d80a      	bhi.n	80071fa <_printf_i+0x32>
 80071e4:	2f00      	cmp	r7, #0
 80071e6:	f000 80d1 	beq.w	800738c <_printf_i+0x1c4>
 80071ea:	2f58      	cmp	r7, #88	@ 0x58
 80071ec:	f000 80b8 	beq.w	8007360 <_printf_i+0x198>
 80071f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071f8:	e03a      	b.n	8007270 <_printf_i+0xa8>
 80071fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071fe:	2b15      	cmp	r3, #21
 8007200:	d8f6      	bhi.n	80071f0 <_printf_i+0x28>
 8007202:	a101      	add	r1, pc, #4	@ (adr r1, 8007208 <_printf_i+0x40>)
 8007204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007208:	08007261 	.word	0x08007261
 800720c:	08007275 	.word	0x08007275
 8007210:	080071f1 	.word	0x080071f1
 8007214:	080071f1 	.word	0x080071f1
 8007218:	080071f1 	.word	0x080071f1
 800721c:	080071f1 	.word	0x080071f1
 8007220:	08007275 	.word	0x08007275
 8007224:	080071f1 	.word	0x080071f1
 8007228:	080071f1 	.word	0x080071f1
 800722c:	080071f1 	.word	0x080071f1
 8007230:	080071f1 	.word	0x080071f1
 8007234:	08007373 	.word	0x08007373
 8007238:	0800729f 	.word	0x0800729f
 800723c:	0800732d 	.word	0x0800732d
 8007240:	080071f1 	.word	0x080071f1
 8007244:	080071f1 	.word	0x080071f1
 8007248:	08007395 	.word	0x08007395
 800724c:	080071f1 	.word	0x080071f1
 8007250:	0800729f 	.word	0x0800729f
 8007254:	080071f1 	.word	0x080071f1
 8007258:	080071f1 	.word	0x080071f1
 800725c:	08007335 	.word	0x08007335
 8007260:	6833      	ldr	r3, [r6, #0]
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6032      	str	r2, [r6, #0]
 8007268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800726c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007270:	2301      	movs	r3, #1
 8007272:	e09c      	b.n	80073ae <_printf_i+0x1e6>
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	6820      	ldr	r0, [r4, #0]
 8007278:	1d19      	adds	r1, r3, #4
 800727a:	6031      	str	r1, [r6, #0]
 800727c:	0606      	lsls	r6, r0, #24
 800727e:	d501      	bpl.n	8007284 <_printf_i+0xbc>
 8007280:	681d      	ldr	r5, [r3, #0]
 8007282:	e003      	b.n	800728c <_printf_i+0xc4>
 8007284:	0645      	lsls	r5, r0, #25
 8007286:	d5fb      	bpl.n	8007280 <_printf_i+0xb8>
 8007288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800728c:	2d00      	cmp	r5, #0
 800728e:	da03      	bge.n	8007298 <_printf_i+0xd0>
 8007290:	232d      	movs	r3, #45	@ 0x2d
 8007292:	426d      	negs	r5, r5
 8007294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007298:	4858      	ldr	r0, [pc, #352]	@ (80073fc <_printf_i+0x234>)
 800729a:	230a      	movs	r3, #10
 800729c:	e011      	b.n	80072c2 <_printf_i+0xfa>
 800729e:	6821      	ldr	r1, [r4, #0]
 80072a0:	6833      	ldr	r3, [r6, #0]
 80072a2:	0608      	lsls	r0, r1, #24
 80072a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072a8:	d402      	bmi.n	80072b0 <_printf_i+0xe8>
 80072aa:	0649      	lsls	r1, r1, #25
 80072ac:	bf48      	it	mi
 80072ae:	b2ad      	uxthmi	r5, r5
 80072b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072b2:	4852      	ldr	r0, [pc, #328]	@ (80073fc <_printf_i+0x234>)
 80072b4:	6033      	str	r3, [r6, #0]
 80072b6:	bf14      	ite	ne
 80072b8:	230a      	movne	r3, #10
 80072ba:	2308      	moveq	r3, #8
 80072bc:	2100      	movs	r1, #0
 80072be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072c2:	6866      	ldr	r6, [r4, #4]
 80072c4:	60a6      	str	r6, [r4, #8]
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	db05      	blt.n	80072d6 <_printf_i+0x10e>
 80072ca:	6821      	ldr	r1, [r4, #0]
 80072cc:	432e      	orrs	r6, r5
 80072ce:	f021 0104 	bic.w	r1, r1, #4
 80072d2:	6021      	str	r1, [r4, #0]
 80072d4:	d04b      	beq.n	800736e <_printf_i+0x1a6>
 80072d6:	4616      	mov	r6, r2
 80072d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80072dc:	fb03 5711 	mls	r7, r3, r1, r5
 80072e0:	5dc7      	ldrb	r7, [r0, r7]
 80072e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072e6:	462f      	mov	r7, r5
 80072e8:	42bb      	cmp	r3, r7
 80072ea:	460d      	mov	r5, r1
 80072ec:	d9f4      	bls.n	80072d8 <_printf_i+0x110>
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d10b      	bne.n	800730a <_printf_i+0x142>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	07df      	lsls	r7, r3, #31
 80072f6:	d508      	bpl.n	800730a <_printf_i+0x142>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	6861      	ldr	r1, [r4, #4]
 80072fc:	4299      	cmp	r1, r3
 80072fe:	bfde      	ittt	le
 8007300:	2330      	movle	r3, #48	@ 0x30
 8007302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800730a:	1b92      	subs	r2, r2, r6
 800730c:	6122      	str	r2, [r4, #16]
 800730e:	f8cd a000 	str.w	sl, [sp]
 8007312:	464b      	mov	r3, r9
 8007314:	aa03      	add	r2, sp, #12
 8007316:	4621      	mov	r1, r4
 8007318:	4640      	mov	r0, r8
 800731a:	f7ff fee7 	bl	80070ec <_printf_common>
 800731e:	3001      	adds	r0, #1
 8007320:	d14a      	bne.n	80073b8 <_printf_i+0x1f0>
 8007322:	f04f 30ff 	mov.w	r0, #4294967295
 8007326:	b004      	add	sp, #16
 8007328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	f043 0320 	orr.w	r3, r3, #32
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	4832      	ldr	r0, [pc, #200]	@ (8007400 <_printf_i+0x238>)
 8007336:	2778      	movs	r7, #120	@ 0x78
 8007338:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	6831      	ldr	r1, [r6, #0]
 8007340:	061f      	lsls	r7, r3, #24
 8007342:	f851 5b04 	ldr.w	r5, [r1], #4
 8007346:	d402      	bmi.n	800734e <_printf_i+0x186>
 8007348:	065f      	lsls	r7, r3, #25
 800734a:	bf48      	it	mi
 800734c:	b2ad      	uxthmi	r5, r5
 800734e:	6031      	str	r1, [r6, #0]
 8007350:	07d9      	lsls	r1, r3, #31
 8007352:	bf44      	itt	mi
 8007354:	f043 0320 	orrmi.w	r3, r3, #32
 8007358:	6023      	strmi	r3, [r4, #0]
 800735a:	b11d      	cbz	r5, 8007364 <_printf_i+0x19c>
 800735c:	2310      	movs	r3, #16
 800735e:	e7ad      	b.n	80072bc <_printf_i+0xf4>
 8007360:	4826      	ldr	r0, [pc, #152]	@ (80073fc <_printf_i+0x234>)
 8007362:	e7e9      	b.n	8007338 <_printf_i+0x170>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	f023 0320 	bic.w	r3, r3, #32
 800736a:	6023      	str	r3, [r4, #0]
 800736c:	e7f6      	b.n	800735c <_printf_i+0x194>
 800736e:	4616      	mov	r6, r2
 8007370:	e7bd      	b.n	80072ee <_printf_i+0x126>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	6825      	ldr	r5, [r4, #0]
 8007376:	6961      	ldr	r1, [r4, #20]
 8007378:	1d18      	adds	r0, r3, #4
 800737a:	6030      	str	r0, [r6, #0]
 800737c:	062e      	lsls	r6, r5, #24
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	d501      	bpl.n	8007386 <_printf_i+0x1be>
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	e002      	b.n	800738c <_printf_i+0x1c4>
 8007386:	0668      	lsls	r0, r5, #25
 8007388:	d5fb      	bpl.n	8007382 <_printf_i+0x1ba>
 800738a:	8019      	strh	r1, [r3, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	4616      	mov	r6, r2
 8007392:	e7bc      	b.n	800730e <_printf_i+0x146>
 8007394:	6833      	ldr	r3, [r6, #0]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	6032      	str	r2, [r6, #0]
 800739a:	681e      	ldr	r6, [r3, #0]
 800739c:	6862      	ldr	r2, [r4, #4]
 800739e:	2100      	movs	r1, #0
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7f8 ff1d 	bl	80001e0 <memchr>
 80073a6:	b108      	cbz	r0, 80073ac <_printf_i+0x1e4>
 80073a8:	1b80      	subs	r0, r0, r6
 80073aa:	6060      	str	r0, [r4, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	2300      	movs	r3, #0
 80073b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073b6:	e7aa      	b.n	800730e <_printf_i+0x146>
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	4632      	mov	r2, r6
 80073bc:	4649      	mov	r1, r9
 80073be:	4640      	mov	r0, r8
 80073c0:	47d0      	blx	sl
 80073c2:	3001      	adds	r0, #1
 80073c4:	d0ad      	beq.n	8007322 <_printf_i+0x15a>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	079b      	lsls	r3, r3, #30
 80073ca:	d413      	bmi.n	80073f4 <_printf_i+0x22c>
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	4298      	cmp	r0, r3
 80073d2:	bfb8      	it	lt
 80073d4:	4618      	movlt	r0, r3
 80073d6:	e7a6      	b.n	8007326 <_printf_i+0x15e>
 80073d8:	2301      	movs	r3, #1
 80073da:	4632      	mov	r2, r6
 80073dc:	4649      	mov	r1, r9
 80073de:	4640      	mov	r0, r8
 80073e0:	47d0      	blx	sl
 80073e2:	3001      	adds	r0, #1
 80073e4:	d09d      	beq.n	8007322 <_printf_i+0x15a>
 80073e6:	3501      	adds	r5, #1
 80073e8:	68e3      	ldr	r3, [r4, #12]
 80073ea:	9903      	ldr	r1, [sp, #12]
 80073ec:	1a5b      	subs	r3, r3, r1
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dcf2      	bgt.n	80073d8 <_printf_i+0x210>
 80073f2:	e7eb      	b.n	80073cc <_printf_i+0x204>
 80073f4:	2500      	movs	r5, #0
 80073f6:	f104 0619 	add.w	r6, r4, #25
 80073fa:	e7f5      	b.n	80073e8 <_printf_i+0x220>
 80073fc:	0800b35e 	.word	0x0800b35e
 8007400:	0800b36f 	.word	0x0800b36f

08007404 <_scanf_float>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	b087      	sub	sp, #28
 800740a:	4691      	mov	r9, r2
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	688b      	ldr	r3, [r1, #8]
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007416:	bf81      	itttt	hi
 8007418:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800741c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007420:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007424:	608b      	strhi	r3, [r1, #8]
 8007426:	680b      	ldr	r3, [r1, #0]
 8007428:	460a      	mov	r2, r1
 800742a:	f04f 0500 	mov.w	r5, #0
 800742e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007432:	f842 3b1c 	str.w	r3, [r2], #28
 8007436:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800743a:	4680      	mov	r8, r0
 800743c:	460c      	mov	r4, r1
 800743e:	bf98      	it	ls
 8007440:	f04f 0b00 	movls.w	fp, #0
 8007444:	9201      	str	r2, [sp, #4]
 8007446:	4616      	mov	r6, r2
 8007448:	46aa      	mov	sl, r5
 800744a:	462f      	mov	r7, r5
 800744c:	9502      	str	r5, [sp, #8]
 800744e:	68a2      	ldr	r2, [r4, #8]
 8007450:	b15a      	cbz	r2, 800746a <_scanf_float+0x66>
 8007452:	f8d9 3000 	ldr.w	r3, [r9]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b4e      	cmp	r3, #78	@ 0x4e
 800745a:	d863      	bhi.n	8007524 <_scanf_float+0x120>
 800745c:	2b40      	cmp	r3, #64	@ 0x40
 800745e:	d83b      	bhi.n	80074d8 <_scanf_float+0xd4>
 8007460:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007464:	b2c8      	uxtb	r0, r1
 8007466:	280e      	cmp	r0, #14
 8007468:	d939      	bls.n	80074de <_scanf_float+0xda>
 800746a:	b11f      	cbz	r7, 8007474 <_scanf_float+0x70>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007478:	f1ba 0f01 	cmp.w	sl, #1
 800747c:	f200 8114 	bhi.w	80076a8 <_scanf_float+0x2a4>
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	429e      	cmp	r6, r3
 8007484:	f200 8105 	bhi.w	8007692 <_scanf_float+0x28e>
 8007488:	2001      	movs	r0, #1
 800748a:	b007      	add	sp, #28
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007494:	2a0d      	cmp	r2, #13
 8007496:	d8e8      	bhi.n	800746a <_scanf_float+0x66>
 8007498:	a101      	add	r1, pc, #4	@ (adr r1, 80074a0 <_scanf_float+0x9c>)
 800749a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080075e9 	.word	0x080075e9
 80074a4:	0800746b 	.word	0x0800746b
 80074a8:	0800746b 	.word	0x0800746b
 80074ac:	0800746b 	.word	0x0800746b
 80074b0:	08007645 	.word	0x08007645
 80074b4:	0800761f 	.word	0x0800761f
 80074b8:	0800746b 	.word	0x0800746b
 80074bc:	0800746b 	.word	0x0800746b
 80074c0:	080075f7 	.word	0x080075f7
 80074c4:	0800746b 	.word	0x0800746b
 80074c8:	0800746b 	.word	0x0800746b
 80074cc:	0800746b 	.word	0x0800746b
 80074d0:	0800746b 	.word	0x0800746b
 80074d4:	080075b3 	.word	0x080075b3
 80074d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80074dc:	e7da      	b.n	8007494 <_scanf_float+0x90>
 80074de:	290e      	cmp	r1, #14
 80074e0:	d8c3      	bhi.n	800746a <_scanf_float+0x66>
 80074e2:	a001      	add	r0, pc, #4	@ (adr r0, 80074e8 <_scanf_float+0xe4>)
 80074e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074e8:	080075a3 	.word	0x080075a3
 80074ec:	0800746b 	.word	0x0800746b
 80074f0:	080075a3 	.word	0x080075a3
 80074f4:	08007633 	.word	0x08007633
 80074f8:	0800746b 	.word	0x0800746b
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007589 	.word	0x08007589
 8007504:	08007589 	.word	0x08007589
 8007508:	08007589 	.word	0x08007589
 800750c:	08007589 	.word	0x08007589
 8007510:	08007589 	.word	0x08007589
 8007514:	08007589 	.word	0x08007589
 8007518:	08007589 	.word	0x08007589
 800751c:	08007589 	.word	0x08007589
 8007520:	08007589 	.word	0x08007589
 8007524:	2b6e      	cmp	r3, #110	@ 0x6e
 8007526:	d809      	bhi.n	800753c <_scanf_float+0x138>
 8007528:	2b60      	cmp	r3, #96	@ 0x60
 800752a:	d8b1      	bhi.n	8007490 <_scanf_float+0x8c>
 800752c:	2b54      	cmp	r3, #84	@ 0x54
 800752e:	d07b      	beq.n	8007628 <_scanf_float+0x224>
 8007530:	2b59      	cmp	r3, #89	@ 0x59
 8007532:	d19a      	bne.n	800746a <_scanf_float+0x66>
 8007534:	2d07      	cmp	r5, #7
 8007536:	d198      	bne.n	800746a <_scanf_float+0x66>
 8007538:	2508      	movs	r5, #8
 800753a:	e02f      	b.n	800759c <_scanf_float+0x198>
 800753c:	2b74      	cmp	r3, #116	@ 0x74
 800753e:	d073      	beq.n	8007628 <_scanf_float+0x224>
 8007540:	2b79      	cmp	r3, #121	@ 0x79
 8007542:	e7f6      	b.n	8007532 <_scanf_float+0x12e>
 8007544:	6821      	ldr	r1, [r4, #0]
 8007546:	05c8      	lsls	r0, r1, #23
 8007548:	d51e      	bpl.n	8007588 <_scanf_float+0x184>
 800754a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800754e:	6021      	str	r1, [r4, #0]
 8007550:	3701      	adds	r7, #1
 8007552:	f1bb 0f00 	cmp.w	fp, #0
 8007556:	d003      	beq.n	8007560 <_scanf_float+0x15c>
 8007558:	3201      	adds	r2, #1
 800755a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800755e:	60a2      	str	r2, [r4, #8]
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	60a3      	str	r3, [r4, #8]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	3301      	adds	r3, #1
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007570:	3b01      	subs	r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	f8c9 3004 	str.w	r3, [r9, #4]
 8007578:	f340 8082 	ble.w	8007680 <_scanf_float+0x27c>
 800757c:	f8d9 3000 	ldr.w	r3, [r9]
 8007580:	3301      	adds	r3, #1
 8007582:	f8c9 3000 	str.w	r3, [r9]
 8007586:	e762      	b.n	800744e <_scanf_float+0x4a>
 8007588:	eb1a 0105 	adds.w	r1, sl, r5
 800758c:	f47f af6d 	bne.w	800746a <_scanf_float+0x66>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007596:	6022      	str	r2, [r4, #0]
 8007598:	460d      	mov	r5, r1
 800759a:	468a      	mov	sl, r1
 800759c:	f806 3b01 	strb.w	r3, [r6], #1
 80075a0:	e7de      	b.n	8007560 <_scanf_float+0x15c>
 80075a2:	6822      	ldr	r2, [r4, #0]
 80075a4:	0610      	lsls	r0, r2, #24
 80075a6:	f57f af60 	bpl.w	800746a <_scanf_float+0x66>
 80075aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	e7f4      	b.n	800759c <_scanf_float+0x198>
 80075b2:	f1ba 0f00 	cmp.w	sl, #0
 80075b6:	d10c      	bne.n	80075d2 <_scanf_float+0x1ce>
 80075b8:	b977      	cbnz	r7, 80075d8 <_scanf_float+0x1d4>
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075c4:	d108      	bne.n	80075d8 <_scanf_float+0x1d4>
 80075c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075ca:	6022      	str	r2, [r4, #0]
 80075cc:	f04f 0a01 	mov.w	sl, #1
 80075d0:	e7e4      	b.n	800759c <_scanf_float+0x198>
 80075d2:	f1ba 0f02 	cmp.w	sl, #2
 80075d6:	d050      	beq.n	800767a <_scanf_float+0x276>
 80075d8:	2d01      	cmp	r5, #1
 80075da:	d002      	beq.n	80075e2 <_scanf_float+0x1de>
 80075dc:	2d04      	cmp	r5, #4
 80075de:	f47f af44 	bne.w	800746a <_scanf_float+0x66>
 80075e2:	3501      	adds	r5, #1
 80075e4:	b2ed      	uxtb	r5, r5
 80075e6:	e7d9      	b.n	800759c <_scanf_float+0x198>
 80075e8:	f1ba 0f01 	cmp.w	sl, #1
 80075ec:	f47f af3d 	bne.w	800746a <_scanf_float+0x66>
 80075f0:	f04f 0a02 	mov.w	sl, #2
 80075f4:	e7d2      	b.n	800759c <_scanf_float+0x198>
 80075f6:	b975      	cbnz	r5, 8007616 <_scanf_float+0x212>
 80075f8:	2f00      	cmp	r7, #0
 80075fa:	f47f af37 	bne.w	800746c <_scanf_float+0x68>
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007604:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007608:	f040 8103 	bne.w	8007812 <_scanf_float+0x40e>
 800760c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007610:	6022      	str	r2, [r4, #0]
 8007612:	2501      	movs	r5, #1
 8007614:	e7c2      	b.n	800759c <_scanf_float+0x198>
 8007616:	2d03      	cmp	r5, #3
 8007618:	d0e3      	beq.n	80075e2 <_scanf_float+0x1de>
 800761a:	2d05      	cmp	r5, #5
 800761c:	e7df      	b.n	80075de <_scanf_float+0x1da>
 800761e:	2d02      	cmp	r5, #2
 8007620:	f47f af23 	bne.w	800746a <_scanf_float+0x66>
 8007624:	2503      	movs	r5, #3
 8007626:	e7b9      	b.n	800759c <_scanf_float+0x198>
 8007628:	2d06      	cmp	r5, #6
 800762a:	f47f af1e 	bne.w	800746a <_scanf_float+0x66>
 800762e:	2507      	movs	r5, #7
 8007630:	e7b4      	b.n	800759c <_scanf_float+0x198>
 8007632:	6822      	ldr	r2, [r4, #0]
 8007634:	0591      	lsls	r1, r2, #22
 8007636:	f57f af18 	bpl.w	800746a <_scanf_float+0x66>
 800763a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800763e:	6022      	str	r2, [r4, #0]
 8007640:	9702      	str	r7, [sp, #8]
 8007642:	e7ab      	b.n	800759c <_scanf_float+0x198>
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800764a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800764e:	d005      	beq.n	800765c <_scanf_float+0x258>
 8007650:	0550      	lsls	r0, r2, #21
 8007652:	f57f af0a 	bpl.w	800746a <_scanf_float+0x66>
 8007656:	2f00      	cmp	r7, #0
 8007658:	f000 80db 	beq.w	8007812 <_scanf_float+0x40e>
 800765c:	0591      	lsls	r1, r2, #22
 800765e:	bf58      	it	pl
 8007660:	9902      	ldrpl	r1, [sp, #8]
 8007662:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007666:	bf58      	it	pl
 8007668:	1a79      	subpl	r1, r7, r1
 800766a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800766e:	bf58      	it	pl
 8007670:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	2700      	movs	r7, #0
 8007678:	e790      	b.n	800759c <_scanf_float+0x198>
 800767a:	f04f 0a03 	mov.w	sl, #3
 800767e:	e78d      	b.n	800759c <_scanf_float+0x198>
 8007680:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007684:	4649      	mov	r1, r9
 8007686:	4640      	mov	r0, r8
 8007688:	4798      	blx	r3
 800768a:	2800      	cmp	r0, #0
 800768c:	f43f aedf 	beq.w	800744e <_scanf_float+0x4a>
 8007690:	e6eb      	b.n	800746a <_scanf_float+0x66>
 8007692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800769a:	464a      	mov	r2, r9
 800769c:	4640      	mov	r0, r8
 800769e:	4798      	blx	r3
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	e6eb      	b.n	8007480 <_scanf_float+0x7c>
 80076a8:	1e6b      	subs	r3, r5, #1
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d824      	bhi.n	80076f8 <_scanf_float+0x2f4>
 80076ae:	2d02      	cmp	r5, #2
 80076b0:	d836      	bhi.n	8007720 <_scanf_float+0x31c>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	429e      	cmp	r6, r3
 80076b6:	f67f aee7 	bls.w	8007488 <_scanf_float+0x84>
 80076ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076c2:	464a      	mov	r2, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	4798      	blx	r3
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	e7f0      	b.n	80076b2 <_scanf_float+0x2ae>
 80076d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80076d8:	464a      	mov	r2, r9
 80076da:	4640      	mov	r0, r8
 80076dc:	4798      	blx	r3
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076e8:	fa5f fa8a 	uxtb.w	sl, sl
 80076ec:	f1ba 0f02 	cmp.w	sl, #2
 80076f0:	d1ee      	bne.n	80076d0 <_scanf_float+0x2cc>
 80076f2:	3d03      	subs	r5, #3
 80076f4:	b2ed      	uxtb	r5, r5
 80076f6:	1b76      	subs	r6, r6, r5
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	05da      	lsls	r2, r3, #23
 80076fc:	d530      	bpl.n	8007760 <_scanf_float+0x35c>
 80076fe:	055b      	lsls	r3, r3, #21
 8007700:	d511      	bpl.n	8007726 <_scanf_float+0x322>
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	429e      	cmp	r6, r3
 8007706:	f67f aebf 	bls.w	8007488 <_scanf_float+0x84>
 800770a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800770e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007712:	464a      	mov	r2, r9
 8007714:	4640      	mov	r0, r8
 8007716:	4798      	blx	r3
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	3b01      	subs	r3, #1
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	e7f0      	b.n	8007702 <_scanf_float+0x2fe>
 8007720:	46aa      	mov	sl, r5
 8007722:	46b3      	mov	fp, r6
 8007724:	e7de      	b.n	80076e4 <_scanf_float+0x2e0>
 8007726:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	2965      	cmp	r1, #101	@ 0x65
 800772e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007732:	f106 35ff 	add.w	r5, r6, #4294967295
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	d00c      	beq.n	8007754 <_scanf_float+0x350>
 800773a:	2945      	cmp	r1, #69	@ 0x45
 800773c:	d00a      	beq.n	8007754 <_scanf_float+0x350>
 800773e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007742:	464a      	mov	r2, r9
 8007744:	4640      	mov	r0, r8
 8007746:	4798      	blx	r3
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800774e:	3b01      	subs	r3, #1
 8007750:	1eb5      	subs	r5, r6, #2
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007758:	464a      	mov	r2, r9
 800775a:	4640      	mov	r0, r8
 800775c:	4798      	blx	r3
 800775e:	462e      	mov	r6, r5
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	f012 0210 	ands.w	r2, r2, #16
 8007766:	d001      	beq.n	800776c <_scanf_float+0x368>
 8007768:	2000      	movs	r0, #0
 800776a:	e68e      	b.n	800748a <_scanf_float+0x86>
 800776c:	7032      	strb	r2, [r6, #0]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007778:	d125      	bne.n	80077c6 <_scanf_float+0x3c2>
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	429f      	cmp	r7, r3
 800777e:	d00a      	beq.n	8007796 <_scanf_float+0x392>
 8007780:	1bda      	subs	r2, r3, r7
 8007782:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007786:	429e      	cmp	r6, r3
 8007788:	bf28      	it	cs
 800778a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800778e:	4922      	ldr	r1, [pc, #136]	@ (8007818 <_scanf_float+0x414>)
 8007790:	4630      	mov	r0, r6
 8007792:	f000 f907 	bl	80079a4 <siprintf>
 8007796:	9901      	ldr	r1, [sp, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	4640      	mov	r0, r8
 800779c:	f002 fc00 	bl	8009fa0 <_strtod_r>
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	6821      	ldr	r1, [r4, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f011 0f02 	tst.w	r1, #2
 80077aa:	ec57 6b10 	vmov	r6, r7, d0
 80077ae:	f103 0204 	add.w	r2, r3, #4
 80077b2:	d015      	beq.n	80077e0 <_scanf_float+0x3dc>
 80077b4:	9903      	ldr	r1, [sp, #12]
 80077b6:	600a      	str	r2, [r1, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	e9c3 6700 	strd	r6, r7, [r3]
 80077be:	68e3      	ldr	r3, [r4, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60e3      	str	r3, [r4, #12]
 80077c4:	e7d0      	b.n	8007768 <_scanf_float+0x364>
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0e4      	beq.n	8007796 <_scanf_float+0x392>
 80077cc:	9905      	ldr	r1, [sp, #20]
 80077ce:	230a      	movs	r3, #10
 80077d0:	3101      	adds	r1, #1
 80077d2:	4640      	mov	r0, r8
 80077d4:	f002 fc64 	bl	800a0a0 <_strtol_r>
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	9e05      	ldr	r6, [sp, #20]
 80077dc:	1ac2      	subs	r2, r0, r3
 80077de:	e7d0      	b.n	8007782 <_scanf_float+0x37e>
 80077e0:	f011 0f04 	tst.w	r1, #4
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	600a      	str	r2, [r1, #0]
 80077e8:	d1e6      	bne.n	80077b8 <_scanf_float+0x3b4>
 80077ea:	681d      	ldr	r5, [r3, #0]
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f9a2 	bl	8000b3c <__aeabi_dcmpun>
 80077f8:	b128      	cbz	r0, 8007806 <_scanf_float+0x402>
 80077fa:	4808      	ldr	r0, [pc, #32]	@ (800781c <_scanf_float+0x418>)
 80077fc:	f000 f9c6 	bl	8007b8c <nanf>
 8007800:	ed85 0a00 	vstr	s0, [r5]
 8007804:	e7db      	b.n	80077be <_scanf_float+0x3ba>
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f9 f9f5 	bl	8000bf8 <__aeabi_d2f>
 800780e:	6028      	str	r0, [r5, #0]
 8007810:	e7d5      	b.n	80077be <_scanf_float+0x3ba>
 8007812:	2700      	movs	r7, #0
 8007814:	e62e      	b.n	8007474 <_scanf_float+0x70>
 8007816:	bf00      	nop
 8007818:	0800b380 	.word	0x0800b380
 800781c:	0800b4c1 	.word	0x0800b4c1

08007820 <std>:
 8007820:	2300      	movs	r3, #0
 8007822:	b510      	push	{r4, lr}
 8007824:	4604      	mov	r4, r0
 8007826:	e9c0 3300 	strd	r3, r3, [r0]
 800782a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800782e:	6083      	str	r3, [r0, #8]
 8007830:	8181      	strh	r1, [r0, #12]
 8007832:	6643      	str	r3, [r0, #100]	@ 0x64
 8007834:	81c2      	strh	r2, [r0, #14]
 8007836:	6183      	str	r3, [r0, #24]
 8007838:	4619      	mov	r1, r3
 800783a:	2208      	movs	r2, #8
 800783c:	305c      	adds	r0, #92	@ 0x5c
 800783e:	f000 f916 	bl	8007a6e <memset>
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x58>)
 8007844:	6263      	str	r3, [r4, #36]	@ 0x24
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x5c>)
 8007848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x60>)
 800784c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800784e:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <std+0x64>)
 8007850:	6323      	str	r3, [r4, #48]	@ 0x30
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <std+0x68>)
 8007854:	6224      	str	r4, [r4, #32]
 8007856:	429c      	cmp	r4, r3
 8007858:	d006      	beq.n	8007868 <std+0x48>
 800785a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800785e:	4294      	cmp	r4, r2
 8007860:	d002      	beq.n	8007868 <std+0x48>
 8007862:	33d0      	adds	r3, #208	@ 0xd0
 8007864:	429c      	cmp	r4, r3
 8007866:	d105      	bne.n	8007874 <std+0x54>
 8007868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f000 b97a 	b.w	8007b68 <__retarget_lock_init_recursive>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	bf00      	nop
 8007878:	080079e9 	.word	0x080079e9
 800787c:	08007a0b 	.word	0x08007a0b
 8007880:	08007a43 	.word	0x08007a43
 8007884:	08007a67 	.word	0x08007a67
 8007888:	20000550 	.word	0x20000550

0800788c <stdio_exit_handler>:
 800788c:	4a02      	ldr	r2, [pc, #8]	@ (8007898 <stdio_exit_handler+0xc>)
 800788e:	4903      	ldr	r1, [pc, #12]	@ (800789c <stdio_exit_handler+0x10>)
 8007890:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <stdio_exit_handler+0x14>)
 8007892:	f000 b869 	b.w	8007968 <_fwalk_sglue>
 8007896:	bf00      	nop
 8007898:	200000e8 	.word	0x200000e8
 800789c:	0800a45d 	.word	0x0800a45d
 80078a0:	200000f8 	.word	0x200000f8

080078a4 <cleanup_stdio>:
 80078a4:	6841      	ldr	r1, [r0, #4]
 80078a6:	4b0c      	ldr	r3, [pc, #48]	@ (80078d8 <cleanup_stdio+0x34>)
 80078a8:	4299      	cmp	r1, r3
 80078aa:	b510      	push	{r4, lr}
 80078ac:	4604      	mov	r4, r0
 80078ae:	d001      	beq.n	80078b4 <cleanup_stdio+0x10>
 80078b0:	f002 fdd4 	bl	800a45c <_fflush_r>
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	4b09      	ldr	r3, [pc, #36]	@ (80078dc <cleanup_stdio+0x38>)
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <cleanup_stdio+0x1e>
 80078bc:	4620      	mov	r0, r4
 80078be:	f002 fdcd 	bl	800a45c <_fflush_r>
 80078c2:	68e1      	ldr	r1, [r4, #12]
 80078c4:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <cleanup_stdio+0x3c>)
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d004      	beq.n	80078d4 <cleanup_stdio+0x30>
 80078ca:	4620      	mov	r0, r4
 80078cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d0:	f002 bdc4 	b.w	800a45c <_fflush_r>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	20000550 	.word	0x20000550
 80078dc:	200005b8 	.word	0x200005b8
 80078e0:	20000620 	.word	0x20000620

080078e4 <global_stdio_init.part.0>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <global_stdio_init.part.0+0x30>)
 80078e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007918 <global_stdio_init.part.0+0x34>)
 80078ea:	4a0c      	ldr	r2, [pc, #48]	@ (800791c <global_stdio_init.part.0+0x38>)
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	4620      	mov	r0, r4
 80078f0:	2200      	movs	r2, #0
 80078f2:	2104      	movs	r1, #4
 80078f4:	f7ff ff94 	bl	8007820 <std>
 80078f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078fc:	2201      	movs	r2, #1
 80078fe:	2109      	movs	r1, #9
 8007900:	f7ff ff8e 	bl	8007820 <std>
 8007904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007908:	2202      	movs	r2, #2
 800790a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790e:	2112      	movs	r1, #18
 8007910:	f7ff bf86 	b.w	8007820 <std>
 8007914:	20000688 	.word	0x20000688
 8007918:	20000550 	.word	0x20000550
 800791c:	0800788d 	.word	0x0800788d

08007920 <__sfp_lock_acquire>:
 8007920:	4801      	ldr	r0, [pc, #4]	@ (8007928 <__sfp_lock_acquire+0x8>)
 8007922:	f000 b922 	b.w	8007b6a <__retarget_lock_acquire_recursive>
 8007926:	bf00      	nop
 8007928:	20000691 	.word	0x20000691

0800792c <__sfp_lock_release>:
 800792c:	4801      	ldr	r0, [pc, #4]	@ (8007934 <__sfp_lock_release+0x8>)
 800792e:	f000 b91d 	b.w	8007b6c <__retarget_lock_release_recursive>
 8007932:	bf00      	nop
 8007934:	20000691 	.word	0x20000691

08007938 <__sinit>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4604      	mov	r4, r0
 800793c:	f7ff fff0 	bl	8007920 <__sfp_lock_acquire>
 8007940:	6a23      	ldr	r3, [r4, #32]
 8007942:	b11b      	cbz	r3, 800794c <__sinit+0x14>
 8007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007948:	f7ff bff0 	b.w	800792c <__sfp_lock_release>
 800794c:	4b04      	ldr	r3, [pc, #16]	@ (8007960 <__sinit+0x28>)
 800794e:	6223      	str	r3, [r4, #32]
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <__sinit+0x2c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f5      	bne.n	8007944 <__sinit+0xc>
 8007958:	f7ff ffc4 	bl	80078e4 <global_stdio_init.part.0>
 800795c:	e7f2      	b.n	8007944 <__sinit+0xc>
 800795e:	bf00      	nop
 8007960:	080078a5 	.word	0x080078a5
 8007964:	20000688 	.word	0x20000688

08007968 <_fwalk_sglue>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4607      	mov	r7, r0
 800796e:	4688      	mov	r8, r1
 8007970:	4614      	mov	r4, r2
 8007972:	2600      	movs	r6, #0
 8007974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007978:	f1b9 0901 	subs.w	r9, r9, #1
 800797c:	d505      	bpl.n	800798a <_fwalk_sglue+0x22>
 800797e:	6824      	ldr	r4, [r4, #0]
 8007980:	2c00      	cmp	r4, #0
 8007982:	d1f7      	bne.n	8007974 <_fwalk_sglue+0xc>
 8007984:	4630      	mov	r0, r6
 8007986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d907      	bls.n	80079a0 <_fwalk_sglue+0x38>
 8007990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007994:	3301      	adds	r3, #1
 8007996:	d003      	beq.n	80079a0 <_fwalk_sglue+0x38>
 8007998:	4629      	mov	r1, r5
 800799a:	4638      	mov	r0, r7
 800799c:	47c0      	blx	r8
 800799e:	4306      	orrs	r6, r0
 80079a0:	3568      	adds	r5, #104	@ 0x68
 80079a2:	e7e9      	b.n	8007978 <_fwalk_sglue+0x10>

080079a4 <siprintf>:
 80079a4:	b40e      	push	{r1, r2, r3}
 80079a6:	b510      	push	{r4, lr}
 80079a8:	b09d      	sub	sp, #116	@ 0x74
 80079aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80079ac:	9002      	str	r0, [sp, #8]
 80079ae:	9006      	str	r0, [sp, #24]
 80079b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079b4:	480a      	ldr	r0, [pc, #40]	@ (80079e0 <siprintf+0x3c>)
 80079b6:	9107      	str	r1, [sp, #28]
 80079b8:	9104      	str	r1, [sp, #16]
 80079ba:	490a      	ldr	r1, [pc, #40]	@ (80079e4 <siprintf+0x40>)
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	2400      	movs	r4, #0
 80079c4:	a902      	add	r1, sp, #8
 80079c6:	6800      	ldr	r0, [r0, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80079cc:	f002 fbc6 	bl	800a15c <_svfiprintf_r>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	701c      	strb	r4, [r3, #0]
 80079d4:	b01d      	add	sp, #116	@ 0x74
 80079d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079da:	b003      	add	sp, #12
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	200000f4 	.word	0x200000f4
 80079e4:	ffff0208 	.word	0xffff0208

080079e8 <__sread>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	f000 f86c 	bl	8007acc <_read_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	bfab      	itete	ge
 80079f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079fa:	89a3      	ldrhlt	r3, [r4, #12]
 80079fc:	181b      	addge	r3, r3, r0
 80079fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a02:	bfac      	ite	ge
 8007a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a06:	81a3      	strhlt	r3, [r4, #12]
 8007a08:	bd10      	pop	{r4, pc}

08007a0a <__swrite>:
 8007a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0e:	461f      	mov	r7, r3
 8007a10:	898b      	ldrh	r3, [r1, #12]
 8007a12:	05db      	lsls	r3, r3, #23
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	4616      	mov	r6, r2
 8007a1a:	d505      	bpl.n	8007a28 <__swrite+0x1e>
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	2302      	movs	r3, #2
 8007a22:	2200      	movs	r2, #0
 8007a24:	f000 f840 	bl	8007aa8 <_lseek_r>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	4632      	mov	r2, r6
 8007a36:	463b      	mov	r3, r7
 8007a38:	4628      	mov	r0, r5
 8007a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3e:	f000 b857 	b.w	8007af0 <_write_r>

08007a42 <__sseek>:
 8007a42:	b510      	push	{r4, lr}
 8007a44:	460c      	mov	r4, r1
 8007a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4a:	f000 f82d 	bl	8007aa8 <_lseek_r>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	bf15      	itete	ne
 8007a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a5e:	81a3      	strheq	r3, [r4, #12]
 8007a60:	bf18      	it	ne
 8007a62:	81a3      	strhne	r3, [r4, #12]
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <__sclose>:
 8007a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6a:	f000 b80d 	b.w	8007a88 <_close_r>

08007a6e <memset>:
 8007a6e:	4402      	add	r2, r0
 8007a70:	4603      	mov	r3, r0
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d100      	bne.n	8007a78 <memset+0xa>
 8007a76:	4770      	bx	lr
 8007a78:	f803 1b01 	strb.w	r1, [r3], #1
 8007a7c:	e7f9      	b.n	8007a72 <memset+0x4>
	...

08007a80 <_localeconv_r>:
 8007a80:	4800      	ldr	r0, [pc, #0]	@ (8007a84 <_localeconv_r+0x4>)
 8007a82:	4770      	bx	lr
 8007a84:	20000234 	.word	0x20000234

08007a88 <_close_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d06      	ldr	r5, [pc, #24]	@ (8007aa4 <_close_r+0x1c>)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	f7f9 fd3a 	bl	800150c <_close>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_close_r+0x1a>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_close_r+0x1a>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	2000068c 	.word	0x2000068c

08007aa8 <_lseek_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ac8 <_lseek_r+0x20>)
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f7f9 fd4f 	bl	800155a <_lseek>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_lseek_r+0x1e>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_lseek_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	2000068c 	.word	0x2000068c

08007acc <_read_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	@ (8007aec <_read_r+0x20>)
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f7f9 fcdd 	bl	800149a <_read>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_read_r+0x1e>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_read_r+0x1e>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	2000068c 	.word	0x2000068c

08007af0 <_write_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	@ (8007b10 <_write_r+0x20>)
 8007af4:	4604      	mov	r4, r0
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7f9 fce8 	bl	80014d4 <_write>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_write_r+0x1e>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_write_r+0x1e>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	2000068c 	.word	0x2000068c

08007b14 <__errno>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	@ (8007b1c <__errno+0x8>)
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	200000f4 	.word	0x200000f4

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4d0d      	ldr	r5, [pc, #52]	@ (8007b58 <__libc_init_array+0x38>)
 8007b24:	4c0d      	ldr	r4, [pc, #52]	@ (8007b5c <__libc_init_array+0x3c>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	4d0b      	ldr	r5, [pc, #44]	@ (8007b60 <__libc_init_array+0x40>)
 8007b32:	4c0c      	ldr	r4, [pc, #48]	@ (8007b64 <__libc_init_array+0x44>)
 8007b34:	f003 fb76 	bl	800b224 <_init>
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	0800b77c 	.word	0x0800b77c
 8007b5c:	0800b77c 	.word	0x0800b77c
 8007b60:	0800b77c 	.word	0x0800b77c
 8007b64:	0800b780 	.word	0x0800b780

08007b68 <__retarget_lock_init_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <__retarget_lock_acquire_recursive>:
 8007b6a:	4770      	bx	lr

08007b6c <__retarget_lock_release_recursive>:
 8007b6c:	4770      	bx	lr

08007b6e <memcpy>:
 8007b6e:	440a      	add	r2, r1
 8007b70:	4291      	cmp	r1, r2
 8007b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b76:	d100      	bne.n	8007b7a <memcpy+0xc>
 8007b78:	4770      	bx	lr
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b84:	4291      	cmp	r1, r2
 8007b86:	d1f9      	bne.n	8007b7c <memcpy+0xe>
 8007b88:	bd10      	pop	{r4, pc}
	...

08007b8c <nanf>:
 8007b8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b94 <nanf+0x8>
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	7fc00000 	.word	0x7fc00000

08007b98 <quorem>:
 8007b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	6903      	ldr	r3, [r0, #16]
 8007b9e:	690c      	ldr	r4, [r1, #16]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	db7e      	blt.n	8007ca4 <quorem+0x10c>
 8007ba6:	3c01      	subs	r4, #1
 8007ba8:	f101 0814 	add.w	r8, r1, #20
 8007bac:	00a3      	lsls	r3, r4, #2
 8007bae:	f100 0514 	add.w	r5, r0, #20
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bca:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bce:	d32e      	bcc.n	8007c2e <quorem+0x96>
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	46c4      	mov	ip, r8
 8007bd6:	46ae      	mov	lr, r5
 8007bd8:	46d3      	mov	fp, sl
 8007bda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bde:	b298      	uxth	r0, r3
 8007be0:	fb06 a000 	mla	r0, r6, r0, sl
 8007be4:	0c02      	lsrs	r2, r0, #16
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	fb06 2303 	mla	r3, r6, r3, r2
 8007bec:	f8de 2000 	ldr.w	r2, [lr]
 8007bf0:	b280      	uxth	r0, r0
 8007bf2:	b292      	uxth	r2, r2
 8007bf4:	1a12      	subs	r2, r2, r0
 8007bf6:	445a      	add	r2, fp
 8007bf8:	f8de 0000 	ldr.w	r0, [lr]
 8007bfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c10:	45e1      	cmp	r9, ip
 8007c12:	f84e 2b04 	str.w	r2, [lr], #4
 8007c16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c1a:	d2de      	bcs.n	8007bda <quorem+0x42>
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	58eb      	ldr	r3, [r5, r3]
 8007c20:	b92b      	cbnz	r3, 8007c2e <quorem+0x96>
 8007c22:	9b01      	ldr	r3, [sp, #4]
 8007c24:	3b04      	subs	r3, #4
 8007c26:	429d      	cmp	r5, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	d32f      	bcc.n	8007c8c <quorem+0xf4>
 8007c2c:	613c      	str	r4, [r7, #16]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f001 f9c6 	bl	8008fc0 <__mcmp>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	db25      	blt.n	8007c84 <quorem+0xec>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c40:	f8d1 c000 	ldr.w	ip, [r1]
 8007c44:	fa1f fe82 	uxth.w	lr, r2
 8007c48:	fa1f f38c 	uxth.w	r3, ip
 8007c4c:	eba3 030e 	sub.w	r3, r3, lr
 8007c50:	4403      	add	r3, r0
 8007c52:	0c12      	lsrs	r2, r2, #16
 8007c54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c62:	45c1      	cmp	r9, r8
 8007c64:	f841 3b04 	str.w	r3, [r1], #4
 8007c68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c6c:	d2e6      	bcs.n	8007c3c <quorem+0xa4>
 8007c6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c76:	b922      	cbnz	r2, 8007c82 <quorem+0xea>
 8007c78:	3b04      	subs	r3, #4
 8007c7a:	429d      	cmp	r5, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	d30b      	bcc.n	8007c98 <quorem+0x100>
 8007c80:	613c      	str	r4, [r7, #16]
 8007c82:	3601      	adds	r6, #1
 8007c84:	4630      	mov	r0, r6
 8007c86:	b003      	add	sp, #12
 8007c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	3b04      	subs	r3, #4
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1cb      	bne.n	8007c2c <quorem+0x94>
 8007c94:	3c01      	subs	r4, #1
 8007c96:	e7c6      	b.n	8007c26 <quorem+0x8e>
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	d1ef      	bne.n	8007c80 <quorem+0xe8>
 8007ca0:	3c01      	subs	r4, #1
 8007ca2:	e7ea      	b.n	8007c7a <quorem+0xe2>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e7ee      	b.n	8007c86 <quorem+0xee>

08007ca8 <_dtoa_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	69c7      	ldr	r7, [r0, #28]
 8007cae:	b097      	sub	sp, #92	@ 0x5c
 8007cb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007cb4:	ec55 4b10 	vmov	r4, r5, d0
 8007cb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007cba:	9107      	str	r1, [sp, #28]
 8007cbc:	4681      	mov	r9, r0
 8007cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007cc2:	b97f      	cbnz	r7, 8007ce4 <_dtoa_r+0x3c>
 8007cc4:	2010      	movs	r0, #16
 8007cc6:	f000 fe09 	bl	80088dc <malloc>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007cd0:	b920      	cbnz	r0, 8007cdc <_dtoa_r+0x34>
 8007cd2:	4ba9      	ldr	r3, [pc, #676]	@ (8007f78 <_dtoa_r+0x2d0>)
 8007cd4:	21ef      	movs	r1, #239	@ 0xef
 8007cd6:	48a9      	ldr	r0, [pc, #676]	@ (8007f7c <_dtoa_r+0x2d4>)
 8007cd8:	f002 fc2e 	bl	800a538 <__assert_func>
 8007cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ce0:	6007      	str	r7, [r0, #0]
 8007ce2:	60c7      	str	r7, [r0, #12]
 8007ce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	b159      	cbz	r1, 8007d04 <_dtoa_r+0x5c>
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	604a      	str	r2, [r1, #4]
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4093      	lsls	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	4648      	mov	r0, r9
 8007cf8:	f000 fee6 	bl	8008ac8 <_Bfree>
 8007cfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	1e2b      	subs	r3, r5, #0
 8007d06:	bfb9      	ittee	lt
 8007d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	9305      	strlt	r3, [sp, #20]
 8007d0e:	2300      	movge	r3, #0
 8007d10:	6033      	strge	r3, [r6, #0]
 8007d12:	9f05      	ldr	r7, [sp, #20]
 8007d14:	4b9a      	ldr	r3, [pc, #616]	@ (8007f80 <_dtoa_r+0x2d8>)
 8007d16:	bfbc      	itt	lt
 8007d18:	2201      	movlt	r2, #1
 8007d1a:	6032      	strlt	r2, [r6, #0]
 8007d1c:	43bb      	bics	r3, r7
 8007d1e:	d112      	bne.n	8007d46 <_dtoa_r+0x9e>
 8007d20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d2c:	4323      	orrs	r3, r4
 8007d2e:	f000 855a 	beq.w	80087e6 <_dtoa_r+0xb3e>
 8007d32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007f94 <_dtoa_r+0x2ec>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 855c 	beq.w	80087f6 <_dtoa_r+0xb4e>
 8007d3e:	f10a 0303 	add.w	r3, sl, #3
 8007d42:	f000 bd56 	b.w	80087f2 <_dtoa_r+0xb4a>
 8007d46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	ec51 0b17 	vmov	r0, r1, d7
 8007d50:	2300      	movs	r3, #0
 8007d52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007d56:	f7f8 febf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	b158      	cbz	r0, 8007d76 <_dtoa_r+0xce>
 8007d5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d60:	2301      	movs	r3, #1
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d66:	b113      	cbz	r3, 8007d6e <_dtoa_r+0xc6>
 8007d68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d6a:	4b86      	ldr	r3, [pc, #536]	@ (8007f84 <_dtoa_r+0x2dc>)
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007f98 <_dtoa_r+0x2f0>
 8007d72:	f000 bd40 	b.w	80087f6 <_dtoa_r+0xb4e>
 8007d76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007d7a:	aa14      	add	r2, sp, #80	@ 0x50
 8007d7c:	a915      	add	r1, sp, #84	@ 0x54
 8007d7e:	4648      	mov	r0, r9
 8007d80:	f001 fa3e 	bl	8009200 <__d2b>
 8007d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d88:	9002      	str	r0, [sp, #8]
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d078      	beq.n	8007e80 <_dtoa_r+0x1d8>
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007da8:	4619      	mov	r1, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b76      	ldr	r3, [pc, #472]	@ (8007f88 <_dtoa_r+0x2e0>)
 8007dae:	f7f8 fa73 	bl	8000298 <__aeabi_dsub>
 8007db2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007f60 <_dtoa_r+0x2b8>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fc26 	bl	8000608 <__aeabi_dmul>
 8007dbc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007f68 <_dtoa_r+0x2c0>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa6b 	bl	800029c <__adddf3>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4630      	mov	r0, r6
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fbb2 	bl	8000534 <__aeabi_i2d>
 8007dd0:	a367      	add	r3, pc, #412	@ (adr r3, 8007f70 <_dtoa_r+0x2c8>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc17 	bl	8000608 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fa5b 	bl	800029c <__adddf3>
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 febd 	bl	8000b68 <__aeabi_d2iz>
 8007dee:	2200      	movs	r2, #0
 8007df0:	4607      	mov	r7, r0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fe78 	bl	8000aec <__aeabi_dcmplt>
 8007dfc:	b140      	cbz	r0, 8007e10 <_dtoa_r+0x168>
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7f8 fb98 	bl	8000534 <__aeabi_i2d>
 8007e04:	4622      	mov	r2, r4
 8007e06:	462b      	mov	r3, r5
 8007e08:	f7f8 fe66 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e0c:	b900      	cbnz	r0, 8007e10 <_dtoa_r+0x168>
 8007e0e:	3f01      	subs	r7, #1
 8007e10:	2f16      	cmp	r7, #22
 8007e12:	d852      	bhi.n	8007eba <_dtoa_r+0x212>
 8007e14:	4b5d      	ldr	r3, [pc, #372]	@ (8007f8c <_dtoa_r+0x2e4>)
 8007e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e22:	f7f8 fe63 	bl	8000aec <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d049      	beq.n	8007ebe <_dtoa_r+0x216>
 8007e2a:	3f01      	subs	r7, #1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e32:	1b9b      	subs	r3, r3, r6
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	bf45      	ittet	mi
 8007e38:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e3c:	9300      	strmi	r3, [sp, #0]
 8007e3e:	2300      	movpl	r3, #0
 8007e40:	2300      	movmi	r3, #0
 8007e42:	9206      	str	r2, [sp, #24]
 8007e44:	bf54      	ite	pl
 8007e46:	9300      	strpl	r3, [sp, #0]
 8007e48:	9306      	strmi	r3, [sp, #24]
 8007e4a:	2f00      	cmp	r7, #0
 8007e4c:	db39      	blt.n	8007ec2 <_dtoa_r+0x21a>
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	970d      	str	r7, [sp, #52]	@ 0x34
 8007e52:	443b      	add	r3, r7
 8007e54:	9306      	str	r3, [sp, #24]
 8007e56:	2300      	movs	r3, #0
 8007e58:	9308      	str	r3, [sp, #32]
 8007e5a:	9b07      	ldr	r3, [sp, #28]
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	d863      	bhi.n	8007f28 <_dtoa_r+0x280>
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	bfc4      	itt	gt
 8007e64:	3b04      	subgt	r3, #4
 8007e66:	9307      	strgt	r3, [sp, #28]
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e6e:	bfcc      	ite	gt
 8007e70:	2400      	movgt	r4, #0
 8007e72:	2401      	movle	r4, #1
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d863      	bhi.n	8007f40 <_dtoa_r+0x298>
 8007e78:	e8df f003 	tbb	[pc, r3]
 8007e7c:	2b375452 	.word	0x2b375452
 8007e80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e84:	441e      	add	r6, r3
 8007e86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	bfc1      	itttt	gt
 8007e8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e92:	409f      	lslgt	r7, r3
 8007e94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e9c:	bfd6      	itet	le
 8007e9e:	f1c3 0320 	rsble	r3, r3, #32
 8007ea2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ea6:	fa04 f003 	lslle.w	r0, r4, r3
 8007eaa:	f7f8 fb33 	bl	8000514 <__aeabi_ui2d>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eb4:	3e01      	subs	r6, #1
 8007eb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007eb8:	e776      	b.n	8007da8 <_dtoa_r+0x100>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7b7      	b.n	8007e2e <_dtoa_r+0x186>
 8007ebe:	9010      	str	r0, [sp, #64]	@ 0x40
 8007ec0:	e7b6      	b.n	8007e30 <_dtoa_r+0x188>
 8007ec2:	9b00      	ldr	r3, [sp, #0]
 8007ec4:	1bdb      	subs	r3, r3, r7
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	427b      	negs	r3, r7
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ed0:	e7c3      	b.n	8007e5a <_dtoa_r+0x1b2>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ed8:	eb07 0b03 	add.w	fp, r7, r3
 8007edc:	f10b 0301 	add.w	r3, fp, #1
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	bfb8      	it	lt
 8007ee6:	2301      	movlt	r3, #1
 8007ee8:	e006      	b.n	8007ef8 <_dtoa_r+0x250>
 8007eea:	2301      	movs	r3, #1
 8007eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd28      	ble.n	8007f46 <_dtoa_r+0x29e>
 8007ef4:	469b      	mov	fp, r3
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007efc:	2100      	movs	r1, #0
 8007efe:	2204      	movs	r2, #4
 8007f00:	f102 0514 	add.w	r5, r2, #20
 8007f04:	429d      	cmp	r5, r3
 8007f06:	d926      	bls.n	8007f56 <_dtoa_r+0x2ae>
 8007f08:	6041      	str	r1, [r0, #4]
 8007f0a:	4648      	mov	r0, r9
 8007f0c:	f000 fd9c 	bl	8008a48 <_Balloc>
 8007f10:	4682      	mov	sl, r0
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d142      	bne.n	8007f9c <_dtoa_r+0x2f4>
 8007f16:	4b1e      	ldr	r3, [pc, #120]	@ (8007f90 <_dtoa_r+0x2e8>)
 8007f18:	4602      	mov	r2, r0
 8007f1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f1e:	e6da      	b.n	8007cd6 <_dtoa_r+0x2e>
 8007f20:	2300      	movs	r3, #0
 8007f22:	e7e3      	b.n	8007eec <_dtoa_r+0x244>
 8007f24:	2300      	movs	r3, #0
 8007f26:	e7d5      	b.n	8007ed4 <_dtoa_r+0x22c>
 8007f28:	2401      	movs	r4, #1
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9307      	str	r3, [sp, #28]
 8007f2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007f30:	f04f 3bff 	mov.w	fp, #4294967295
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f3a:	2312      	movs	r3, #18
 8007f3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007f3e:	e7db      	b.n	8007ef8 <_dtoa_r+0x250>
 8007f40:	2301      	movs	r3, #1
 8007f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f44:	e7f4      	b.n	8007f30 <_dtoa_r+0x288>
 8007f46:	f04f 0b01 	mov.w	fp, #1
 8007f4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007f4e:	465b      	mov	r3, fp
 8007f50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007f54:	e7d0      	b.n	8007ef8 <_dtoa_r+0x250>
 8007f56:	3101      	adds	r1, #1
 8007f58:	0052      	lsls	r2, r2, #1
 8007f5a:	e7d1      	b.n	8007f00 <_dtoa_r+0x258>
 8007f5c:	f3af 8000 	nop.w
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800b392 	.word	0x0800b392
 8007f7c:	0800b3a9 	.word	0x0800b3a9
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800b35d 	.word	0x0800b35d
 8007f88:	3ff80000 	.word	0x3ff80000
 8007f8c:	0800b558 	.word	0x0800b558
 8007f90:	0800b401 	.word	0x0800b401
 8007f94:	0800b38e 	.word	0x0800b38e
 8007f98:	0800b35c 	.word	0x0800b35c
 8007f9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fa0:	6018      	str	r0, [r3, #0]
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	2b0e      	cmp	r3, #14
 8007fa6:	f200 80a1 	bhi.w	80080ec <_dtoa_r+0x444>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	f000 809e 	beq.w	80080ec <_dtoa_r+0x444>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	dd33      	ble.n	800801c <_dtoa_r+0x374>
 8007fb4:	4b9c      	ldr	r3, [pc, #624]	@ (8008228 <_dtoa_r+0x580>)
 8007fb6:	f007 020f 	and.w	r2, r7, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	ed93 7b00 	vldr	d7, [r3]
 8007fc2:	05f8      	lsls	r0, r7, #23
 8007fc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fcc:	d516      	bpl.n	8007ffc <_dtoa_r+0x354>
 8007fce:	4b97      	ldr	r3, [pc, #604]	@ (800822c <_dtoa_r+0x584>)
 8007fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd8:	f7f8 fc40 	bl	800085c <__aeabi_ddiv>
 8007fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe0:	f004 040f 	and.w	r4, r4, #15
 8007fe4:	2603      	movs	r6, #3
 8007fe6:	4d91      	ldr	r5, [pc, #580]	@ (800822c <_dtoa_r+0x584>)
 8007fe8:	b954      	cbnz	r4, 8008000 <_dtoa_r+0x358>
 8007fea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff2:	f7f8 fc33 	bl	800085c <__aeabi_ddiv>
 8007ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffa:	e028      	b.n	800804e <_dtoa_r+0x3a6>
 8007ffc:	2602      	movs	r6, #2
 8007ffe:	e7f2      	b.n	8007fe6 <_dtoa_r+0x33e>
 8008000:	07e1      	lsls	r1, r4, #31
 8008002:	d508      	bpl.n	8008016 <_dtoa_r+0x36e>
 8008004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800800c:	f7f8 fafc 	bl	8000608 <__aeabi_dmul>
 8008010:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008014:	3601      	adds	r6, #1
 8008016:	1064      	asrs	r4, r4, #1
 8008018:	3508      	adds	r5, #8
 800801a:	e7e5      	b.n	8007fe8 <_dtoa_r+0x340>
 800801c:	f000 80af 	beq.w	800817e <_dtoa_r+0x4d6>
 8008020:	427c      	negs	r4, r7
 8008022:	4b81      	ldr	r3, [pc, #516]	@ (8008228 <_dtoa_r+0x580>)
 8008024:	4d81      	ldr	r5, [pc, #516]	@ (800822c <_dtoa_r+0x584>)
 8008026:	f004 020f 	and.w	r2, r4, #15
 800802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008036:	f7f8 fae7 	bl	8000608 <__aeabi_dmul>
 800803a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800803e:	1124      	asrs	r4, r4, #4
 8008040:	2300      	movs	r3, #0
 8008042:	2602      	movs	r6, #2
 8008044:	2c00      	cmp	r4, #0
 8008046:	f040 808f 	bne.w	8008168 <_dtoa_r+0x4c0>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d3      	bne.n	8007ff6 <_dtoa_r+0x34e>
 800804e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008050:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8094 	beq.w	8008182 <_dtoa_r+0x4da>
 800805a:	4b75      	ldr	r3, [pc, #468]	@ (8008230 <_dtoa_r+0x588>)
 800805c:	2200      	movs	r2, #0
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd43 	bl	8000aec <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f000 808b 	beq.w	8008182 <_dtoa_r+0x4da>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8087 	beq.w	8008182 <_dtoa_r+0x4da>
 8008074:	f1bb 0f00 	cmp.w	fp, #0
 8008078:	dd34      	ble.n	80080e4 <_dtoa_r+0x43c>
 800807a:	4620      	mov	r0, r4
 800807c:	4b6d      	ldr	r3, [pc, #436]	@ (8008234 <_dtoa_r+0x58c>)
 800807e:	2200      	movs	r2, #0
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fac1 	bl	8000608 <__aeabi_dmul>
 8008086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800808a:	f107 38ff 	add.w	r8, r7, #4294967295
 800808e:	3601      	adds	r6, #1
 8008090:	465c      	mov	r4, fp
 8008092:	4630      	mov	r0, r6
 8008094:	f7f8 fa4e 	bl	8000534 <__aeabi_i2d>
 8008098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809c:	f7f8 fab4 	bl	8000608 <__aeabi_dmul>
 80080a0:	4b65      	ldr	r3, [pc, #404]	@ (8008238 <_dtoa_r+0x590>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	f7f8 f8fa 	bl	800029c <__adddf3>
 80080a8:	4605      	mov	r5, r0
 80080aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d16a      	bne.n	8008188 <_dtoa_r+0x4e0>
 80080b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b6:	4b61      	ldr	r3, [pc, #388]	@ (800823c <_dtoa_r+0x594>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	f7f8 f8ed 	bl	8000298 <__aeabi_dsub>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080c6:	462a      	mov	r2, r5
 80080c8:	4633      	mov	r3, r6
 80080ca:	f7f8 fd2d 	bl	8000b28 <__aeabi_dcmpgt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f040 8298 	bne.w	8008604 <_dtoa_r+0x95c>
 80080d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080d8:	462a      	mov	r2, r5
 80080da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080de:	f7f8 fd05 	bl	8000aec <__aeabi_dcmplt>
 80080e2:	bb38      	cbnz	r0, 8008134 <_dtoa_r+0x48c>
 80080e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80080e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f2c0 8157 	blt.w	80083a2 <_dtoa_r+0x6fa>
 80080f4:	2f0e      	cmp	r7, #14
 80080f6:	f300 8154 	bgt.w	80083a2 <_dtoa_r+0x6fa>
 80080fa:	4b4b      	ldr	r3, [pc, #300]	@ (8008228 <_dtoa_r+0x580>)
 80080fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008100:	ed93 7b00 	vldr	d7, [r3]
 8008104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008106:	2b00      	cmp	r3, #0
 8008108:	ed8d 7b00 	vstr	d7, [sp]
 800810c:	f280 80e5 	bge.w	80082da <_dtoa_r+0x632>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f300 80e1 	bgt.w	80082da <_dtoa_r+0x632>
 8008118:	d10c      	bne.n	8008134 <_dtoa_r+0x48c>
 800811a:	4b48      	ldr	r3, [pc, #288]	@ (800823c <_dtoa_r+0x594>)
 800811c:	2200      	movs	r2, #0
 800811e:	ec51 0b17 	vmov	r0, r1, d7
 8008122:	f7f8 fa71 	bl	8000608 <__aeabi_dmul>
 8008126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812a:	f7f8 fcf3 	bl	8000b14 <__aeabi_dcmpge>
 800812e:	2800      	cmp	r0, #0
 8008130:	f000 8266 	beq.w	8008600 <_dtoa_r+0x958>
 8008134:	2400      	movs	r4, #0
 8008136:	4625      	mov	r5, r4
 8008138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800813a:	4656      	mov	r6, sl
 800813c:	ea6f 0803 	mvn.w	r8, r3
 8008140:	2700      	movs	r7, #0
 8008142:	4621      	mov	r1, r4
 8008144:	4648      	mov	r0, r9
 8008146:	f000 fcbf 	bl	8008ac8 <_Bfree>
 800814a:	2d00      	cmp	r5, #0
 800814c:	f000 80bd 	beq.w	80082ca <_dtoa_r+0x622>
 8008150:	b12f      	cbz	r7, 800815e <_dtoa_r+0x4b6>
 8008152:	42af      	cmp	r7, r5
 8008154:	d003      	beq.n	800815e <_dtoa_r+0x4b6>
 8008156:	4639      	mov	r1, r7
 8008158:	4648      	mov	r0, r9
 800815a:	f000 fcb5 	bl	8008ac8 <_Bfree>
 800815e:	4629      	mov	r1, r5
 8008160:	4648      	mov	r0, r9
 8008162:	f000 fcb1 	bl	8008ac8 <_Bfree>
 8008166:	e0b0      	b.n	80082ca <_dtoa_r+0x622>
 8008168:	07e2      	lsls	r2, r4, #31
 800816a:	d505      	bpl.n	8008178 <_dtoa_r+0x4d0>
 800816c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	3601      	adds	r6, #1
 8008176:	2301      	movs	r3, #1
 8008178:	1064      	asrs	r4, r4, #1
 800817a:	3508      	adds	r5, #8
 800817c:	e762      	b.n	8008044 <_dtoa_r+0x39c>
 800817e:	2602      	movs	r6, #2
 8008180:	e765      	b.n	800804e <_dtoa_r+0x3a6>
 8008182:	9c03      	ldr	r4, [sp, #12]
 8008184:	46b8      	mov	r8, r7
 8008186:	e784      	b.n	8008092 <_dtoa_r+0x3ea>
 8008188:	4b27      	ldr	r3, [pc, #156]	@ (8008228 <_dtoa_r+0x580>)
 800818a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800818c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008194:	4454      	add	r4, sl
 8008196:	2900      	cmp	r1, #0
 8008198:	d054      	beq.n	8008244 <_dtoa_r+0x59c>
 800819a:	4929      	ldr	r1, [pc, #164]	@ (8008240 <_dtoa_r+0x598>)
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 fb5d 	bl	800085c <__aeabi_ddiv>
 80081a2:	4633      	mov	r3, r6
 80081a4:	462a      	mov	r2, r5
 80081a6:	f7f8 f877 	bl	8000298 <__aeabi_dsub>
 80081aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081ae:	4656      	mov	r6, sl
 80081b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b4:	f7f8 fcd8 	bl	8000b68 <__aeabi_d2iz>
 80081b8:	4605      	mov	r5, r0
 80081ba:	f7f8 f9bb 	bl	8000534 <__aeabi_i2d>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081c6:	f7f8 f867 	bl	8000298 <__aeabi_dsub>
 80081ca:	3530      	adds	r5, #48	@ 0x30
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081d4:	f806 5b01 	strb.w	r5, [r6], #1
 80081d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081dc:	f7f8 fc86 	bl	8000aec <__aeabi_dcmplt>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d172      	bne.n	80082ca <_dtoa_r+0x622>
 80081e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e8:	4911      	ldr	r1, [pc, #68]	@ (8008230 <_dtoa_r+0x588>)
 80081ea:	2000      	movs	r0, #0
 80081ec:	f7f8 f854 	bl	8000298 <__aeabi_dsub>
 80081f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081f4:	f7f8 fc7a 	bl	8000aec <__aeabi_dcmplt>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	f040 80b4 	bne.w	8008366 <_dtoa_r+0x6be>
 80081fe:	42a6      	cmp	r6, r4
 8008200:	f43f af70 	beq.w	80080e4 <_dtoa_r+0x43c>
 8008204:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008208:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <_dtoa_r+0x58c>)
 800820a:	2200      	movs	r2, #0
 800820c:	f7f8 f9fc 	bl	8000608 <__aeabi_dmul>
 8008210:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <_dtoa_r+0x58c>)
 8008212:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008216:	2200      	movs	r2, #0
 8008218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800821c:	f7f8 f9f4 	bl	8000608 <__aeabi_dmul>
 8008220:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008224:	e7c4      	b.n	80081b0 <_dtoa_r+0x508>
 8008226:	bf00      	nop
 8008228:	0800b558 	.word	0x0800b558
 800822c:	0800b530 	.word	0x0800b530
 8008230:	3ff00000 	.word	0x3ff00000
 8008234:	40240000 	.word	0x40240000
 8008238:	401c0000 	.word	0x401c0000
 800823c:	40140000 	.word	0x40140000
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	4631      	mov	r1, r6
 8008246:	4628      	mov	r0, r5
 8008248:	f7f8 f9de 	bl	8000608 <__aeabi_dmul>
 800824c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008250:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008252:	4656      	mov	r6, sl
 8008254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008258:	f7f8 fc86 	bl	8000b68 <__aeabi_d2iz>
 800825c:	4605      	mov	r5, r0
 800825e:	f7f8 f969 	bl	8000534 <__aeabi_i2d>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800826a:	f7f8 f815 	bl	8000298 <__aeabi_dsub>
 800826e:	3530      	adds	r5, #48	@ 0x30
 8008270:	f806 5b01 	strb.w	r5, [r6], #1
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	42a6      	cmp	r6, r4
 800827a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	d124      	bne.n	80082ce <_dtoa_r+0x626>
 8008284:	4baf      	ldr	r3, [pc, #700]	@ (8008544 <_dtoa_r+0x89c>)
 8008286:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800828a:	f7f8 f807 	bl	800029c <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008296:	f7f8 fc47 	bl	8000b28 <__aeabi_dcmpgt>
 800829a:	2800      	cmp	r0, #0
 800829c:	d163      	bne.n	8008366 <_dtoa_r+0x6be>
 800829e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082a2:	49a8      	ldr	r1, [pc, #672]	@ (8008544 <_dtoa_r+0x89c>)
 80082a4:	2000      	movs	r0, #0
 80082a6:	f7f7 fff7 	bl	8000298 <__aeabi_dsub>
 80082aa:	4602      	mov	r2, r0
 80082ac:	460b      	mov	r3, r1
 80082ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b2:	f7f8 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	f43f af14 	beq.w	80080e4 <_dtoa_r+0x43c>
 80082bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082be:	1e73      	subs	r3, r6, #1
 80082c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082c6:	2b30      	cmp	r3, #48	@ 0x30
 80082c8:	d0f8      	beq.n	80082bc <_dtoa_r+0x614>
 80082ca:	4647      	mov	r7, r8
 80082cc:	e03b      	b.n	8008346 <_dtoa_r+0x69e>
 80082ce:	4b9e      	ldr	r3, [pc, #632]	@ (8008548 <_dtoa_r+0x8a0>)
 80082d0:	f7f8 f99a 	bl	8000608 <__aeabi_dmul>
 80082d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d8:	e7bc      	b.n	8008254 <_dtoa_r+0x5ac>
 80082da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80082de:	4656      	mov	r6, sl
 80082e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fab8 	bl	800085c <__aeabi_ddiv>
 80082ec:	f7f8 fc3c 	bl	8000b68 <__aeabi_d2iz>
 80082f0:	4680      	mov	r8, r0
 80082f2:	f7f8 f91f 	bl	8000534 <__aeabi_i2d>
 80082f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fa:	f7f8 f985 	bl	8000608 <__aeabi_dmul>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800830a:	f7f7 ffc5 	bl	8000298 <__aeabi_dsub>
 800830e:	f806 4b01 	strb.w	r4, [r6], #1
 8008312:	9d03      	ldr	r5, [sp, #12]
 8008314:	eba6 040a 	sub.w	r4, r6, sl
 8008318:	42a5      	cmp	r5, r4
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	d133      	bne.n	8008388 <_dtoa_r+0x6e0>
 8008320:	f7f7 ffbc 	bl	800029c <__adddf3>
 8008324:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008328:	4604      	mov	r4, r0
 800832a:	460d      	mov	r5, r1
 800832c:	f7f8 fbfc 	bl	8000b28 <__aeabi_dcmpgt>
 8008330:	b9c0      	cbnz	r0, 8008364 <_dtoa_r+0x6bc>
 8008332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f8 fbcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800833e:	b110      	cbz	r0, 8008346 <_dtoa_r+0x69e>
 8008340:	f018 0f01 	tst.w	r8, #1
 8008344:	d10e      	bne.n	8008364 <_dtoa_r+0x6bc>
 8008346:	9902      	ldr	r1, [sp, #8]
 8008348:	4648      	mov	r0, r9
 800834a:	f000 fbbd 	bl	8008ac8 <_Bfree>
 800834e:	2300      	movs	r3, #0
 8008350:	7033      	strb	r3, [r6, #0]
 8008352:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008354:	3701      	adds	r7, #1
 8008356:	601f      	str	r7, [r3, #0]
 8008358:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 824b 	beq.w	80087f6 <_dtoa_r+0xb4e>
 8008360:	601e      	str	r6, [r3, #0]
 8008362:	e248      	b.n	80087f6 <_dtoa_r+0xb4e>
 8008364:	46b8      	mov	r8, r7
 8008366:	4633      	mov	r3, r6
 8008368:	461e      	mov	r6, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a39      	cmp	r2, #57	@ 0x39
 8008370:	d106      	bne.n	8008380 <_dtoa_r+0x6d8>
 8008372:	459a      	cmp	sl, r3
 8008374:	d1f8      	bne.n	8008368 <_dtoa_r+0x6c0>
 8008376:	2230      	movs	r2, #48	@ 0x30
 8008378:	f108 0801 	add.w	r8, r8, #1
 800837c:	f88a 2000 	strb.w	r2, [sl]
 8008380:	781a      	ldrb	r2, [r3, #0]
 8008382:	3201      	adds	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e7a0      	b.n	80082ca <_dtoa_r+0x622>
 8008388:	4b6f      	ldr	r3, [pc, #444]	@ (8008548 <_dtoa_r+0x8a0>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f8 f93c 	bl	8000608 <__aeabi_dmul>
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	4604      	mov	r4, r0
 8008396:	460d      	mov	r5, r1
 8008398:	f7f8 fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800839c:	2800      	cmp	r0, #0
 800839e:	d09f      	beq.n	80082e0 <_dtoa_r+0x638>
 80083a0:	e7d1      	b.n	8008346 <_dtoa_r+0x69e>
 80083a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	f000 80ea 	beq.w	800857e <_dtoa_r+0x8d6>
 80083aa:	9a07      	ldr	r2, [sp, #28]
 80083ac:	2a01      	cmp	r2, #1
 80083ae:	f300 80cd 	bgt.w	800854c <_dtoa_r+0x8a4>
 80083b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	f000 80c1 	beq.w	800853c <_dtoa_r+0x894>
 80083ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083be:	9c08      	ldr	r4, [sp, #32]
 80083c0:	9e00      	ldr	r6, [sp, #0]
 80083c2:	9a00      	ldr	r2, [sp, #0]
 80083c4:	441a      	add	r2, r3
 80083c6:	9200      	str	r2, [sp, #0]
 80083c8:	9a06      	ldr	r2, [sp, #24]
 80083ca:	2101      	movs	r1, #1
 80083cc:	441a      	add	r2, r3
 80083ce:	4648      	mov	r0, r9
 80083d0:	9206      	str	r2, [sp, #24]
 80083d2:	f000 fc77 	bl	8008cc4 <__i2b>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b166      	cbz	r6, 80083f4 <_dtoa_r+0x74c>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd09      	ble.n	80083f4 <_dtoa_r+0x74c>
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	9a00      	ldr	r2, [sp, #0]
 80083e4:	bfa8      	it	ge
 80083e6:	4633      	movge	r3, r6
 80083e8:	1ad2      	subs	r2, r2, r3
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	9a06      	ldr	r2, [sp, #24]
 80083ee:	1af6      	subs	r6, r6, r3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9306      	str	r3, [sp, #24]
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	b30b      	cbz	r3, 800843c <_dtoa_r+0x794>
 80083f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80c6 	beq.w	800858c <_dtoa_r+0x8e4>
 8008400:	2c00      	cmp	r4, #0
 8008402:	f000 80c0 	beq.w	8008586 <_dtoa_r+0x8de>
 8008406:	4629      	mov	r1, r5
 8008408:	4622      	mov	r2, r4
 800840a:	4648      	mov	r0, r9
 800840c:	f000 fd12 	bl	8008e34 <__pow5mult>
 8008410:	9a02      	ldr	r2, [sp, #8]
 8008412:	4601      	mov	r1, r0
 8008414:	4605      	mov	r5, r0
 8008416:	4648      	mov	r0, r9
 8008418:	f000 fc6a 	bl	8008cf0 <__multiply>
 800841c:	9902      	ldr	r1, [sp, #8]
 800841e:	4680      	mov	r8, r0
 8008420:	4648      	mov	r0, r9
 8008422:	f000 fb51 	bl	8008ac8 <_Bfree>
 8008426:	9b08      	ldr	r3, [sp, #32]
 8008428:	1b1b      	subs	r3, r3, r4
 800842a:	9308      	str	r3, [sp, #32]
 800842c:	f000 80b1 	beq.w	8008592 <_dtoa_r+0x8ea>
 8008430:	9a08      	ldr	r2, [sp, #32]
 8008432:	4641      	mov	r1, r8
 8008434:	4648      	mov	r0, r9
 8008436:	f000 fcfd 	bl	8008e34 <__pow5mult>
 800843a:	9002      	str	r0, [sp, #8]
 800843c:	2101      	movs	r1, #1
 800843e:	4648      	mov	r0, r9
 8008440:	f000 fc40 	bl	8008cc4 <__i2b>
 8008444:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008446:	4604      	mov	r4, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 81d8 	beq.w	80087fe <_dtoa_r+0xb56>
 800844e:	461a      	mov	r2, r3
 8008450:	4601      	mov	r1, r0
 8008452:	4648      	mov	r0, r9
 8008454:	f000 fcee 	bl	8008e34 <__pow5mult>
 8008458:	9b07      	ldr	r3, [sp, #28]
 800845a:	2b01      	cmp	r3, #1
 800845c:	4604      	mov	r4, r0
 800845e:	f300 809f 	bgt.w	80085a0 <_dtoa_r+0x8f8>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8097 	bne.w	8008598 <_dtoa_r+0x8f0>
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 8093 	bne.w	800859c <_dtoa_r+0x8f4>
 8008476:	9b05      	ldr	r3, [sp, #20]
 8008478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	b133      	cbz	r3, 8008490 <_dtoa_r+0x7e8>
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	3301      	adds	r3, #1
 800848c:	9306      	str	r3, [sp, #24]
 800848e:	2301      	movs	r3, #1
 8008490:	9308      	str	r3, [sp, #32]
 8008492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 81b8 	beq.w	800880a <_dtoa_r+0xb62>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084a0:	6918      	ldr	r0, [r3, #16]
 80084a2:	f000 fbc3 	bl	8008c2c <__hi0bits>
 80084a6:	f1c0 0020 	rsb	r0, r0, #32
 80084aa:	9b06      	ldr	r3, [sp, #24]
 80084ac:	4418      	add	r0, r3
 80084ae:	f010 001f 	ands.w	r0, r0, #31
 80084b2:	f000 8082 	beq.w	80085ba <_dtoa_r+0x912>
 80084b6:	f1c0 0320 	rsb	r3, r0, #32
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	dd73      	ble.n	80085a6 <_dtoa_r+0x8fe>
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	f1c0 001c 	rsb	r0, r0, #28
 80084c4:	4403      	add	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	4403      	add	r3, r0
 80084cc:	4406      	add	r6, r0
 80084ce:	9306      	str	r3, [sp, #24]
 80084d0:	9b00      	ldr	r3, [sp, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd05      	ble.n	80084e2 <_dtoa_r+0x83a>
 80084d6:	9902      	ldr	r1, [sp, #8]
 80084d8:	461a      	mov	r2, r3
 80084da:	4648      	mov	r0, r9
 80084dc:	f000 fd04 	bl	8008ee8 <__lshift>
 80084e0:	9002      	str	r0, [sp, #8]
 80084e2:	9b06      	ldr	r3, [sp, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd05      	ble.n	80084f4 <_dtoa_r+0x84c>
 80084e8:	4621      	mov	r1, r4
 80084ea:	461a      	mov	r2, r3
 80084ec:	4648      	mov	r0, r9
 80084ee:	f000 fcfb 	bl	8008ee8 <__lshift>
 80084f2:	4604      	mov	r4, r0
 80084f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d061      	beq.n	80085be <_dtoa_r+0x916>
 80084fa:	9802      	ldr	r0, [sp, #8]
 80084fc:	4621      	mov	r1, r4
 80084fe:	f000 fd5f 	bl	8008fc0 <__mcmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	da5b      	bge.n	80085be <_dtoa_r+0x916>
 8008506:	2300      	movs	r3, #0
 8008508:	9902      	ldr	r1, [sp, #8]
 800850a:	220a      	movs	r2, #10
 800850c:	4648      	mov	r0, r9
 800850e:	f000 fafd 	bl	8008b0c <__multadd>
 8008512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008514:	9002      	str	r0, [sp, #8]
 8008516:	f107 38ff 	add.w	r8, r7, #4294967295
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8177 	beq.w	800880e <_dtoa_r+0xb66>
 8008520:	4629      	mov	r1, r5
 8008522:	2300      	movs	r3, #0
 8008524:	220a      	movs	r2, #10
 8008526:	4648      	mov	r0, r9
 8008528:	f000 faf0 	bl	8008b0c <__multadd>
 800852c:	f1bb 0f00 	cmp.w	fp, #0
 8008530:	4605      	mov	r5, r0
 8008532:	dc6f      	bgt.n	8008614 <_dtoa_r+0x96c>
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	2b02      	cmp	r3, #2
 8008538:	dc49      	bgt.n	80085ce <_dtoa_r+0x926>
 800853a:	e06b      	b.n	8008614 <_dtoa_r+0x96c>
 800853c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800853e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008542:	e73c      	b.n	80083be <_dtoa_r+0x716>
 8008544:	3fe00000 	.word	0x3fe00000
 8008548:	40240000 	.word	0x40240000
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	1e5c      	subs	r4, r3, #1
 8008550:	9b08      	ldr	r3, [sp, #32]
 8008552:	42a3      	cmp	r3, r4
 8008554:	db09      	blt.n	800856a <_dtoa_r+0x8c2>
 8008556:	1b1c      	subs	r4, r3, r4
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f6bf af30 	bge.w	80083c0 <_dtoa_r+0x718>
 8008560:	9b00      	ldr	r3, [sp, #0]
 8008562:	9a03      	ldr	r2, [sp, #12]
 8008564:	1a9e      	subs	r6, r3, r2
 8008566:	2300      	movs	r3, #0
 8008568:	e72b      	b.n	80083c2 <_dtoa_r+0x71a>
 800856a:	9b08      	ldr	r3, [sp, #32]
 800856c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800856e:	9408      	str	r4, [sp, #32]
 8008570:	1ae3      	subs	r3, r4, r3
 8008572:	441a      	add	r2, r3
 8008574:	9e00      	ldr	r6, [sp, #0]
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	920d      	str	r2, [sp, #52]	@ 0x34
 800857a:	2400      	movs	r4, #0
 800857c:	e721      	b.n	80083c2 <_dtoa_r+0x71a>
 800857e:	9c08      	ldr	r4, [sp, #32]
 8008580:	9e00      	ldr	r6, [sp, #0]
 8008582:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008584:	e728      	b.n	80083d8 <_dtoa_r+0x730>
 8008586:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800858a:	e751      	b.n	8008430 <_dtoa_r+0x788>
 800858c:	9a08      	ldr	r2, [sp, #32]
 800858e:	9902      	ldr	r1, [sp, #8]
 8008590:	e750      	b.n	8008434 <_dtoa_r+0x78c>
 8008592:	f8cd 8008 	str.w	r8, [sp, #8]
 8008596:	e751      	b.n	800843c <_dtoa_r+0x794>
 8008598:	2300      	movs	r3, #0
 800859a:	e779      	b.n	8008490 <_dtoa_r+0x7e8>
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	e777      	b.n	8008490 <_dtoa_r+0x7e8>
 80085a0:	2300      	movs	r3, #0
 80085a2:	9308      	str	r3, [sp, #32]
 80085a4:	e779      	b.n	800849a <_dtoa_r+0x7f2>
 80085a6:	d093      	beq.n	80084d0 <_dtoa_r+0x828>
 80085a8:	9a00      	ldr	r2, [sp, #0]
 80085aa:	331c      	adds	r3, #28
 80085ac:	441a      	add	r2, r3
 80085ae:	9200      	str	r2, [sp, #0]
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	441a      	add	r2, r3
 80085b4:	441e      	add	r6, r3
 80085b6:	9206      	str	r2, [sp, #24]
 80085b8:	e78a      	b.n	80084d0 <_dtoa_r+0x828>
 80085ba:	4603      	mov	r3, r0
 80085bc:	e7f4      	b.n	80085a8 <_dtoa_r+0x900>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	46b8      	mov	r8, r7
 80085c4:	dc20      	bgt.n	8008608 <_dtoa_r+0x960>
 80085c6:	469b      	mov	fp, r3
 80085c8:	9b07      	ldr	r3, [sp, #28]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	dd1e      	ble.n	800860c <_dtoa_r+0x964>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	f47f adb1 	bne.w	8008138 <_dtoa_r+0x490>
 80085d6:	4621      	mov	r1, r4
 80085d8:	465b      	mov	r3, fp
 80085da:	2205      	movs	r2, #5
 80085dc:	4648      	mov	r0, r9
 80085de:	f000 fa95 	bl	8008b0c <__multadd>
 80085e2:	4601      	mov	r1, r0
 80085e4:	4604      	mov	r4, r0
 80085e6:	9802      	ldr	r0, [sp, #8]
 80085e8:	f000 fcea 	bl	8008fc0 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f77f ada3 	ble.w	8008138 <_dtoa_r+0x490>
 80085f2:	4656      	mov	r6, sl
 80085f4:	2331      	movs	r3, #49	@ 0x31
 80085f6:	f806 3b01 	strb.w	r3, [r6], #1
 80085fa:	f108 0801 	add.w	r8, r8, #1
 80085fe:	e59f      	b.n	8008140 <_dtoa_r+0x498>
 8008600:	9c03      	ldr	r4, [sp, #12]
 8008602:	46b8      	mov	r8, r7
 8008604:	4625      	mov	r5, r4
 8008606:	e7f4      	b.n	80085f2 <_dtoa_r+0x94a>
 8008608:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800860c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8101 	beq.w	8008816 <_dtoa_r+0xb6e>
 8008614:	2e00      	cmp	r6, #0
 8008616:	dd05      	ble.n	8008624 <_dtoa_r+0x97c>
 8008618:	4629      	mov	r1, r5
 800861a:	4632      	mov	r2, r6
 800861c:	4648      	mov	r0, r9
 800861e:	f000 fc63 	bl	8008ee8 <__lshift>
 8008622:	4605      	mov	r5, r0
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d05c      	beq.n	80086e4 <_dtoa_r+0xa3c>
 800862a:	6869      	ldr	r1, [r5, #4]
 800862c:	4648      	mov	r0, r9
 800862e:	f000 fa0b 	bl	8008a48 <_Balloc>
 8008632:	4606      	mov	r6, r0
 8008634:	b928      	cbnz	r0, 8008642 <_dtoa_r+0x99a>
 8008636:	4b82      	ldr	r3, [pc, #520]	@ (8008840 <_dtoa_r+0xb98>)
 8008638:	4602      	mov	r2, r0
 800863a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800863e:	f7ff bb4a 	b.w	8007cd6 <_dtoa_r+0x2e>
 8008642:	692a      	ldr	r2, [r5, #16]
 8008644:	3202      	adds	r2, #2
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	f105 010c 	add.w	r1, r5, #12
 800864c:	300c      	adds	r0, #12
 800864e:	f7ff fa8e 	bl	8007b6e <memcpy>
 8008652:	2201      	movs	r2, #1
 8008654:	4631      	mov	r1, r6
 8008656:	4648      	mov	r0, r9
 8008658:	f000 fc46 	bl	8008ee8 <__lshift>
 800865c:	f10a 0301 	add.w	r3, sl, #1
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	eb0a 030b 	add.w	r3, sl, fp
 8008666:	9308      	str	r3, [sp, #32]
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	462f      	mov	r7, r5
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	4605      	mov	r5, r0
 8008674:	9b00      	ldr	r3, [sp, #0]
 8008676:	9802      	ldr	r0, [sp, #8]
 8008678:	4621      	mov	r1, r4
 800867a:	f103 3bff 	add.w	fp, r3, #4294967295
 800867e:	f7ff fa8b 	bl	8007b98 <quorem>
 8008682:	4603      	mov	r3, r0
 8008684:	3330      	adds	r3, #48	@ 0x30
 8008686:	9003      	str	r0, [sp, #12]
 8008688:	4639      	mov	r1, r7
 800868a:	9802      	ldr	r0, [sp, #8]
 800868c:	9309      	str	r3, [sp, #36]	@ 0x24
 800868e:	f000 fc97 	bl	8008fc0 <__mcmp>
 8008692:	462a      	mov	r2, r5
 8008694:	9004      	str	r0, [sp, #16]
 8008696:	4621      	mov	r1, r4
 8008698:	4648      	mov	r0, r9
 800869a:	f000 fcad 	bl	8008ff8 <__mdiff>
 800869e:	68c2      	ldr	r2, [r0, #12]
 80086a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a2:	4606      	mov	r6, r0
 80086a4:	bb02      	cbnz	r2, 80086e8 <_dtoa_r+0xa40>
 80086a6:	4601      	mov	r1, r0
 80086a8:	9802      	ldr	r0, [sp, #8]
 80086aa:	f000 fc89 	bl	8008fc0 <__mcmp>
 80086ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b0:	4602      	mov	r2, r0
 80086b2:	4631      	mov	r1, r6
 80086b4:	4648      	mov	r0, r9
 80086b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80086b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ba:	f000 fa05 	bl	8008ac8 <_Bfree>
 80086be:	9b07      	ldr	r3, [sp, #28]
 80086c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086c2:	9e00      	ldr	r6, [sp, #0]
 80086c4:	ea42 0103 	orr.w	r1, r2, r3
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	4319      	orrs	r1, r3
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	d10d      	bne.n	80086ec <_dtoa_r+0xa44>
 80086d0:	2b39      	cmp	r3, #57	@ 0x39
 80086d2:	d027      	beq.n	8008724 <_dtoa_r+0xa7c>
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	dd01      	ble.n	80086de <_dtoa_r+0xa36>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	3331      	adds	r3, #49	@ 0x31
 80086de:	f88b 3000 	strb.w	r3, [fp]
 80086e2:	e52e      	b.n	8008142 <_dtoa_r+0x49a>
 80086e4:	4628      	mov	r0, r5
 80086e6:	e7b9      	b.n	800865c <_dtoa_r+0x9b4>
 80086e8:	2201      	movs	r2, #1
 80086ea:	e7e2      	b.n	80086b2 <_dtoa_r+0xa0a>
 80086ec:	9904      	ldr	r1, [sp, #16]
 80086ee:	2900      	cmp	r1, #0
 80086f0:	db04      	blt.n	80086fc <_dtoa_r+0xa54>
 80086f2:	9807      	ldr	r0, [sp, #28]
 80086f4:	4301      	orrs	r1, r0
 80086f6:	9806      	ldr	r0, [sp, #24]
 80086f8:	4301      	orrs	r1, r0
 80086fa:	d120      	bne.n	800873e <_dtoa_r+0xa96>
 80086fc:	2a00      	cmp	r2, #0
 80086fe:	ddee      	ble.n	80086de <_dtoa_r+0xa36>
 8008700:	9902      	ldr	r1, [sp, #8]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	4648      	mov	r0, r9
 8008708:	f000 fbee 	bl	8008ee8 <__lshift>
 800870c:	4621      	mov	r1, r4
 800870e:	9002      	str	r0, [sp, #8]
 8008710:	f000 fc56 	bl	8008fc0 <__mcmp>
 8008714:	2800      	cmp	r0, #0
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	dc02      	bgt.n	8008720 <_dtoa_r+0xa78>
 800871a:	d1e0      	bne.n	80086de <_dtoa_r+0xa36>
 800871c:	07da      	lsls	r2, r3, #31
 800871e:	d5de      	bpl.n	80086de <_dtoa_r+0xa36>
 8008720:	2b39      	cmp	r3, #57	@ 0x39
 8008722:	d1da      	bne.n	80086da <_dtoa_r+0xa32>
 8008724:	2339      	movs	r3, #57	@ 0x39
 8008726:	f88b 3000 	strb.w	r3, [fp]
 800872a:	4633      	mov	r3, r6
 800872c:	461e      	mov	r6, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008734:	2a39      	cmp	r2, #57	@ 0x39
 8008736:	d04e      	beq.n	80087d6 <_dtoa_r+0xb2e>
 8008738:	3201      	adds	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e501      	b.n	8008142 <_dtoa_r+0x49a>
 800873e:	2a00      	cmp	r2, #0
 8008740:	dd03      	ble.n	800874a <_dtoa_r+0xaa2>
 8008742:	2b39      	cmp	r3, #57	@ 0x39
 8008744:	d0ee      	beq.n	8008724 <_dtoa_r+0xa7c>
 8008746:	3301      	adds	r3, #1
 8008748:	e7c9      	b.n	80086de <_dtoa_r+0xa36>
 800874a:	9a00      	ldr	r2, [sp, #0]
 800874c:	9908      	ldr	r1, [sp, #32]
 800874e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008752:	428a      	cmp	r2, r1
 8008754:	d028      	beq.n	80087a8 <_dtoa_r+0xb00>
 8008756:	9902      	ldr	r1, [sp, #8]
 8008758:	2300      	movs	r3, #0
 800875a:	220a      	movs	r2, #10
 800875c:	4648      	mov	r0, r9
 800875e:	f000 f9d5 	bl	8008b0c <__multadd>
 8008762:	42af      	cmp	r7, r5
 8008764:	9002      	str	r0, [sp, #8]
 8008766:	f04f 0300 	mov.w	r3, #0
 800876a:	f04f 020a 	mov.w	r2, #10
 800876e:	4639      	mov	r1, r7
 8008770:	4648      	mov	r0, r9
 8008772:	d107      	bne.n	8008784 <_dtoa_r+0xadc>
 8008774:	f000 f9ca 	bl	8008b0c <__multadd>
 8008778:	4607      	mov	r7, r0
 800877a:	4605      	mov	r5, r0
 800877c:	9b00      	ldr	r3, [sp, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	e777      	b.n	8008674 <_dtoa_r+0x9cc>
 8008784:	f000 f9c2 	bl	8008b0c <__multadd>
 8008788:	4629      	mov	r1, r5
 800878a:	4607      	mov	r7, r0
 800878c:	2300      	movs	r3, #0
 800878e:	220a      	movs	r2, #10
 8008790:	4648      	mov	r0, r9
 8008792:	f000 f9bb 	bl	8008b0c <__multadd>
 8008796:	4605      	mov	r5, r0
 8008798:	e7f0      	b.n	800877c <_dtoa_r+0xad4>
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	bfcc      	ite	gt
 80087a0:	465e      	movgt	r6, fp
 80087a2:	2601      	movle	r6, #1
 80087a4:	4456      	add	r6, sl
 80087a6:	2700      	movs	r7, #0
 80087a8:	9902      	ldr	r1, [sp, #8]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	2201      	movs	r2, #1
 80087ae:	4648      	mov	r0, r9
 80087b0:	f000 fb9a 	bl	8008ee8 <__lshift>
 80087b4:	4621      	mov	r1, r4
 80087b6:	9002      	str	r0, [sp, #8]
 80087b8:	f000 fc02 	bl	8008fc0 <__mcmp>
 80087bc:	2800      	cmp	r0, #0
 80087be:	dcb4      	bgt.n	800872a <_dtoa_r+0xa82>
 80087c0:	d102      	bne.n	80087c8 <_dtoa_r+0xb20>
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	07db      	lsls	r3, r3, #31
 80087c6:	d4b0      	bmi.n	800872a <_dtoa_r+0xa82>
 80087c8:	4633      	mov	r3, r6
 80087ca:	461e      	mov	r6, r3
 80087cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087d0:	2a30      	cmp	r2, #48	@ 0x30
 80087d2:	d0fa      	beq.n	80087ca <_dtoa_r+0xb22>
 80087d4:	e4b5      	b.n	8008142 <_dtoa_r+0x49a>
 80087d6:	459a      	cmp	sl, r3
 80087d8:	d1a8      	bne.n	800872c <_dtoa_r+0xa84>
 80087da:	2331      	movs	r3, #49	@ 0x31
 80087dc:	f108 0801 	add.w	r8, r8, #1
 80087e0:	f88a 3000 	strb.w	r3, [sl]
 80087e4:	e4ad      	b.n	8008142 <_dtoa_r+0x49a>
 80087e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008844 <_dtoa_r+0xb9c>
 80087ec:	b11b      	cbz	r3, 80087f6 <_dtoa_r+0xb4e>
 80087ee:	f10a 0308 	add.w	r3, sl, #8
 80087f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	4650      	mov	r0, sl
 80087f8:	b017      	add	sp, #92	@ 0x5c
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	9b07      	ldr	r3, [sp, #28]
 8008800:	2b01      	cmp	r3, #1
 8008802:	f77f ae2e 	ble.w	8008462 <_dtoa_r+0x7ba>
 8008806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008808:	9308      	str	r3, [sp, #32]
 800880a:	2001      	movs	r0, #1
 800880c:	e64d      	b.n	80084aa <_dtoa_r+0x802>
 800880e:	f1bb 0f00 	cmp.w	fp, #0
 8008812:	f77f aed9 	ble.w	80085c8 <_dtoa_r+0x920>
 8008816:	4656      	mov	r6, sl
 8008818:	9802      	ldr	r0, [sp, #8]
 800881a:	4621      	mov	r1, r4
 800881c:	f7ff f9bc 	bl	8007b98 <quorem>
 8008820:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008824:	f806 3b01 	strb.w	r3, [r6], #1
 8008828:	eba6 020a 	sub.w	r2, r6, sl
 800882c:	4593      	cmp	fp, r2
 800882e:	ddb4      	ble.n	800879a <_dtoa_r+0xaf2>
 8008830:	9902      	ldr	r1, [sp, #8]
 8008832:	2300      	movs	r3, #0
 8008834:	220a      	movs	r2, #10
 8008836:	4648      	mov	r0, r9
 8008838:	f000 f968 	bl	8008b0c <__multadd>
 800883c:	9002      	str	r0, [sp, #8]
 800883e:	e7eb      	b.n	8008818 <_dtoa_r+0xb70>
 8008840:	0800b401 	.word	0x0800b401
 8008844:	0800b385 	.word	0x0800b385

08008848 <_free_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4605      	mov	r5, r0
 800884c:	2900      	cmp	r1, #0
 800884e:	d041      	beq.n	80088d4 <_free_r+0x8c>
 8008850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008854:	1f0c      	subs	r4, r1, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfb8      	it	lt
 800885a:	18e4      	addlt	r4, r4, r3
 800885c:	f000 f8e8 	bl	8008a30 <__malloc_lock>
 8008860:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <_free_r+0x90>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x2c>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	4628      	mov	r0, r5
 800886c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008870:	f000 b8e4 	b.w	8008a3c <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x42>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1809      	addeq	r1, r1, r0
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x1e>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x4c>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x42>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1850      	adds	r0, r2, r1
 8008898:	42a0      	cmp	r0, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x6c>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	4401      	add	r1, r0
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	4283      	cmp	r3, r0
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x22>
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	4408      	add	r0, r1
 80088b0:	6010      	str	r0, [r2, #0]
 80088b2:	e7da      	b.n	800886a <_free_r+0x22>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x74>
 80088b6:	230c      	movs	r3, #12
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x22>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	1821      	adds	r1, r4, r0
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1809      	addeq	r1, r1, r0
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7ca      	b.n	800886a <_free_r+0x22>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	bf00      	nop
 80088d8:	20000698 	.word	0x20000698

080088dc <malloc>:
 80088dc:	4b02      	ldr	r3, [pc, #8]	@ (80088e8 <malloc+0xc>)
 80088de:	4601      	mov	r1, r0
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	f000 b825 	b.w	8008930 <_malloc_r>
 80088e6:	bf00      	nop
 80088e8:	200000f4 	.word	0x200000f4

080088ec <sbrk_aligned>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4e0f      	ldr	r6, [pc, #60]	@ (800892c <sbrk_aligned+0x40>)
 80088f0:	460c      	mov	r4, r1
 80088f2:	6831      	ldr	r1, [r6, #0]
 80088f4:	4605      	mov	r5, r0
 80088f6:	b911      	cbnz	r1, 80088fe <sbrk_aligned+0x12>
 80088f8:	f001 fe04 	bl	800a504 <_sbrk_r>
 80088fc:	6030      	str	r0, [r6, #0]
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f001 fdff 	bl	800a504 <_sbrk_r>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d103      	bne.n	8008912 <sbrk_aligned+0x26>
 800890a:	f04f 34ff 	mov.w	r4, #4294967295
 800890e:	4620      	mov	r0, r4
 8008910:	bd70      	pop	{r4, r5, r6, pc}
 8008912:	1cc4      	adds	r4, r0, #3
 8008914:	f024 0403 	bic.w	r4, r4, #3
 8008918:	42a0      	cmp	r0, r4
 800891a:	d0f8      	beq.n	800890e <sbrk_aligned+0x22>
 800891c:	1a21      	subs	r1, r4, r0
 800891e:	4628      	mov	r0, r5
 8008920:	f001 fdf0 	bl	800a504 <_sbrk_r>
 8008924:	3001      	adds	r0, #1
 8008926:	d1f2      	bne.n	800890e <sbrk_aligned+0x22>
 8008928:	e7ef      	b.n	800890a <sbrk_aligned+0x1e>
 800892a:	bf00      	nop
 800892c:	20000694 	.word	0x20000694

08008930 <_malloc_r>:
 8008930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008934:	1ccd      	adds	r5, r1, #3
 8008936:	f025 0503 	bic.w	r5, r5, #3
 800893a:	3508      	adds	r5, #8
 800893c:	2d0c      	cmp	r5, #12
 800893e:	bf38      	it	cc
 8008940:	250c      	movcc	r5, #12
 8008942:	2d00      	cmp	r5, #0
 8008944:	4606      	mov	r6, r0
 8008946:	db01      	blt.n	800894c <_malloc_r+0x1c>
 8008948:	42a9      	cmp	r1, r5
 800894a:	d904      	bls.n	8008956 <_malloc_r+0x26>
 800894c:	230c      	movs	r3, #12
 800894e:	6033      	str	r3, [r6, #0]
 8008950:	2000      	movs	r0, #0
 8008952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008956:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a2c <_malloc_r+0xfc>
 800895a:	f000 f869 	bl	8008a30 <__malloc_lock>
 800895e:	f8d8 3000 	ldr.w	r3, [r8]
 8008962:	461c      	mov	r4, r3
 8008964:	bb44      	cbnz	r4, 80089b8 <_malloc_r+0x88>
 8008966:	4629      	mov	r1, r5
 8008968:	4630      	mov	r0, r6
 800896a:	f7ff ffbf 	bl	80088ec <sbrk_aligned>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	4604      	mov	r4, r0
 8008972:	d158      	bne.n	8008a26 <_malloc_r+0xf6>
 8008974:	f8d8 4000 	ldr.w	r4, [r8]
 8008978:	4627      	mov	r7, r4
 800897a:	2f00      	cmp	r7, #0
 800897c:	d143      	bne.n	8008a06 <_malloc_r+0xd6>
 800897e:	2c00      	cmp	r4, #0
 8008980:	d04b      	beq.n	8008a1a <_malloc_r+0xea>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	4639      	mov	r1, r7
 8008986:	4630      	mov	r0, r6
 8008988:	eb04 0903 	add.w	r9, r4, r3
 800898c:	f001 fdba 	bl	800a504 <_sbrk_r>
 8008990:	4581      	cmp	r9, r0
 8008992:	d142      	bne.n	8008a1a <_malloc_r+0xea>
 8008994:	6821      	ldr	r1, [r4, #0]
 8008996:	1a6d      	subs	r5, r5, r1
 8008998:	4629      	mov	r1, r5
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ffa6 	bl	80088ec <sbrk_aligned>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d03a      	beq.n	8008a1a <_malloc_r+0xea>
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	442b      	add	r3, r5
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	f8d8 3000 	ldr.w	r3, [r8]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	bb62      	cbnz	r2, 8008a0c <_malloc_r+0xdc>
 80089b2:	f8c8 7000 	str.w	r7, [r8]
 80089b6:	e00f      	b.n	80089d8 <_malloc_r+0xa8>
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	1b52      	subs	r2, r2, r5
 80089bc:	d420      	bmi.n	8008a00 <_malloc_r+0xd0>
 80089be:	2a0b      	cmp	r2, #11
 80089c0:	d917      	bls.n	80089f2 <_malloc_r+0xc2>
 80089c2:	1961      	adds	r1, r4, r5
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	6025      	str	r5, [r4, #0]
 80089c8:	bf18      	it	ne
 80089ca:	6059      	strne	r1, [r3, #4]
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	bf08      	it	eq
 80089d0:	f8c8 1000 	streq.w	r1, [r8]
 80089d4:	5162      	str	r2, [r4, r5]
 80089d6:	604b      	str	r3, [r1, #4]
 80089d8:	4630      	mov	r0, r6
 80089da:	f000 f82f 	bl	8008a3c <__malloc_unlock>
 80089de:	f104 000b 	add.w	r0, r4, #11
 80089e2:	1d23      	adds	r3, r4, #4
 80089e4:	f020 0007 	bic.w	r0, r0, #7
 80089e8:	1ac2      	subs	r2, r0, r3
 80089ea:	bf1c      	itt	ne
 80089ec:	1a1b      	subne	r3, r3, r0
 80089ee:	50a3      	strne	r3, [r4, r2]
 80089f0:	e7af      	b.n	8008952 <_malloc_r+0x22>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	bf0c      	ite	eq
 80089f8:	f8c8 2000 	streq.w	r2, [r8]
 80089fc:	605a      	strne	r2, [r3, #4]
 80089fe:	e7eb      	b.n	80089d8 <_malloc_r+0xa8>
 8008a00:	4623      	mov	r3, r4
 8008a02:	6864      	ldr	r4, [r4, #4]
 8008a04:	e7ae      	b.n	8008964 <_malloc_r+0x34>
 8008a06:	463c      	mov	r4, r7
 8008a08:	687f      	ldr	r7, [r7, #4]
 8008a0a:	e7b6      	b.n	800897a <_malloc_r+0x4a>
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d1fb      	bne.n	8008a0c <_malloc_r+0xdc>
 8008a14:	2300      	movs	r3, #0
 8008a16:	6053      	str	r3, [r2, #4]
 8008a18:	e7de      	b.n	80089d8 <_malloc_r+0xa8>
 8008a1a:	230c      	movs	r3, #12
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 f80c 	bl	8008a3c <__malloc_unlock>
 8008a24:	e794      	b.n	8008950 <_malloc_r+0x20>
 8008a26:	6005      	str	r5, [r0, #0]
 8008a28:	e7d6      	b.n	80089d8 <_malloc_r+0xa8>
 8008a2a:	bf00      	nop
 8008a2c:	20000698 	.word	0x20000698

08008a30 <__malloc_lock>:
 8008a30:	4801      	ldr	r0, [pc, #4]	@ (8008a38 <__malloc_lock+0x8>)
 8008a32:	f7ff b89a 	b.w	8007b6a <__retarget_lock_acquire_recursive>
 8008a36:	bf00      	nop
 8008a38:	20000690 	.word	0x20000690

08008a3c <__malloc_unlock>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	@ (8008a44 <__malloc_unlock+0x8>)
 8008a3e:	f7ff b895 	b.w	8007b6c <__retarget_lock_release_recursive>
 8008a42:	bf00      	nop
 8008a44:	20000690 	.word	0x20000690

08008a48 <_Balloc>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	69c6      	ldr	r6, [r0, #28]
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	b976      	cbnz	r6, 8008a70 <_Balloc+0x28>
 8008a52:	2010      	movs	r0, #16
 8008a54:	f7ff ff42 	bl	80088dc <malloc>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	61e0      	str	r0, [r4, #28]
 8008a5c:	b920      	cbnz	r0, 8008a68 <_Balloc+0x20>
 8008a5e:	4b18      	ldr	r3, [pc, #96]	@ (8008ac0 <_Balloc+0x78>)
 8008a60:	4818      	ldr	r0, [pc, #96]	@ (8008ac4 <_Balloc+0x7c>)
 8008a62:	216b      	movs	r1, #107	@ 0x6b
 8008a64:	f001 fd68 	bl	800a538 <__assert_func>
 8008a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a6c:	6006      	str	r6, [r0, #0]
 8008a6e:	60c6      	str	r6, [r0, #12]
 8008a70:	69e6      	ldr	r6, [r4, #28]
 8008a72:	68f3      	ldr	r3, [r6, #12]
 8008a74:	b183      	cbz	r3, 8008a98 <_Balloc+0x50>
 8008a76:	69e3      	ldr	r3, [r4, #28]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a7e:	b9b8      	cbnz	r0, 8008ab0 <_Balloc+0x68>
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f605 	lsl.w	r6, r1, r5
 8008a86:	1d72      	adds	r2, r6, #5
 8008a88:	0092      	lsls	r2, r2, #2
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f001 fd72 	bl	800a574 <_calloc_r>
 8008a90:	b160      	cbz	r0, 8008aac <_Balloc+0x64>
 8008a92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a96:	e00e      	b.n	8008ab6 <_Balloc+0x6e>
 8008a98:	2221      	movs	r2, #33	@ 0x21
 8008a9a:	2104      	movs	r1, #4
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f001 fd69 	bl	800a574 <_calloc_r>
 8008aa2:	69e3      	ldr	r3, [r4, #28]
 8008aa4:	60f0      	str	r0, [r6, #12]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e4      	bne.n	8008a76 <_Balloc+0x2e>
 8008aac:	2000      	movs	r0, #0
 8008aae:	bd70      	pop	{r4, r5, r6, pc}
 8008ab0:	6802      	ldr	r2, [r0, #0]
 8008ab2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008abc:	e7f7      	b.n	8008aae <_Balloc+0x66>
 8008abe:	bf00      	nop
 8008ac0:	0800b392 	.word	0x0800b392
 8008ac4:	0800b412 	.word	0x0800b412

08008ac8 <_Bfree>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	69c6      	ldr	r6, [r0, #28]
 8008acc:	4605      	mov	r5, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	b976      	cbnz	r6, 8008af0 <_Bfree+0x28>
 8008ad2:	2010      	movs	r0, #16
 8008ad4:	f7ff ff02 	bl	80088dc <malloc>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	61e8      	str	r0, [r5, #28]
 8008adc:	b920      	cbnz	r0, 8008ae8 <_Bfree+0x20>
 8008ade:	4b09      	ldr	r3, [pc, #36]	@ (8008b04 <_Bfree+0x3c>)
 8008ae0:	4809      	ldr	r0, [pc, #36]	@ (8008b08 <_Bfree+0x40>)
 8008ae2:	218f      	movs	r1, #143	@ 0x8f
 8008ae4:	f001 fd28 	bl	800a538 <__assert_func>
 8008ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aec:	6006      	str	r6, [r0, #0]
 8008aee:	60c6      	str	r6, [r0, #12]
 8008af0:	b13c      	cbz	r4, 8008b02 <_Bfree+0x3a>
 8008af2:	69eb      	ldr	r3, [r5, #28]
 8008af4:	6862      	ldr	r2, [r4, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008afc:	6021      	str	r1, [r4, #0]
 8008afe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0800b392 	.word	0x0800b392
 8008b08:	0800b412 	.word	0x0800b412

08008b0c <__multadd>:
 8008b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b10:	690d      	ldr	r5, [r1, #16]
 8008b12:	4607      	mov	r7, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	461e      	mov	r6, r3
 8008b18:	f101 0c14 	add.w	ip, r1, #20
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b22:	b299      	uxth	r1, r3
 8008b24:	fb02 6101 	mla	r1, r2, r1, r6
 8008b28:	0c1e      	lsrs	r6, r3, #16
 8008b2a:	0c0b      	lsrs	r3, r1, #16
 8008b2c:	fb02 3306 	mla	r3, r2, r6, r3
 8008b30:	b289      	uxth	r1, r1
 8008b32:	3001      	adds	r0, #1
 8008b34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b38:	4285      	cmp	r5, r0
 8008b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b42:	dcec      	bgt.n	8008b1e <__multadd+0x12>
 8008b44:	b30e      	cbz	r6, 8008b8a <__multadd+0x7e>
 8008b46:	68a3      	ldr	r3, [r4, #8]
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dc19      	bgt.n	8008b80 <__multadd+0x74>
 8008b4c:	6861      	ldr	r1, [r4, #4]
 8008b4e:	4638      	mov	r0, r7
 8008b50:	3101      	adds	r1, #1
 8008b52:	f7ff ff79 	bl	8008a48 <_Balloc>
 8008b56:	4680      	mov	r8, r0
 8008b58:	b928      	cbnz	r0, 8008b66 <__multadd+0x5a>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <__multadd+0x84>)
 8008b5e:	480d      	ldr	r0, [pc, #52]	@ (8008b94 <__multadd+0x88>)
 8008b60:	21ba      	movs	r1, #186	@ 0xba
 8008b62:	f001 fce9 	bl	800a538 <__assert_func>
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	3202      	adds	r2, #2
 8008b6a:	f104 010c 	add.w	r1, r4, #12
 8008b6e:	0092      	lsls	r2, r2, #2
 8008b70:	300c      	adds	r0, #12
 8008b72:	f7fe fffc 	bl	8007b6e <memcpy>
 8008b76:	4621      	mov	r1, r4
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7ff ffa5 	bl	8008ac8 <_Bfree>
 8008b7e:	4644      	mov	r4, r8
 8008b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b84:	3501      	adds	r5, #1
 8008b86:	615e      	str	r6, [r3, #20]
 8008b88:	6125      	str	r5, [r4, #16]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b90:	0800b401 	.word	0x0800b401
 8008b94:	0800b412 	.word	0x0800b412

08008b98 <__s2b>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	4615      	mov	r5, r2
 8008ba0:	461f      	mov	r7, r3
 8008ba2:	2209      	movs	r2, #9
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bac:	2100      	movs	r1, #0
 8008bae:	2201      	movs	r2, #1
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	db09      	blt.n	8008bc8 <__s2b+0x30>
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff ff47 	bl	8008a48 <_Balloc>
 8008bba:	b940      	cbnz	r0, 8008bce <__s2b+0x36>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	4b19      	ldr	r3, [pc, #100]	@ (8008c24 <__s2b+0x8c>)
 8008bc0:	4819      	ldr	r0, [pc, #100]	@ (8008c28 <__s2b+0x90>)
 8008bc2:	21d3      	movs	r1, #211	@ 0xd3
 8008bc4:	f001 fcb8 	bl	800a538 <__assert_func>
 8008bc8:	0052      	lsls	r2, r2, #1
 8008bca:	3101      	adds	r1, #1
 8008bcc:	e7f0      	b.n	8008bb0 <__s2b+0x18>
 8008bce:	9b08      	ldr	r3, [sp, #32]
 8008bd0:	6143      	str	r3, [r0, #20]
 8008bd2:	2d09      	cmp	r5, #9
 8008bd4:	f04f 0301 	mov.w	r3, #1
 8008bd8:	6103      	str	r3, [r0, #16]
 8008bda:	dd16      	ble.n	8008c0a <__s2b+0x72>
 8008bdc:	f104 0909 	add.w	r9, r4, #9
 8008be0:	46c8      	mov	r8, r9
 8008be2:	442c      	add	r4, r5
 8008be4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008be8:	4601      	mov	r1, r0
 8008bea:	3b30      	subs	r3, #48	@ 0x30
 8008bec:	220a      	movs	r2, #10
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ff8c 	bl	8008b0c <__multadd>
 8008bf4:	45a0      	cmp	r8, r4
 8008bf6:	d1f5      	bne.n	8008be4 <__s2b+0x4c>
 8008bf8:	f1a5 0408 	sub.w	r4, r5, #8
 8008bfc:	444c      	add	r4, r9
 8008bfe:	1b2d      	subs	r5, r5, r4
 8008c00:	1963      	adds	r3, r4, r5
 8008c02:	42bb      	cmp	r3, r7
 8008c04:	db04      	blt.n	8008c10 <__s2b+0x78>
 8008c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0a:	340a      	adds	r4, #10
 8008c0c:	2509      	movs	r5, #9
 8008c0e:	e7f6      	b.n	8008bfe <__s2b+0x66>
 8008c10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c14:	4601      	mov	r1, r0
 8008c16:	3b30      	subs	r3, #48	@ 0x30
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ff76 	bl	8008b0c <__multadd>
 8008c20:	e7ee      	b.n	8008c00 <__s2b+0x68>
 8008c22:	bf00      	nop
 8008c24:	0800b401 	.word	0x0800b401
 8008c28:	0800b412 	.word	0x0800b412

08008c2c <__hi0bits>:
 8008c2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c30:	4603      	mov	r3, r0
 8008c32:	bf36      	itet	cc
 8008c34:	0403      	lslcc	r3, r0, #16
 8008c36:	2000      	movcs	r0, #0
 8008c38:	2010      	movcc	r0, #16
 8008c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c3e:	bf3c      	itt	cc
 8008c40:	021b      	lslcc	r3, r3, #8
 8008c42:	3008      	addcc	r0, #8
 8008c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c48:	bf3c      	itt	cc
 8008c4a:	011b      	lslcc	r3, r3, #4
 8008c4c:	3004      	addcc	r0, #4
 8008c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c52:	bf3c      	itt	cc
 8008c54:	009b      	lslcc	r3, r3, #2
 8008c56:	3002      	addcc	r0, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	db05      	blt.n	8008c68 <__hi0bits+0x3c>
 8008c5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c60:	f100 0001 	add.w	r0, r0, #1
 8008c64:	bf08      	it	eq
 8008c66:	2020      	moveq	r0, #32
 8008c68:	4770      	bx	lr

08008c6a <__lo0bits>:
 8008c6a:	6803      	ldr	r3, [r0, #0]
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f013 0007 	ands.w	r0, r3, #7
 8008c72:	d00b      	beq.n	8008c8c <__lo0bits+0x22>
 8008c74:	07d9      	lsls	r1, r3, #31
 8008c76:	d421      	bmi.n	8008cbc <__lo0bits+0x52>
 8008c78:	0798      	lsls	r0, r3, #30
 8008c7a:	bf49      	itett	mi
 8008c7c:	085b      	lsrmi	r3, r3, #1
 8008c7e:	089b      	lsrpl	r3, r3, #2
 8008c80:	2001      	movmi	r0, #1
 8008c82:	6013      	strmi	r3, [r2, #0]
 8008c84:	bf5c      	itt	pl
 8008c86:	6013      	strpl	r3, [r2, #0]
 8008c88:	2002      	movpl	r0, #2
 8008c8a:	4770      	bx	lr
 8008c8c:	b299      	uxth	r1, r3
 8008c8e:	b909      	cbnz	r1, 8008c94 <__lo0bits+0x2a>
 8008c90:	0c1b      	lsrs	r3, r3, #16
 8008c92:	2010      	movs	r0, #16
 8008c94:	b2d9      	uxtb	r1, r3
 8008c96:	b909      	cbnz	r1, 8008c9c <__lo0bits+0x32>
 8008c98:	3008      	adds	r0, #8
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	0719      	lsls	r1, r3, #28
 8008c9e:	bf04      	itt	eq
 8008ca0:	091b      	lsreq	r3, r3, #4
 8008ca2:	3004      	addeq	r0, #4
 8008ca4:	0799      	lsls	r1, r3, #30
 8008ca6:	bf04      	itt	eq
 8008ca8:	089b      	lsreq	r3, r3, #2
 8008caa:	3002      	addeq	r0, #2
 8008cac:	07d9      	lsls	r1, r3, #31
 8008cae:	d403      	bmi.n	8008cb8 <__lo0bits+0x4e>
 8008cb0:	085b      	lsrs	r3, r3, #1
 8008cb2:	f100 0001 	add.w	r0, r0, #1
 8008cb6:	d003      	beq.n	8008cc0 <__lo0bits+0x56>
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	4770      	bx	lr
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	4770      	bx	lr
 8008cc0:	2020      	movs	r0, #32
 8008cc2:	4770      	bx	lr

08008cc4 <__i2b>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	2101      	movs	r1, #1
 8008cca:	f7ff febd 	bl	8008a48 <_Balloc>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	b928      	cbnz	r0, 8008cde <__i2b+0x1a>
 8008cd2:	4b05      	ldr	r3, [pc, #20]	@ (8008ce8 <__i2b+0x24>)
 8008cd4:	4805      	ldr	r0, [pc, #20]	@ (8008cec <__i2b+0x28>)
 8008cd6:	f240 1145 	movw	r1, #325	@ 0x145
 8008cda:	f001 fc2d 	bl	800a538 <__assert_func>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	6144      	str	r4, [r0, #20]
 8008ce2:	6103      	str	r3, [r0, #16]
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop
 8008ce8:	0800b401 	.word	0x0800b401
 8008cec:	0800b412 	.word	0x0800b412

08008cf0 <__multiply>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	4617      	mov	r7, r2
 8008cf6:	690a      	ldr	r2, [r1, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	bfa8      	it	ge
 8008cfe:	463b      	movge	r3, r7
 8008d00:	4689      	mov	r9, r1
 8008d02:	bfa4      	itt	ge
 8008d04:	460f      	movge	r7, r1
 8008d06:	4699      	movge	r9, r3
 8008d08:	693d      	ldr	r5, [r7, #16]
 8008d0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	eb05 060a 	add.w	r6, r5, sl
 8008d16:	42b3      	cmp	r3, r6
 8008d18:	b085      	sub	sp, #20
 8008d1a:	bfb8      	it	lt
 8008d1c:	3101      	addlt	r1, #1
 8008d1e:	f7ff fe93 	bl	8008a48 <_Balloc>
 8008d22:	b930      	cbnz	r0, 8008d32 <__multiply+0x42>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b41      	ldr	r3, [pc, #260]	@ (8008e2c <__multiply+0x13c>)
 8008d28:	4841      	ldr	r0, [pc, #260]	@ (8008e30 <__multiply+0x140>)
 8008d2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d2e:	f001 fc03 	bl	800a538 <__assert_func>
 8008d32:	f100 0414 	add.w	r4, r0, #20
 8008d36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4573      	cmp	r3, lr
 8008d40:	d320      	bcc.n	8008d84 <__multiply+0x94>
 8008d42:	f107 0814 	add.w	r8, r7, #20
 8008d46:	f109 0114 	add.w	r1, r9, #20
 8008d4a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008d4e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008d52:	9302      	str	r3, [sp, #8]
 8008d54:	1beb      	subs	r3, r5, r7
 8008d56:	3b15      	subs	r3, #21
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	3715      	adds	r7, #21
 8008d60:	42bd      	cmp	r5, r7
 8008d62:	bf38      	it	cc
 8008d64:	2304      	movcc	r3, #4
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	9103      	str	r1, [sp, #12]
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	d80c      	bhi.n	8008d8a <__multiply+0x9a>
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	dd03      	ble.n	8008d7c <__multiply+0x8c>
 8008d74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d055      	beq.n	8008e28 <__multiply+0x138>
 8008d7c:	6106      	str	r6, [r0, #16]
 8008d7e:	b005      	add	sp, #20
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	f843 2b04 	str.w	r2, [r3], #4
 8008d88:	e7d9      	b.n	8008d3e <__multiply+0x4e>
 8008d8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d8e:	f1ba 0f00 	cmp.w	sl, #0
 8008d92:	d01f      	beq.n	8008dd4 <__multiply+0xe4>
 8008d94:	46c4      	mov	ip, r8
 8008d96:	46a1      	mov	r9, r4
 8008d98:	2700      	movs	r7, #0
 8008d9a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8008da2:	fa1f fb82 	uxth.w	fp, r2
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008dac:	443b      	add	r3, r7
 8008dae:	f8d9 7000 	ldr.w	r7, [r9]
 8008db2:	0c12      	lsrs	r2, r2, #16
 8008db4:	0c3f      	lsrs	r7, r7, #16
 8008db6:	fb0a 7202 	mla	r2, sl, r2, r7
 8008dba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dc4:	4565      	cmp	r5, ip
 8008dc6:	f849 3b04 	str.w	r3, [r9], #4
 8008dca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008dce:	d8e4      	bhi.n	8008d9a <__multiply+0xaa>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	50e7      	str	r7, [r4, r3]
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dda:	3104      	adds	r1, #4
 8008ddc:	f1b9 0f00 	cmp.w	r9, #0
 8008de0:	d020      	beq.n	8008e24 <__multiply+0x134>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	4647      	mov	r7, r8
 8008de6:	46a4      	mov	ip, r4
 8008de8:	f04f 0a00 	mov.w	sl, #0
 8008dec:	f8b7 b000 	ldrh.w	fp, [r7]
 8008df0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008df4:	fb09 220b 	mla	r2, r9, fp, r2
 8008df8:	4452      	add	r2, sl
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e00:	f84c 3b04 	str.w	r3, [ip], #4
 8008e04:	f857 3b04 	ldr.w	r3, [r7], #4
 8008e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e0c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008e10:	fb09 330a 	mla	r3, r9, sl, r3
 8008e14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e18:	42bd      	cmp	r5, r7
 8008e1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e1e:	d8e5      	bhi.n	8008dec <__multiply+0xfc>
 8008e20:	9a01      	ldr	r2, [sp, #4]
 8008e22:	50a3      	str	r3, [r4, r2]
 8008e24:	3404      	adds	r4, #4
 8008e26:	e79f      	b.n	8008d68 <__multiply+0x78>
 8008e28:	3e01      	subs	r6, #1
 8008e2a:	e7a1      	b.n	8008d70 <__multiply+0x80>
 8008e2c:	0800b401 	.word	0x0800b401
 8008e30:	0800b412 	.word	0x0800b412

08008e34 <__pow5mult>:
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	4615      	mov	r5, r2
 8008e3a:	f012 0203 	ands.w	r2, r2, #3
 8008e3e:	4607      	mov	r7, r0
 8008e40:	460e      	mov	r6, r1
 8008e42:	d007      	beq.n	8008e54 <__pow5mult+0x20>
 8008e44:	4c25      	ldr	r4, [pc, #148]	@ (8008edc <__pow5mult+0xa8>)
 8008e46:	3a01      	subs	r2, #1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e4e:	f7ff fe5d 	bl	8008b0c <__multadd>
 8008e52:	4606      	mov	r6, r0
 8008e54:	10ad      	asrs	r5, r5, #2
 8008e56:	d03d      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008e58:	69fc      	ldr	r4, [r7, #28]
 8008e5a:	b97c      	cbnz	r4, 8008e7c <__pow5mult+0x48>
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	f7ff fd3d 	bl	80088dc <malloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	61f8      	str	r0, [r7, #28]
 8008e66:	b928      	cbnz	r0, 8008e74 <__pow5mult+0x40>
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <__pow5mult+0xac>)
 8008e6a:	481e      	ldr	r0, [pc, #120]	@ (8008ee4 <__pow5mult+0xb0>)
 8008e6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e70:	f001 fb62 	bl	800a538 <__assert_func>
 8008e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e78:	6004      	str	r4, [r0, #0]
 8008e7a:	60c4      	str	r4, [r0, #12]
 8008e7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e84:	b94c      	cbnz	r4, 8008e9a <__pow5mult+0x66>
 8008e86:	f240 2171 	movw	r1, #625	@ 0x271
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7ff ff1a 	bl	8008cc4 <__i2b>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e96:	4604      	mov	r4, r0
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	07eb      	lsls	r3, r5, #31
 8008ea0:	d50a      	bpl.n	8008eb8 <__pow5mult+0x84>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ff22 	bl	8008cf0 <__multiply>
 8008eac:	4631      	mov	r1, r6
 8008eae:	4680      	mov	r8, r0
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff fe09 	bl	8008ac8 <_Bfree>
 8008eb6:	4646      	mov	r6, r8
 8008eb8:	106d      	asrs	r5, r5, #1
 8008eba:	d00b      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	b938      	cbnz	r0, 8008ed0 <__pow5mult+0x9c>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff13 	bl	8008cf0 <__multiply>
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f8c0 9000 	str.w	r9, [r0]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e7e4      	b.n	8008e9e <__pow5mult+0x6a>
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	bf00      	nop
 8008edc:	0800b524 	.word	0x0800b524
 8008ee0:	0800b392 	.word	0x0800b392
 8008ee4:	0800b412 	.word	0x0800b412

08008ee8 <__lshift>:
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	6849      	ldr	r1, [r1, #4]
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	4607      	mov	r7, r0
 8008efa:	4691      	mov	r9, r2
 8008efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f00:	f108 0601 	add.w	r6, r8, #1
 8008f04:	42b3      	cmp	r3, r6
 8008f06:	db0b      	blt.n	8008f20 <__lshift+0x38>
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff fd9d 	bl	8008a48 <_Balloc>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	b948      	cbnz	r0, 8008f26 <__lshift+0x3e>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b28      	ldr	r3, [pc, #160]	@ (8008fb8 <__lshift+0xd0>)
 8008f16:	4829      	ldr	r0, [pc, #164]	@ (8008fbc <__lshift+0xd4>)
 8008f18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f1c:	f001 fb0c 	bl	800a538 <__assert_func>
 8008f20:	3101      	adds	r1, #1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	e7ee      	b.n	8008f04 <__lshift+0x1c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f100 0114 	add.w	r1, r0, #20
 8008f2c:	f100 0210 	add.w	r2, r0, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	4553      	cmp	r3, sl
 8008f34:	db33      	blt.n	8008f9e <__lshift+0xb6>
 8008f36:	6920      	ldr	r0, [r4, #16]
 8008f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f3c:	f104 0314 	add.w	r3, r4, #20
 8008f40:	f019 091f 	ands.w	r9, r9, #31
 8008f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f4c:	d02b      	beq.n	8008fa6 <__lshift+0xbe>
 8008f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f52:	468a      	mov	sl, r1
 8008f54:	2200      	movs	r2, #0
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	fa00 f009 	lsl.w	r0, r0, r9
 8008f5c:	4310      	orrs	r0, r2
 8008f5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f66:	459c      	cmp	ip, r3
 8008f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f6c:	d8f3      	bhi.n	8008f56 <__lshift+0x6e>
 8008f6e:	ebac 0304 	sub.w	r3, ip, r4
 8008f72:	3b15      	subs	r3, #21
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	3304      	adds	r3, #4
 8008f7a:	f104 0015 	add.w	r0, r4, #21
 8008f7e:	4560      	cmp	r0, ip
 8008f80:	bf88      	it	hi
 8008f82:	2304      	movhi	r3, #4
 8008f84:	50ca      	str	r2, [r1, r3]
 8008f86:	b10a      	cbz	r2, 8008f8c <__lshift+0xa4>
 8008f88:	f108 0602 	add.w	r6, r8, #2
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	4638      	mov	r0, r7
 8008f90:	612e      	str	r6, [r5, #16]
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd98 	bl	8008ac8 <_Bfree>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	e7c5      	b.n	8008f32 <__lshift+0x4a>
 8008fa6:	3904      	subs	r1, #4
 8008fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fb0:	459c      	cmp	ip, r3
 8008fb2:	d8f9      	bhi.n	8008fa8 <__lshift+0xc0>
 8008fb4:	e7ea      	b.n	8008f8c <__lshift+0xa4>
 8008fb6:	bf00      	nop
 8008fb8:	0800b401 	.word	0x0800b401
 8008fbc:	0800b412 	.word	0x0800b412

08008fc0 <__mcmp>:
 8008fc0:	690a      	ldr	r2, [r1, #16]
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6900      	ldr	r0, [r0, #16]
 8008fc6:	1a80      	subs	r0, r0, r2
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	d10e      	bne.n	8008fea <__mcmp+0x2a>
 8008fcc:	3314      	adds	r3, #20
 8008fce:	3114      	adds	r1, #20
 8008fd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fe0:	4295      	cmp	r5, r2
 8008fe2:	d003      	beq.n	8008fec <__mcmp+0x2c>
 8008fe4:	d205      	bcs.n	8008ff2 <__mcmp+0x32>
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d3f3      	bcc.n	8008fd8 <__mcmp+0x18>
 8008ff0:	e7fb      	b.n	8008fea <__mcmp+0x2a>
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7f9      	b.n	8008fea <__mcmp+0x2a>
	...

08008ff8 <__mdiff>:
 8008ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	4606      	mov	r6, r0
 8009000:	4611      	mov	r1, r2
 8009002:	4648      	mov	r0, r9
 8009004:	4614      	mov	r4, r2
 8009006:	f7ff ffdb 	bl	8008fc0 <__mcmp>
 800900a:	1e05      	subs	r5, r0, #0
 800900c:	d112      	bne.n	8009034 <__mdiff+0x3c>
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff fd19 	bl	8008a48 <_Balloc>
 8009016:	4602      	mov	r2, r0
 8009018:	b928      	cbnz	r0, 8009026 <__mdiff+0x2e>
 800901a:	4b3f      	ldr	r3, [pc, #252]	@ (8009118 <__mdiff+0x120>)
 800901c:	f240 2137 	movw	r1, #567	@ 0x237
 8009020:	483e      	ldr	r0, [pc, #248]	@ (800911c <__mdiff+0x124>)
 8009022:	f001 fa89 	bl	800a538 <__assert_func>
 8009026:	2301      	movs	r3, #1
 8009028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800902c:	4610      	mov	r0, r2
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	bfbc      	itt	lt
 8009036:	464b      	movlt	r3, r9
 8009038:	46a1      	movlt	r9, r4
 800903a:	4630      	mov	r0, r6
 800903c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009040:	bfba      	itte	lt
 8009042:	461c      	movlt	r4, r3
 8009044:	2501      	movlt	r5, #1
 8009046:	2500      	movge	r5, #0
 8009048:	f7ff fcfe 	bl	8008a48 <_Balloc>
 800904c:	4602      	mov	r2, r0
 800904e:	b918      	cbnz	r0, 8009058 <__mdiff+0x60>
 8009050:	4b31      	ldr	r3, [pc, #196]	@ (8009118 <__mdiff+0x120>)
 8009052:	f240 2145 	movw	r1, #581	@ 0x245
 8009056:	e7e3      	b.n	8009020 <__mdiff+0x28>
 8009058:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800905c:	6926      	ldr	r6, [r4, #16]
 800905e:	60c5      	str	r5, [r0, #12]
 8009060:	f109 0310 	add.w	r3, r9, #16
 8009064:	f109 0514 	add.w	r5, r9, #20
 8009068:	f104 0e14 	add.w	lr, r4, #20
 800906c:	f100 0b14 	add.w	fp, r0, #20
 8009070:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009074:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	46d9      	mov	r9, fp
 800907c:	f04f 0c00 	mov.w	ip, #0
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009086:	f853 af04 	ldr.w	sl, [r3, #4]!
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	fa1f f38a 	uxth.w	r3, sl
 8009090:	4619      	mov	r1, r3
 8009092:	b283      	uxth	r3, r0
 8009094:	1acb      	subs	r3, r1, r3
 8009096:	0c00      	lsrs	r0, r0, #16
 8009098:	4463      	add	r3, ip
 800909a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800909e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090a8:	4576      	cmp	r6, lr
 80090aa:	f849 3b04 	str.w	r3, [r9], #4
 80090ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090b2:	d8e5      	bhi.n	8009080 <__mdiff+0x88>
 80090b4:	1b33      	subs	r3, r6, r4
 80090b6:	3b15      	subs	r3, #21
 80090b8:	f023 0303 	bic.w	r3, r3, #3
 80090bc:	3415      	adds	r4, #21
 80090be:	3304      	adds	r3, #4
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	bf38      	it	cc
 80090c4:	2304      	movcc	r3, #4
 80090c6:	441d      	add	r5, r3
 80090c8:	445b      	add	r3, fp
 80090ca:	461e      	mov	r6, r3
 80090cc:	462c      	mov	r4, r5
 80090ce:	4544      	cmp	r4, r8
 80090d0:	d30e      	bcc.n	80090f0 <__mdiff+0xf8>
 80090d2:	f108 0103 	add.w	r1, r8, #3
 80090d6:	1b49      	subs	r1, r1, r5
 80090d8:	f021 0103 	bic.w	r1, r1, #3
 80090dc:	3d03      	subs	r5, #3
 80090de:	45a8      	cmp	r8, r5
 80090e0:	bf38      	it	cc
 80090e2:	2100      	movcc	r1, #0
 80090e4:	440b      	add	r3, r1
 80090e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090ea:	b191      	cbz	r1, 8009112 <__mdiff+0x11a>
 80090ec:	6117      	str	r7, [r2, #16]
 80090ee:	e79d      	b.n	800902c <__mdiff+0x34>
 80090f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80090f4:	46e6      	mov	lr, ip
 80090f6:	0c08      	lsrs	r0, r1, #16
 80090f8:	fa1c fc81 	uxtah	ip, ip, r1
 80090fc:	4471      	add	r1, lr
 80090fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009102:	b289      	uxth	r1, r1
 8009104:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009108:	f846 1b04 	str.w	r1, [r6], #4
 800910c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009110:	e7dd      	b.n	80090ce <__mdiff+0xd6>
 8009112:	3f01      	subs	r7, #1
 8009114:	e7e7      	b.n	80090e6 <__mdiff+0xee>
 8009116:	bf00      	nop
 8009118:	0800b401 	.word	0x0800b401
 800911c:	0800b412 	.word	0x0800b412

08009120 <__ulp>:
 8009120:	b082      	sub	sp, #8
 8009122:	ed8d 0b00 	vstr	d0, [sp]
 8009126:	9a01      	ldr	r2, [sp, #4]
 8009128:	4b0f      	ldr	r3, [pc, #60]	@ (8009168 <__ulp+0x48>)
 800912a:	4013      	ands	r3, r2
 800912c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc08      	bgt.n	8009146 <__ulp+0x26>
 8009134:	425b      	negs	r3, r3
 8009136:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800913a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800913e:	da04      	bge.n	800914a <__ulp+0x2a>
 8009140:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009144:	4113      	asrs	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	e008      	b.n	800915c <__ulp+0x3c>
 800914a:	f1a2 0314 	sub.w	r3, r2, #20
 800914e:	2b1e      	cmp	r3, #30
 8009150:	bfda      	itte	le
 8009152:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009156:	40da      	lsrle	r2, r3
 8009158:	2201      	movgt	r2, #1
 800915a:	2300      	movs	r3, #0
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	ec41 0b10 	vmov	d0, r0, r1
 8009164:	b002      	add	sp, #8
 8009166:	4770      	bx	lr
 8009168:	7ff00000 	.word	0x7ff00000

0800916c <__b2d>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	6906      	ldr	r6, [r0, #16]
 8009172:	f100 0814 	add.w	r8, r0, #20
 8009176:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800917a:	1f37      	subs	r7, r6, #4
 800917c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009180:	4610      	mov	r0, r2
 8009182:	f7ff fd53 	bl	8008c2c <__hi0bits>
 8009186:	f1c0 0320 	rsb	r3, r0, #32
 800918a:	280a      	cmp	r0, #10
 800918c:	600b      	str	r3, [r1, #0]
 800918e:	491b      	ldr	r1, [pc, #108]	@ (80091fc <__b2d+0x90>)
 8009190:	dc15      	bgt.n	80091be <__b2d+0x52>
 8009192:	f1c0 0c0b 	rsb	ip, r0, #11
 8009196:	fa22 f30c 	lsr.w	r3, r2, ip
 800919a:	45b8      	cmp	r8, r7
 800919c:	ea43 0501 	orr.w	r5, r3, r1
 80091a0:	bf34      	ite	cc
 80091a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091a6:	2300      	movcs	r3, #0
 80091a8:	3015      	adds	r0, #21
 80091aa:	fa02 f000 	lsl.w	r0, r2, r0
 80091ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80091b2:	4303      	orrs	r3, r0
 80091b4:	461c      	mov	r4, r3
 80091b6:	ec45 4b10 	vmov	d0, r4, r5
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	45b8      	cmp	r8, r7
 80091c0:	bf3a      	itte	cc
 80091c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80091ca:	2300      	movcs	r3, #0
 80091cc:	380b      	subs	r0, #11
 80091ce:	d012      	beq.n	80091f6 <__b2d+0x8a>
 80091d0:	f1c0 0120 	rsb	r1, r0, #32
 80091d4:	fa23 f401 	lsr.w	r4, r3, r1
 80091d8:	4082      	lsls	r2, r0
 80091da:	4322      	orrs	r2, r4
 80091dc:	4547      	cmp	r7, r8
 80091de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80091e2:	bf8c      	ite	hi
 80091e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80091e8:	2200      	movls	r2, #0
 80091ea:	4083      	lsls	r3, r0
 80091ec:	40ca      	lsrs	r2, r1
 80091ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091f2:	4313      	orrs	r3, r2
 80091f4:	e7de      	b.n	80091b4 <__b2d+0x48>
 80091f6:	ea42 0501 	orr.w	r5, r2, r1
 80091fa:	e7db      	b.n	80091b4 <__b2d+0x48>
 80091fc:	3ff00000 	.word	0x3ff00000

08009200 <__d2b>:
 8009200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009204:	460f      	mov	r7, r1
 8009206:	2101      	movs	r1, #1
 8009208:	ec59 8b10 	vmov	r8, r9, d0
 800920c:	4616      	mov	r6, r2
 800920e:	f7ff fc1b 	bl	8008a48 <_Balloc>
 8009212:	4604      	mov	r4, r0
 8009214:	b930      	cbnz	r0, 8009224 <__d2b+0x24>
 8009216:	4602      	mov	r2, r0
 8009218:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <__d2b+0xa8>)
 800921a:	4824      	ldr	r0, [pc, #144]	@ (80092ac <__d2b+0xac>)
 800921c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009220:	f001 f98a 	bl	800a538 <__assert_func>
 8009224:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800922c:	b10d      	cbz	r5, 8009232 <__d2b+0x32>
 800922e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f1b8 0300 	subs.w	r3, r8, #0
 8009238:	d023      	beq.n	8009282 <__d2b+0x82>
 800923a:	4668      	mov	r0, sp
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	f7ff fd14 	bl	8008c6a <__lo0bits>
 8009242:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009246:	b1d0      	cbz	r0, 800927e <__d2b+0x7e>
 8009248:	f1c0 0320 	rsb	r3, r0, #32
 800924c:	fa02 f303 	lsl.w	r3, r2, r3
 8009250:	430b      	orrs	r3, r1
 8009252:	40c2      	lsrs	r2, r0
 8009254:	6163      	str	r3, [r4, #20]
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	61a3      	str	r3, [r4, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf0c      	ite	eq
 8009260:	2201      	moveq	r2, #1
 8009262:	2202      	movne	r2, #2
 8009264:	6122      	str	r2, [r4, #16]
 8009266:	b1a5      	cbz	r5, 8009292 <__d2b+0x92>
 8009268:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800926c:	4405      	add	r5, r0
 800926e:	603d      	str	r5, [r7, #0]
 8009270:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009274:	6030      	str	r0, [r6, #0]
 8009276:	4620      	mov	r0, r4
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927e:	6161      	str	r1, [r4, #20]
 8009280:	e7ea      	b.n	8009258 <__d2b+0x58>
 8009282:	a801      	add	r0, sp, #4
 8009284:	f7ff fcf1 	bl	8008c6a <__lo0bits>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	3020      	adds	r0, #32
 800928e:	2201      	movs	r2, #1
 8009290:	e7e8      	b.n	8009264 <__d2b+0x64>
 8009292:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009296:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800929a:	6038      	str	r0, [r7, #0]
 800929c:	6918      	ldr	r0, [r3, #16]
 800929e:	f7ff fcc5 	bl	8008c2c <__hi0bits>
 80092a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092a6:	e7e5      	b.n	8009274 <__d2b+0x74>
 80092a8:	0800b401 	.word	0x0800b401
 80092ac:	0800b412 	.word	0x0800b412

080092b0 <__ratio>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b085      	sub	sp, #20
 80092b6:	e9cd 1000 	strd	r1, r0, [sp]
 80092ba:	a902      	add	r1, sp, #8
 80092bc:	f7ff ff56 	bl	800916c <__b2d>
 80092c0:	9800      	ldr	r0, [sp, #0]
 80092c2:	a903      	add	r1, sp, #12
 80092c4:	ec55 4b10 	vmov	r4, r5, d0
 80092c8:	f7ff ff50 	bl	800916c <__b2d>
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	6919      	ldr	r1, [r3, #16]
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	1ac9      	subs	r1, r1, r3
 80092d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	ec5b ab10 	vmov	sl, fp, d0
 80092e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfce      	itee	gt
 80092e8:	462a      	movgt	r2, r5
 80092ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ee:	465a      	movle	r2, fp
 80092f0:	462f      	mov	r7, r5
 80092f2:	46d9      	mov	r9, fp
 80092f4:	bfcc      	ite	gt
 80092f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092fe:	464b      	mov	r3, r9
 8009300:	4652      	mov	r2, sl
 8009302:	4620      	mov	r0, r4
 8009304:	4639      	mov	r1, r7
 8009306:	f7f7 faa9 	bl	800085c <__aeabi_ddiv>
 800930a:	ec41 0b10 	vmov	d0, r0, r1
 800930e:	b005      	add	sp, #20
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009314 <__copybits>:
 8009314:	3901      	subs	r1, #1
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	1149      	asrs	r1, r1, #5
 800931a:	6914      	ldr	r4, [r2, #16]
 800931c:	3101      	adds	r1, #1
 800931e:	f102 0314 	add.w	r3, r2, #20
 8009322:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009326:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800932a:	1f05      	subs	r5, r0, #4
 800932c:	42a3      	cmp	r3, r4
 800932e:	d30c      	bcc.n	800934a <__copybits+0x36>
 8009330:	1aa3      	subs	r3, r4, r2
 8009332:	3b11      	subs	r3, #17
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3211      	adds	r2, #17
 800933a:	42a2      	cmp	r2, r4
 800933c:	bf88      	it	hi
 800933e:	2300      	movhi	r3, #0
 8009340:	4418      	add	r0, r3
 8009342:	2300      	movs	r3, #0
 8009344:	4288      	cmp	r0, r1
 8009346:	d305      	bcc.n	8009354 <__copybits+0x40>
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	f853 6b04 	ldr.w	r6, [r3], #4
 800934e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009352:	e7eb      	b.n	800932c <__copybits+0x18>
 8009354:	f840 3b04 	str.w	r3, [r0], #4
 8009358:	e7f4      	b.n	8009344 <__copybits+0x30>

0800935a <__any_on>:
 800935a:	f100 0214 	add.w	r2, r0, #20
 800935e:	6900      	ldr	r0, [r0, #16]
 8009360:	114b      	asrs	r3, r1, #5
 8009362:	4298      	cmp	r0, r3
 8009364:	b510      	push	{r4, lr}
 8009366:	db11      	blt.n	800938c <__any_on+0x32>
 8009368:	dd0a      	ble.n	8009380 <__any_on+0x26>
 800936a:	f011 011f 	ands.w	r1, r1, #31
 800936e:	d007      	beq.n	8009380 <__any_on+0x26>
 8009370:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009374:	fa24 f001 	lsr.w	r0, r4, r1
 8009378:	fa00 f101 	lsl.w	r1, r0, r1
 800937c:	428c      	cmp	r4, r1
 800937e:	d10b      	bne.n	8009398 <__any_on+0x3e>
 8009380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009384:	4293      	cmp	r3, r2
 8009386:	d803      	bhi.n	8009390 <__any_on+0x36>
 8009388:	2000      	movs	r0, #0
 800938a:	bd10      	pop	{r4, pc}
 800938c:	4603      	mov	r3, r0
 800938e:	e7f7      	b.n	8009380 <__any_on+0x26>
 8009390:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009394:	2900      	cmp	r1, #0
 8009396:	d0f5      	beq.n	8009384 <__any_on+0x2a>
 8009398:	2001      	movs	r0, #1
 800939a:	e7f6      	b.n	800938a <__any_on+0x30>

0800939c <sulp>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	ec45 4b10 	vmov	d0, r4, r5
 80093a6:	4616      	mov	r6, r2
 80093a8:	f7ff feba 	bl	8009120 <__ulp>
 80093ac:	ec51 0b10 	vmov	r0, r1, d0
 80093b0:	b17e      	cbz	r6, 80093d2 <sulp+0x36>
 80093b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dd09      	ble.n	80093d2 <sulp+0x36>
 80093be:	051b      	lsls	r3, r3, #20
 80093c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80093c4:	2400      	movs	r4, #0
 80093c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80093ca:	4622      	mov	r2, r4
 80093cc:	462b      	mov	r3, r5
 80093ce:	f7f7 f91b 	bl	8000608 <__aeabi_dmul>
 80093d2:	ec41 0b10 	vmov	d0, r0, r1
 80093d6:	bd70      	pop	{r4, r5, r6, pc}

080093d8 <_strtod_l>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	b09f      	sub	sp, #124	@ 0x7c
 80093de:	460c      	mov	r4, r1
 80093e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093e2:	2200      	movs	r2, #0
 80093e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80093e6:	9005      	str	r0, [sp, #20]
 80093e8:	f04f 0a00 	mov.w	sl, #0
 80093ec:	f04f 0b00 	mov.w	fp, #0
 80093f0:	460a      	mov	r2, r1
 80093f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093f4:	7811      	ldrb	r1, [r2, #0]
 80093f6:	292b      	cmp	r1, #43	@ 0x2b
 80093f8:	d04a      	beq.n	8009490 <_strtod_l+0xb8>
 80093fa:	d838      	bhi.n	800946e <_strtod_l+0x96>
 80093fc:	290d      	cmp	r1, #13
 80093fe:	d832      	bhi.n	8009466 <_strtod_l+0x8e>
 8009400:	2908      	cmp	r1, #8
 8009402:	d832      	bhi.n	800946a <_strtod_l+0x92>
 8009404:	2900      	cmp	r1, #0
 8009406:	d03b      	beq.n	8009480 <_strtod_l+0xa8>
 8009408:	2200      	movs	r2, #0
 800940a:	920e      	str	r2, [sp, #56]	@ 0x38
 800940c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800940e:	782a      	ldrb	r2, [r5, #0]
 8009410:	2a30      	cmp	r2, #48	@ 0x30
 8009412:	f040 80b2 	bne.w	800957a <_strtod_l+0x1a2>
 8009416:	786a      	ldrb	r2, [r5, #1]
 8009418:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800941c:	2a58      	cmp	r2, #88	@ 0x58
 800941e:	d16e      	bne.n	80094fe <_strtod_l+0x126>
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	ab1a      	add	r3, sp, #104	@ 0x68
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4a8f      	ldr	r2, [pc, #572]	@ (8009668 <_strtod_l+0x290>)
 800942c:	9805      	ldr	r0, [sp, #20]
 800942e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009430:	a919      	add	r1, sp, #100	@ 0x64
 8009432:	f001 f91b 	bl	800a66c <__gethex>
 8009436:	f010 060f 	ands.w	r6, r0, #15
 800943a:	4604      	mov	r4, r0
 800943c:	d005      	beq.n	800944a <_strtod_l+0x72>
 800943e:	2e06      	cmp	r6, #6
 8009440:	d128      	bne.n	8009494 <_strtod_l+0xbc>
 8009442:	3501      	adds	r5, #1
 8009444:	2300      	movs	r3, #0
 8009446:	9519      	str	r5, [sp, #100]	@ 0x64
 8009448:	930e      	str	r3, [sp, #56]	@ 0x38
 800944a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 858e 	bne.w	8009f6e <_strtod_l+0xb96>
 8009452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009454:	b1cb      	cbz	r3, 800948a <_strtod_l+0xb2>
 8009456:	4652      	mov	r2, sl
 8009458:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800945c:	ec43 2b10 	vmov	d0, r2, r3
 8009460:	b01f      	add	sp, #124	@ 0x7c
 8009462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009466:	2920      	cmp	r1, #32
 8009468:	d1ce      	bne.n	8009408 <_strtod_l+0x30>
 800946a:	3201      	adds	r2, #1
 800946c:	e7c1      	b.n	80093f2 <_strtod_l+0x1a>
 800946e:	292d      	cmp	r1, #45	@ 0x2d
 8009470:	d1ca      	bne.n	8009408 <_strtod_l+0x30>
 8009472:	2101      	movs	r1, #1
 8009474:	910e      	str	r1, [sp, #56]	@ 0x38
 8009476:	1c51      	adds	r1, r2, #1
 8009478:	9119      	str	r1, [sp, #100]	@ 0x64
 800947a:	7852      	ldrb	r2, [r2, #1]
 800947c:	2a00      	cmp	r2, #0
 800947e:	d1c5      	bne.n	800940c <_strtod_l+0x34>
 8009480:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009482:	9419      	str	r4, [sp, #100]	@ 0x64
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8570 	bne.w	8009f6a <_strtod_l+0xb92>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	e7e5      	b.n	800945c <_strtod_l+0x84>
 8009490:	2100      	movs	r1, #0
 8009492:	e7ef      	b.n	8009474 <_strtod_l+0x9c>
 8009494:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009496:	b13a      	cbz	r2, 80094a8 <_strtod_l+0xd0>
 8009498:	2135      	movs	r1, #53	@ 0x35
 800949a:	a81c      	add	r0, sp, #112	@ 0x70
 800949c:	f7ff ff3a 	bl	8009314 <__copybits>
 80094a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094a2:	9805      	ldr	r0, [sp, #20]
 80094a4:	f7ff fb10 	bl	8008ac8 <_Bfree>
 80094a8:	3e01      	subs	r6, #1
 80094aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094ac:	2e04      	cmp	r6, #4
 80094ae:	d806      	bhi.n	80094be <_strtod_l+0xe6>
 80094b0:	e8df f006 	tbb	[pc, r6]
 80094b4:	201d0314 	.word	0x201d0314
 80094b8:	14          	.byte	0x14
 80094b9:	00          	.byte	0x00
 80094ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80094be:	05e1      	lsls	r1, r4, #23
 80094c0:	bf48      	it	mi
 80094c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ca:	0d1b      	lsrs	r3, r3, #20
 80094cc:	051b      	lsls	r3, r3, #20
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1bb      	bne.n	800944a <_strtod_l+0x72>
 80094d2:	f7fe fb1f 	bl	8007b14 <__errno>
 80094d6:	2322      	movs	r3, #34	@ 0x22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7b6      	b.n	800944a <_strtod_l+0x72>
 80094dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094ec:	e7e7      	b.n	80094be <_strtod_l+0xe6>
 80094ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009670 <_strtod_l+0x298>
 80094f2:	e7e4      	b.n	80094be <_strtod_l+0xe6>
 80094f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094f8:	f04f 3aff 	mov.w	sl, #4294967295
 80094fc:	e7df      	b.n	80094be <_strtod_l+0xe6>
 80094fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	9219      	str	r2, [sp, #100]	@ 0x64
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b30      	cmp	r3, #48	@ 0x30
 8009508:	d0f9      	beq.n	80094fe <_strtod_l+0x126>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d09d      	beq.n	800944a <_strtod_l+0x72>
 800950e:	2301      	movs	r3, #1
 8009510:	2700      	movs	r7, #0
 8009512:	9308      	str	r3, [sp, #32]
 8009514:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009516:	930c      	str	r3, [sp, #48]	@ 0x30
 8009518:	970b      	str	r7, [sp, #44]	@ 0x2c
 800951a:	46b9      	mov	r9, r7
 800951c:	220a      	movs	r2, #10
 800951e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009520:	7805      	ldrb	r5, [r0, #0]
 8009522:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009526:	b2d9      	uxtb	r1, r3
 8009528:	2909      	cmp	r1, #9
 800952a:	d928      	bls.n	800957e <_strtod_l+0x1a6>
 800952c:	494f      	ldr	r1, [pc, #316]	@ (800966c <_strtod_l+0x294>)
 800952e:	2201      	movs	r2, #1
 8009530:	f000 ffd6 	bl	800a4e0 <strncmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	d032      	beq.n	800959e <_strtod_l+0x1c6>
 8009538:	2000      	movs	r0, #0
 800953a:	462a      	mov	r2, r5
 800953c:	900a      	str	r0, [sp, #40]	@ 0x28
 800953e:	464d      	mov	r5, r9
 8009540:	4603      	mov	r3, r0
 8009542:	2a65      	cmp	r2, #101	@ 0x65
 8009544:	d001      	beq.n	800954a <_strtod_l+0x172>
 8009546:	2a45      	cmp	r2, #69	@ 0x45
 8009548:	d114      	bne.n	8009574 <_strtod_l+0x19c>
 800954a:	b91d      	cbnz	r5, 8009554 <_strtod_l+0x17c>
 800954c:	9a08      	ldr	r2, [sp, #32]
 800954e:	4302      	orrs	r2, r0
 8009550:	d096      	beq.n	8009480 <_strtod_l+0xa8>
 8009552:	2500      	movs	r5, #0
 8009554:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009556:	1c62      	adds	r2, r4, #1
 8009558:	9219      	str	r2, [sp, #100]	@ 0x64
 800955a:	7862      	ldrb	r2, [r4, #1]
 800955c:	2a2b      	cmp	r2, #43	@ 0x2b
 800955e:	d07a      	beq.n	8009656 <_strtod_l+0x27e>
 8009560:	2a2d      	cmp	r2, #45	@ 0x2d
 8009562:	d07e      	beq.n	8009662 <_strtod_l+0x28a>
 8009564:	f04f 0c00 	mov.w	ip, #0
 8009568:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800956c:	2909      	cmp	r1, #9
 800956e:	f240 8085 	bls.w	800967c <_strtod_l+0x2a4>
 8009572:	9419      	str	r4, [sp, #100]	@ 0x64
 8009574:	f04f 0800 	mov.w	r8, #0
 8009578:	e0a5      	b.n	80096c6 <_strtod_l+0x2ee>
 800957a:	2300      	movs	r3, #0
 800957c:	e7c8      	b.n	8009510 <_strtod_l+0x138>
 800957e:	f1b9 0f08 	cmp.w	r9, #8
 8009582:	bfd8      	it	le
 8009584:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009586:	f100 0001 	add.w	r0, r0, #1
 800958a:	bfda      	itte	le
 800958c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009590:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009592:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009596:	f109 0901 	add.w	r9, r9, #1
 800959a:	9019      	str	r0, [sp, #100]	@ 0x64
 800959c:	e7bf      	b.n	800951e <_strtod_l+0x146>
 800959e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095a4:	785a      	ldrb	r2, [r3, #1]
 80095a6:	f1b9 0f00 	cmp.w	r9, #0
 80095aa:	d03b      	beq.n	8009624 <_strtod_l+0x24c>
 80095ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80095ae:	464d      	mov	r5, r9
 80095b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095b4:	2b09      	cmp	r3, #9
 80095b6:	d912      	bls.n	80095de <_strtod_l+0x206>
 80095b8:	2301      	movs	r3, #1
 80095ba:	e7c2      	b.n	8009542 <_strtod_l+0x16a>
 80095bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80095c2:	785a      	ldrb	r2, [r3, #1]
 80095c4:	3001      	adds	r0, #1
 80095c6:	2a30      	cmp	r2, #48	@ 0x30
 80095c8:	d0f8      	beq.n	80095bc <_strtod_l+0x1e4>
 80095ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095ce:	2b08      	cmp	r3, #8
 80095d0:	f200 84d2 	bhi.w	8009f78 <_strtod_l+0xba0>
 80095d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80095d8:	2000      	movs	r0, #0
 80095da:	930c      	str	r3, [sp, #48]	@ 0x30
 80095dc:	4605      	mov	r5, r0
 80095de:	3a30      	subs	r2, #48	@ 0x30
 80095e0:	f100 0301 	add.w	r3, r0, #1
 80095e4:	d018      	beq.n	8009618 <_strtod_l+0x240>
 80095e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095e8:	4419      	add	r1, r3
 80095ea:	910a      	str	r1, [sp, #40]	@ 0x28
 80095ec:	462e      	mov	r6, r5
 80095ee:	f04f 0e0a 	mov.w	lr, #10
 80095f2:	1c71      	adds	r1, r6, #1
 80095f4:	eba1 0c05 	sub.w	ip, r1, r5
 80095f8:	4563      	cmp	r3, ip
 80095fa:	dc15      	bgt.n	8009628 <_strtod_l+0x250>
 80095fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009600:	182b      	adds	r3, r5, r0
 8009602:	2b08      	cmp	r3, #8
 8009604:	f105 0501 	add.w	r5, r5, #1
 8009608:	4405      	add	r5, r0
 800960a:	dc1a      	bgt.n	8009642 <_strtod_l+0x26a>
 800960c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800960e:	230a      	movs	r3, #10
 8009610:	fb03 2301 	mla	r3, r3, r1, r2
 8009614:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009616:	2300      	movs	r3, #0
 8009618:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800961a:	1c51      	adds	r1, r2, #1
 800961c:	9119      	str	r1, [sp, #100]	@ 0x64
 800961e:	7852      	ldrb	r2, [r2, #1]
 8009620:	4618      	mov	r0, r3
 8009622:	e7c5      	b.n	80095b0 <_strtod_l+0x1d8>
 8009624:	4648      	mov	r0, r9
 8009626:	e7ce      	b.n	80095c6 <_strtod_l+0x1ee>
 8009628:	2e08      	cmp	r6, #8
 800962a:	dc05      	bgt.n	8009638 <_strtod_l+0x260>
 800962c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800962e:	fb0e f606 	mul.w	r6, lr, r6
 8009632:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009634:	460e      	mov	r6, r1
 8009636:	e7dc      	b.n	80095f2 <_strtod_l+0x21a>
 8009638:	2910      	cmp	r1, #16
 800963a:	bfd8      	it	le
 800963c:	fb0e f707 	mulle.w	r7, lr, r7
 8009640:	e7f8      	b.n	8009634 <_strtod_l+0x25c>
 8009642:	2b0f      	cmp	r3, #15
 8009644:	bfdc      	itt	le
 8009646:	230a      	movle	r3, #10
 8009648:	fb03 2707 	mlale	r7, r3, r7, r2
 800964c:	e7e3      	b.n	8009616 <_strtod_l+0x23e>
 800964e:	2300      	movs	r3, #0
 8009650:	930a      	str	r3, [sp, #40]	@ 0x28
 8009652:	2301      	movs	r3, #1
 8009654:	e77a      	b.n	800954c <_strtod_l+0x174>
 8009656:	f04f 0c00 	mov.w	ip, #0
 800965a:	1ca2      	adds	r2, r4, #2
 800965c:	9219      	str	r2, [sp, #100]	@ 0x64
 800965e:	78a2      	ldrb	r2, [r4, #2]
 8009660:	e782      	b.n	8009568 <_strtod_l+0x190>
 8009662:	f04f 0c01 	mov.w	ip, #1
 8009666:	e7f8      	b.n	800965a <_strtod_l+0x282>
 8009668:	0800b634 	.word	0x0800b634
 800966c:	0800b46b 	.word	0x0800b46b
 8009670:	7ff00000 	.word	0x7ff00000
 8009674:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009676:	1c51      	adds	r1, r2, #1
 8009678:	9119      	str	r1, [sp, #100]	@ 0x64
 800967a:	7852      	ldrb	r2, [r2, #1]
 800967c:	2a30      	cmp	r2, #48	@ 0x30
 800967e:	d0f9      	beq.n	8009674 <_strtod_l+0x29c>
 8009680:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009684:	2908      	cmp	r1, #8
 8009686:	f63f af75 	bhi.w	8009574 <_strtod_l+0x19c>
 800968a:	3a30      	subs	r2, #48	@ 0x30
 800968c:	9209      	str	r2, [sp, #36]	@ 0x24
 800968e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009690:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009692:	f04f 080a 	mov.w	r8, #10
 8009696:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009698:	1c56      	adds	r6, r2, #1
 800969a:	9619      	str	r6, [sp, #100]	@ 0x64
 800969c:	7852      	ldrb	r2, [r2, #1]
 800969e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80096a2:	f1be 0f09 	cmp.w	lr, #9
 80096a6:	d939      	bls.n	800971c <_strtod_l+0x344>
 80096a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096aa:	1a76      	subs	r6, r6, r1
 80096ac:	2e08      	cmp	r6, #8
 80096ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096b2:	dc03      	bgt.n	80096bc <_strtod_l+0x2e4>
 80096b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096b6:	4588      	cmp	r8, r1
 80096b8:	bfa8      	it	ge
 80096ba:	4688      	movge	r8, r1
 80096bc:	f1bc 0f00 	cmp.w	ip, #0
 80096c0:	d001      	beq.n	80096c6 <_strtod_l+0x2ee>
 80096c2:	f1c8 0800 	rsb	r8, r8, #0
 80096c6:	2d00      	cmp	r5, #0
 80096c8:	d14e      	bne.n	8009768 <_strtod_l+0x390>
 80096ca:	9908      	ldr	r1, [sp, #32]
 80096cc:	4308      	orrs	r0, r1
 80096ce:	f47f aebc 	bne.w	800944a <_strtod_l+0x72>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f47f aed4 	bne.w	8009480 <_strtod_l+0xa8>
 80096d8:	2a69      	cmp	r2, #105	@ 0x69
 80096da:	d028      	beq.n	800972e <_strtod_l+0x356>
 80096dc:	dc25      	bgt.n	800972a <_strtod_l+0x352>
 80096de:	2a49      	cmp	r2, #73	@ 0x49
 80096e0:	d025      	beq.n	800972e <_strtod_l+0x356>
 80096e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80096e4:	f47f aecc 	bne.w	8009480 <_strtod_l+0xa8>
 80096e8:	499a      	ldr	r1, [pc, #616]	@ (8009954 <_strtod_l+0x57c>)
 80096ea:	a819      	add	r0, sp, #100	@ 0x64
 80096ec:	f001 f9e0 	bl	800aab0 <__match>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	f43f aec5 	beq.w	8009480 <_strtod_l+0xa8>
 80096f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b28      	cmp	r3, #40	@ 0x28
 80096fc:	d12e      	bne.n	800975c <_strtod_l+0x384>
 80096fe:	4996      	ldr	r1, [pc, #600]	@ (8009958 <_strtod_l+0x580>)
 8009700:	aa1c      	add	r2, sp, #112	@ 0x70
 8009702:	a819      	add	r0, sp, #100	@ 0x64
 8009704:	f001 f9e8 	bl	800aad8 <__hexnan>
 8009708:	2805      	cmp	r0, #5
 800970a:	d127      	bne.n	800975c <_strtod_l+0x384>
 800970c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800970e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009712:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009716:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800971a:	e696      	b.n	800944a <_strtod_l+0x72>
 800971c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800971e:	fb08 2101 	mla	r1, r8, r1, r2
 8009722:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009726:	9209      	str	r2, [sp, #36]	@ 0x24
 8009728:	e7b5      	b.n	8009696 <_strtod_l+0x2be>
 800972a:	2a6e      	cmp	r2, #110	@ 0x6e
 800972c:	e7da      	b.n	80096e4 <_strtod_l+0x30c>
 800972e:	498b      	ldr	r1, [pc, #556]	@ (800995c <_strtod_l+0x584>)
 8009730:	a819      	add	r0, sp, #100	@ 0x64
 8009732:	f001 f9bd 	bl	800aab0 <__match>
 8009736:	2800      	cmp	r0, #0
 8009738:	f43f aea2 	beq.w	8009480 <_strtod_l+0xa8>
 800973c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800973e:	4988      	ldr	r1, [pc, #544]	@ (8009960 <_strtod_l+0x588>)
 8009740:	3b01      	subs	r3, #1
 8009742:	a819      	add	r0, sp, #100	@ 0x64
 8009744:	9319      	str	r3, [sp, #100]	@ 0x64
 8009746:	f001 f9b3 	bl	800aab0 <__match>
 800974a:	b910      	cbnz	r0, 8009752 <_strtod_l+0x37a>
 800974c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800974e:	3301      	adds	r3, #1
 8009750:	9319      	str	r3, [sp, #100]	@ 0x64
 8009752:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009970 <_strtod_l+0x598>
 8009756:	f04f 0a00 	mov.w	sl, #0
 800975a:	e676      	b.n	800944a <_strtod_l+0x72>
 800975c:	4881      	ldr	r0, [pc, #516]	@ (8009964 <_strtod_l+0x58c>)
 800975e:	f000 fee3 	bl	800a528 <nan>
 8009762:	ec5b ab10 	vmov	sl, fp, d0
 8009766:	e670      	b.n	800944a <_strtod_l+0x72>
 8009768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800976a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800976c:	eba8 0303 	sub.w	r3, r8, r3
 8009770:	f1b9 0f00 	cmp.w	r9, #0
 8009774:	bf08      	it	eq
 8009776:	46a9      	moveq	r9, r5
 8009778:	2d10      	cmp	r5, #16
 800977a:	9309      	str	r3, [sp, #36]	@ 0x24
 800977c:	462c      	mov	r4, r5
 800977e:	bfa8      	it	ge
 8009780:	2410      	movge	r4, #16
 8009782:	f7f6 fec7 	bl	8000514 <__aeabi_ui2d>
 8009786:	2d09      	cmp	r5, #9
 8009788:	4682      	mov	sl, r0
 800978a:	468b      	mov	fp, r1
 800978c:	dc13      	bgt.n	80097b6 <_strtod_l+0x3de>
 800978e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f ae5a 	beq.w	800944a <_strtod_l+0x72>
 8009796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009798:	dd78      	ble.n	800988c <_strtod_l+0x4b4>
 800979a:	2b16      	cmp	r3, #22
 800979c:	dc5f      	bgt.n	800985e <_strtod_l+0x486>
 800979e:	4972      	ldr	r1, [pc, #456]	@ (8009968 <_strtod_l+0x590>)
 80097a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a8:	4652      	mov	r2, sl
 80097aa:	465b      	mov	r3, fp
 80097ac:	f7f6 ff2c 	bl	8000608 <__aeabi_dmul>
 80097b0:	4682      	mov	sl, r0
 80097b2:	468b      	mov	fp, r1
 80097b4:	e649      	b.n	800944a <_strtod_l+0x72>
 80097b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009968 <_strtod_l+0x590>)
 80097b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097c0:	f7f6 ff22 	bl	8000608 <__aeabi_dmul>
 80097c4:	4682      	mov	sl, r0
 80097c6:	4638      	mov	r0, r7
 80097c8:	468b      	mov	fp, r1
 80097ca:	f7f6 fea3 	bl	8000514 <__aeabi_ui2d>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4650      	mov	r0, sl
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f6 fd61 	bl	800029c <__adddf3>
 80097da:	2d0f      	cmp	r5, #15
 80097dc:	4682      	mov	sl, r0
 80097de:	468b      	mov	fp, r1
 80097e0:	ddd5      	ble.n	800978e <_strtod_l+0x3b6>
 80097e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e4:	1b2c      	subs	r4, r5, r4
 80097e6:	441c      	add	r4, r3
 80097e8:	2c00      	cmp	r4, #0
 80097ea:	f340 8093 	ble.w	8009914 <_strtod_l+0x53c>
 80097ee:	f014 030f 	ands.w	r3, r4, #15
 80097f2:	d00a      	beq.n	800980a <_strtod_l+0x432>
 80097f4:	495c      	ldr	r1, [pc, #368]	@ (8009968 <_strtod_l+0x590>)
 80097f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097fa:	4652      	mov	r2, sl
 80097fc:	465b      	mov	r3, fp
 80097fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009802:	f7f6 ff01 	bl	8000608 <__aeabi_dmul>
 8009806:	4682      	mov	sl, r0
 8009808:	468b      	mov	fp, r1
 800980a:	f034 040f 	bics.w	r4, r4, #15
 800980e:	d073      	beq.n	80098f8 <_strtod_l+0x520>
 8009810:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009814:	dd49      	ble.n	80098aa <_strtod_l+0x4d2>
 8009816:	2400      	movs	r4, #0
 8009818:	46a0      	mov	r8, r4
 800981a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800981c:	46a1      	mov	r9, r4
 800981e:	9a05      	ldr	r2, [sp, #20]
 8009820:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009970 <_strtod_l+0x598>
 8009824:	2322      	movs	r3, #34	@ 0x22
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	f04f 0a00 	mov.w	sl, #0
 800982c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	f43f ae0b 	beq.w	800944a <_strtod_l+0x72>
 8009834:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009836:	9805      	ldr	r0, [sp, #20]
 8009838:	f7ff f946 	bl	8008ac8 <_Bfree>
 800983c:	9805      	ldr	r0, [sp, #20]
 800983e:	4649      	mov	r1, r9
 8009840:	f7ff f942 	bl	8008ac8 <_Bfree>
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	4641      	mov	r1, r8
 8009848:	f7ff f93e 	bl	8008ac8 <_Bfree>
 800984c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f7ff f93a 	bl	8008ac8 <_Bfree>
 8009854:	9805      	ldr	r0, [sp, #20]
 8009856:	4621      	mov	r1, r4
 8009858:	f7ff f936 	bl	8008ac8 <_Bfree>
 800985c:	e5f5      	b.n	800944a <_strtod_l+0x72>
 800985e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009860:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009864:	4293      	cmp	r3, r2
 8009866:	dbbc      	blt.n	80097e2 <_strtod_l+0x40a>
 8009868:	4c3f      	ldr	r4, [pc, #252]	@ (8009968 <_strtod_l+0x590>)
 800986a:	f1c5 050f 	rsb	r5, r5, #15
 800986e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009872:	4652      	mov	r2, sl
 8009874:	465b      	mov	r3, fp
 8009876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987a:	f7f6 fec5 	bl	8000608 <__aeabi_dmul>
 800987e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009880:	1b5d      	subs	r5, r3, r5
 8009882:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009886:	e9d4 2300 	ldrd	r2, r3, [r4]
 800988a:	e78f      	b.n	80097ac <_strtod_l+0x3d4>
 800988c:	3316      	adds	r3, #22
 800988e:	dba8      	blt.n	80097e2 <_strtod_l+0x40a>
 8009890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009892:	eba3 0808 	sub.w	r8, r3, r8
 8009896:	4b34      	ldr	r3, [pc, #208]	@ (8009968 <_strtod_l+0x590>)
 8009898:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800989c:	e9d8 2300 	ldrd	r2, r3, [r8]
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	f7f6 ffda 	bl	800085c <__aeabi_ddiv>
 80098a8:	e782      	b.n	80097b0 <_strtod_l+0x3d8>
 80098aa:	2300      	movs	r3, #0
 80098ac:	4f2f      	ldr	r7, [pc, #188]	@ (800996c <_strtod_l+0x594>)
 80098ae:	1124      	asrs	r4, r4, #4
 80098b0:	4650      	mov	r0, sl
 80098b2:	4659      	mov	r1, fp
 80098b4:	461e      	mov	r6, r3
 80098b6:	2c01      	cmp	r4, #1
 80098b8:	dc21      	bgt.n	80098fe <_strtod_l+0x526>
 80098ba:	b10b      	cbz	r3, 80098c0 <_strtod_l+0x4e8>
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	492a      	ldr	r1, [pc, #168]	@ (800996c <_strtod_l+0x594>)
 80098c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80098ca:	4652      	mov	r2, sl
 80098cc:	465b      	mov	r3, fp
 80098ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098d2:	f7f6 fe99 	bl	8000608 <__aeabi_dmul>
 80098d6:	4b26      	ldr	r3, [pc, #152]	@ (8009970 <_strtod_l+0x598>)
 80098d8:	460a      	mov	r2, r1
 80098da:	400b      	ands	r3, r1
 80098dc:	4925      	ldr	r1, [pc, #148]	@ (8009974 <_strtod_l+0x59c>)
 80098de:	428b      	cmp	r3, r1
 80098e0:	4682      	mov	sl, r0
 80098e2:	d898      	bhi.n	8009816 <_strtod_l+0x43e>
 80098e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf86      	itte	hi
 80098ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009978 <_strtod_l+0x5a0>
 80098f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80098f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098f8:	2300      	movs	r3, #0
 80098fa:	9308      	str	r3, [sp, #32]
 80098fc:	e076      	b.n	80099ec <_strtod_l+0x614>
 80098fe:	07e2      	lsls	r2, r4, #31
 8009900:	d504      	bpl.n	800990c <_strtod_l+0x534>
 8009902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009906:	f7f6 fe7f 	bl	8000608 <__aeabi_dmul>
 800990a:	2301      	movs	r3, #1
 800990c:	3601      	adds	r6, #1
 800990e:	1064      	asrs	r4, r4, #1
 8009910:	3708      	adds	r7, #8
 8009912:	e7d0      	b.n	80098b6 <_strtod_l+0x4de>
 8009914:	d0f0      	beq.n	80098f8 <_strtod_l+0x520>
 8009916:	4264      	negs	r4, r4
 8009918:	f014 020f 	ands.w	r2, r4, #15
 800991c:	d00a      	beq.n	8009934 <_strtod_l+0x55c>
 800991e:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <_strtod_l+0x590>)
 8009920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 ff96 	bl	800085c <__aeabi_ddiv>
 8009930:	4682      	mov	sl, r0
 8009932:	468b      	mov	fp, r1
 8009934:	1124      	asrs	r4, r4, #4
 8009936:	d0df      	beq.n	80098f8 <_strtod_l+0x520>
 8009938:	2c1f      	cmp	r4, #31
 800993a:	dd1f      	ble.n	800997c <_strtod_l+0x5a4>
 800993c:	2400      	movs	r4, #0
 800993e:	46a0      	mov	r8, r4
 8009940:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009942:	46a1      	mov	r9, r4
 8009944:	9a05      	ldr	r2, [sp, #20]
 8009946:	2322      	movs	r3, #34	@ 0x22
 8009948:	f04f 0a00 	mov.w	sl, #0
 800994c:	f04f 0b00 	mov.w	fp, #0
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	e76b      	b.n	800982c <_strtod_l+0x454>
 8009954:	0800b359 	.word	0x0800b359
 8009958:	0800b620 	.word	0x0800b620
 800995c:	0800b351 	.word	0x0800b351
 8009960:	0800b388 	.word	0x0800b388
 8009964:	0800b4c1 	.word	0x0800b4c1
 8009968:	0800b558 	.word	0x0800b558
 800996c:	0800b530 	.word	0x0800b530
 8009970:	7ff00000 	.word	0x7ff00000
 8009974:	7ca00000 	.word	0x7ca00000
 8009978:	7fefffff 	.word	0x7fefffff
 800997c:	f014 0310 	ands.w	r3, r4, #16
 8009980:	bf18      	it	ne
 8009982:	236a      	movne	r3, #106	@ 0x6a
 8009984:	4ea9      	ldr	r6, [pc, #676]	@ (8009c2c <_strtod_l+0x854>)
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	2300      	movs	r3, #0
 800998e:	07e7      	lsls	r7, r4, #31
 8009990:	d504      	bpl.n	800999c <_strtod_l+0x5c4>
 8009992:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009996:	f7f6 fe37 	bl	8000608 <__aeabi_dmul>
 800999a:	2301      	movs	r3, #1
 800999c:	1064      	asrs	r4, r4, #1
 800999e:	f106 0608 	add.w	r6, r6, #8
 80099a2:	d1f4      	bne.n	800998e <_strtod_l+0x5b6>
 80099a4:	b10b      	cbz	r3, 80099aa <_strtod_l+0x5d2>
 80099a6:	4682      	mov	sl, r0
 80099a8:	468b      	mov	fp, r1
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	b1b3      	cbz	r3, 80099dc <_strtod_l+0x604>
 80099ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	4659      	mov	r1, fp
 80099ba:	dd0f      	ble.n	80099dc <_strtod_l+0x604>
 80099bc:	2b1f      	cmp	r3, #31
 80099be:	dd56      	ble.n	8009a6e <_strtod_l+0x696>
 80099c0:	2b34      	cmp	r3, #52	@ 0x34
 80099c2:	bfde      	ittt	le
 80099c4:	f04f 33ff 	movle.w	r3, #4294967295
 80099c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099cc:	4093      	lslle	r3, r2
 80099ce:	f04f 0a00 	mov.w	sl, #0
 80099d2:	bfcc      	ite	gt
 80099d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099d8:	ea03 0b01 	andle.w	fp, r3, r1
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4650      	mov	r0, sl
 80099e2:	4659      	mov	r1, fp
 80099e4:	f7f7 f878 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1a7      	bne.n	800993c <_strtod_l+0x564>
 80099ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	462b      	mov	r3, r5
 80099f6:	464a      	mov	r2, r9
 80099f8:	f7ff f8ce 	bl	8008b98 <__s2b>
 80099fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f af09 	beq.w	8009816 <_strtod_l+0x43e>
 8009a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	eba3 0308 	sub.w	r3, r3, r8
 8009a0e:	bfa8      	it	ge
 8009a10:	2300      	movge	r3, #0
 8009a12:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a14:	2400      	movs	r4, #0
 8009a16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a1a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a1c:	46a0      	mov	r8, r4
 8009a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a20:	9805      	ldr	r0, [sp, #20]
 8009a22:	6859      	ldr	r1, [r3, #4]
 8009a24:	f7ff f810 	bl	8008a48 <_Balloc>
 8009a28:	4681      	mov	r9, r0
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f43f aef7 	beq.w	800981e <_strtod_l+0x446>
 8009a30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	3202      	adds	r2, #2
 8009a36:	f103 010c 	add.w	r1, r3, #12
 8009a3a:	0092      	lsls	r2, r2, #2
 8009a3c:	300c      	adds	r0, #12
 8009a3e:	f7fe f896 	bl	8007b6e <memcpy>
 8009a42:	ec4b ab10 	vmov	d0, sl, fp
 8009a46:	9805      	ldr	r0, [sp, #20]
 8009a48:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a4a:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a50:	f7ff fbd6 	bl	8009200 <__d2b>
 8009a54:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f43f aee1 	beq.w	800981e <_strtod_l+0x446>
 8009a5c:	9805      	ldr	r0, [sp, #20]
 8009a5e:	2101      	movs	r1, #1
 8009a60:	f7ff f930 	bl	8008cc4 <__i2b>
 8009a64:	4680      	mov	r8, r0
 8009a66:	b948      	cbnz	r0, 8009a7c <_strtod_l+0x6a4>
 8009a68:	f04f 0800 	mov.w	r8, #0
 8009a6c:	e6d7      	b.n	800981e <_strtod_l+0x446>
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a72:	fa02 f303 	lsl.w	r3, r2, r3
 8009a76:	ea03 0a0a 	and.w	sl, r3, sl
 8009a7a:	e7af      	b.n	80099dc <_strtod_l+0x604>
 8009a7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	bfab      	itete	ge
 8009a84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a8c:	bfac      	ite	ge
 8009a8e:	18ef      	addge	r7, r5, r3
 8009a90:	1b5e      	sublt	r6, r3, r5
 8009a92:	9b08      	ldr	r3, [sp, #32]
 8009a94:	1aed      	subs	r5, r5, r3
 8009a96:	4415      	add	r5, r2
 8009a98:	4b65      	ldr	r3, [pc, #404]	@ (8009c30 <_strtod_l+0x858>)
 8009a9a:	3d01      	subs	r5, #1
 8009a9c:	429d      	cmp	r5, r3
 8009a9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009aa2:	da50      	bge.n	8009b46 <_strtod_l+0x76e>
 8009aa4:	1b5b      	subs	r3, r3, r5
 8009aa6:	2b1f      	cmp	r3, #31
 8009aa8:	eba2 0203 	sub.w	r2, r2, r3
 8009aac:	f04f 0101 	mov.w	r1, #1
 8009ab0:	dc3d      	bgt.n	8009b2e <_strtod_l+0x756>
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9310      	str	r3, [sp, #64]	@ 0x40
 8009abc:	18bd      	adds	r5, r7, r2
 8009abe:	9b08      	ldr	r3, [sp, #32]
 8009ac0:	42af      	cmp	r7, r5
 8009ac2:	4416      	add	r6, r2
 8009ac4:	441e      	add	r6, r3
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	bfa8      	it	ge
 8009aca:	462b      	movge	r3, r5
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	bfa8      	it	ge
 8009ad0:	4633      	movge	r3, r6
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bfc2      	ittt	gt
 8009ad6:	1aed      	subgt	r5, r5, r3
 8009ad8:	1af6      	subgt	r6, r6, r3
 8009ada:	1aff      	subgt	r7, r7, r3
 8009adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd16      	ble.n	8009b10 <_strtod_l+0x738>
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	9805      	ldr	r0, [sp, #20]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7ff f9a4 	bl	8008e34 <__pow5mult>
 8009aec:	4680      	mov	r8, r0
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d0ba      	beq.n	8009a68 <_strtod_l+0x690>
 8009af2:	4601      	mov	r1, r0
 8009af4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009af6:	9805      	ldr	r0, [sp, #20]
 8009af8:	f7ff f8fa 	bl	8008cf0 <__multiply>
 8009afc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f ae8d 	beq.w	800981e <_strtod_l+0x446>
 8009b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	f7fe ffde 	bl	8008ac8 <_Bfree>
 8009b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	dc1d      	bgt.n	8009b50 <_strtod_l+0x778>
 8009b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd23      	ble.n	8009b62 <_strtod_l+0x78a>
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b1e:	9805      	ldr	r0, [sp, #20]
 8009b20:	f7ff f988 	bl	8008e34 <__pow5mult>
 8009b24:	4681      	mov	r9, r0
 8009b26:	b9e0      	cbnz	r0, 8009b62 <_strtod_l+0x78a>
 8009b28:	f04f 0900 	mov.w	r9, #0
 8009b2c:	e677      	b.n	800981e <_strtod_l+0x446>
 8009b2e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b32:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b36:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b3a:	35e2      	adds	r5, #226	@ 0xe2
 8009b3c:	fa01 f305 	lsl.w	r3, r1, r5
 8009b40:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b44:	e7ba      	b.n	8009abc <_strtod_l+0x6e4>
 8009b46:	2300      	movs	r3, #0
 8009b48:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b4e:	e7b5      	b.n	8009abc <_strtod_l+0x6e4>
 8009b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b52:	9805      	ldr	r0, [sp, #20]
 8009b54:	462a      	mov	r2, r5
 8009b56:	f7ff f9c7 	bl	8008ee8 <__lshift>
 8009b5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d1d9      	bne.n	8009b14 <_strtod_l+0x73c>
 8009b60:	e65d      	b.n	800981e <_strtod_l+0x446>
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	dd07      	ble.n	8009b76 <_strtod_l+0x79e>
 8009b66:	4649      	mov	r1, r9
 8009b68:	9805      	ldr	r0, [sp, #20]
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	f7ff f9bc 	bl	8008ee8 <__lshift>
 8009b70:	4681      	mov	r9, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0d8      	beq.n	8009b28 <_strtod_l+0x750>
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	dd08      	ble.n	8009b8c <_strtod_l+0x7b4>
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	463a      	mov	r2, r7
 8009b80:	f7ff f9b2 	bl	8008ee8 <__lshift>
 8009b84:	4680      	mov	r8, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f43f ae49 	beq.w	800981e <_strtod_l+0x446>
 8009b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b8e:	9805      	ldr	r0, [sp, #20]
 8009b90:	464a      	mov	r2, r9
 8009b92:	f7ff fa31 	bl	8008ff8 <__mdiff>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	f43f ae40 	beq.w	800981e <_strtod_l+0x446>
 8009b9e:	68c3      	ldr	r3, [r0, #12]
 8009ba0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60c3      	str	r3, [r0, #12]
 8009ba6:	4641      	mov	r1, r8
 8009ba8:	f7ff fa0a 	bl	8008fc0 <__mcmp>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	da45      	bge.n	8009c3c <_strtod_l+0x864>
 8009bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8009bb6:	d16b      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d167      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc4:	0d1b      	lsrs	r3, r3, #20
 8009bc6:	051b      	lsls	r3, r3, #20
 8009bc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bcc:	d960      	bls.n	8009c90 <_strtod_l+0x8b8>
 8009bce:	6963      	ldr	r3, [r4, #20]
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_strtod_l+0x800>
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	dd5b      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	2201      	movs	r2, #1
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	f7ff f983 	bl	8008ee8 <__lshift>
 8009be2:	4641      	mov	r1, r8
 8009be4:	4604      	mov	r4, r0
 8009be6:	f7ff f9eb 	bl	8008fc0 <__mcmp>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	dd50      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bf2:	9a08      	ldr	r2, [sp, #32]
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	d06a      	beq.n	8009cd2 <_strtod_l+0x8fa>
 8009bfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c00:	d867      	bhi.n	8009cd2 <_strtod_l+0x8fa>
 8009c02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c06:	f67f ae9d 	bls.w	8009944 <_strtod_l+0x56c>
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <_strtod_l+0x85c>)
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	4659      	mov	r1, fp
 8009c10:	2200      	movs	r2, #0
 8009c12:	f7f6 fcf9 	bl	8000608 <__aeabi_dmul>
 8009c16:	4b08      	ldr	r3, [pc, #32]	@ (8009c38 <_strtod_l+0x860>)
 8009c18:	400b      	ands	r3, r1
 8009c1a:	4682      	mov	sl, r0
 8009c1c:	468b      	mov	fp, r1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f ae08 	bne.w	8009834 <_strtod_l+0x45c>
 8009c24:	9a05      	ldr	r2, [sp, #20]
 8009c26:	2322      	movs	r3, #34	@ 0x22
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e603      	b.n	8009834 <_strtod_l+0x45c>
 8009c2c:	0800b648 	.word	0x0800b648
 8009c30:	fffffc02 	.word	0xfffffc02
 8009c34:	39500000 	.word	0x39500000
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009c40:	d165      	bne.n	8009d0e <_strtod_l+0x936>
 8009c42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c48:	b35a      	cbz	r2, 8009ca2 <_strtod_l+0x8ca>
 8009c4a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ec8 <_strtod_l+0xaf0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d12b      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	4651      	mov	r1, sl
 8009c54:	b303      	cbz	r3, 8009c98 <_strtod_l+0x8c0>
 8009c56:	4b9d      	ldr	r3, [pc, #628]	@ (8009ecc <_strtod_l+0xaf4>)
 8009c58:	465a      	mov	r2, fp
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	d81b      	bhi.n	8009c9e <_strtod_l+0x8c6>
 8009c66:	0d1b      	lsrs	r3, r3, #20
 8009c68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d119      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c74:	4b96      	ldr	r3, [pc, #600]	@ (8009ed0 <_strtod_l+0xaf8>)
 8009c76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <_strtod_l+0x8aa>
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	f43f adce 	beq.w	800981e <_strtod_l+0x446>
 8009c82:	4b92      	ldr	r3, [pc, #584]	@ (8009ecc <_strtod_l+0xaf4>)
 8009c84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c86:	401a      	ands	r2, r3
 8009c88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c8c:	f04f 0a00 	mov.w	sl, #0
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1b9      	bne.n	8009c0a <_strtod_l+0x832>
 8009c96:	e5cd      	b.n	8009834 <_strtod_l+0x45c>
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	e7e8      	b.n	8009c70 <_strtod_l+0x898>
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	e7e6      	b.n	8009c70 <_strtod_l+0x898>
 8009ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ca6:	d0a2      	beq.n	8009bee <_strtod_l+0x816>
 8009ca8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009caa:	b1db      	cbz	r3, 8009ce4 <_strtod_l+0x90c>
 8009cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cae:	4213      	tst	r3, r2
 8009cb0:	d0ee      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb4:	9a08      	ldr	r2, [sp, #32]
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	4659      	mov	r1, fp
 8009cba:	b1bb      	cbz	r3, 8009cec <_strtod_l+0x914>
 8009cbc:	f7ff fb6e 	bl	800939c <sulp>
 8009cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc4:	ec53 2b10 	vmov	r2, r3, d0
 8009cc8:	f7f6 fae8 	bl	800029c <__adddf3>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	468b      	mov	fp, r1
 8009cd0:	e7de      	b.n	8009c90 <_strtod_l+0x8b8>
 8009cd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cde:	f04f 3aff 	mov.w	sl, #4294967295
 8009ce2:	e7d5      	b.n	8009c90 <_strtod_l+0x8b8>
 8009ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ce6:	ea13 0f0a 	tst.w	r3, sl
 8009cea:	e7e1      	b.n	8009cb0 <_strtod_l+0x8d8>
 8009cec:	f7ff fb56 	bl	800939c <sulp>
 8009cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf4:	ec53 2b10 	vmov	r2, r3, d0
 8009cf8:	f7f6 face 	bl	8000298 <__aeabi_dsub>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4682      	mov	sl, r0
 8009d02:	468b      	mov	fp, r1
 8009d04:	f7f6 fee8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d0c1      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009d0c:	e61a      	b.n	8009944 <_strtod_l+0x56c>
 8009d0e:	4641      	mov	r1, r8
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff facd 	bl	80092b0 <__ratio>
 8009d16:	ec57 6b10 	vmov	r6, r7, d0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 feec 	bl	8000b00 <__aeabi_dcmple>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d06f      	beq.n	8009e0c <_strtod_l+0xa34>
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d17a      	bne.n	8009e28 <_strtod_l+0xa50>
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	d158      	bne.n	8009dea <_strtod_l+0xa12>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d15a      	bne.n	8009df8 <_strtod_l+0xa20>
 8009d42:	4b64      	ldr	r3, [pc, #400]	@ (8009ed4 <_strtod_l+0xafc>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	f7f6 fecf 	bl	8000aec <__aeabi_dcmplt>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d159      	bne.n	8009e06 <_strtod_l+0xa2e>
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	4b60      	ldr	r3, [pc, #384]	@ (8009ed8 <_strtod_l+0xb00>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f7f6 fc55 	bl	8000608 <__aeabi_dmul>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d66:	9606      	str	r6, [sp, #24]
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d6e:	4d57      	ldr	r5, [pc, #348]	@ (8009ecc <_strtod_l+0xaf4>)
 8009d70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d76:	401d      	ands	r5, r3
 8009d78:	4b58      	ldr	r3, [pc, #352]	@ (8009edc <_strtod_l+0xb04>)
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	f040 80b2 	bne.w	8009ee4 <_strtod_l+0xb0c>
 8009d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d86:	ec4b ab10 	vmov	d0, sl, fp
 8009d8a:	f7ff f9c9 	bl	8009120 <__ulp>
 8009d8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d92:	ec51 0b10 	vmov	r0, r1, d0
 8009d96:	f7f6 fc37 	bl	8000608 <__aeabi_dmul>
 8009d9a:	4652      	mov	r2, sl
 8009d9c:	465b      	mov	r3, fp
 8009d9e:	f7f6 fa7d 	bl	800029c <__adddf3>
 8009da2:	460b      	mov	r3, r1
 8009da4:	4949      	ldr	r1, [pc, #292]	@ (8009ecc <_strtod_l+0xaf4>)
 8009da6:	4a4e      	ldr	r2, [pc, #312]	@ (8009ee0 <_strtod_l+0xb08>)
 8009da8:	4019      	ands	r1, r3
 8009daa:	4291      	cmp	r1, r2
 8009dac:	4682      	mov	sl, r0
 8009dae:	d942      	bls.n	8009e36 <_strtod_l+0xa5e>
 8009db0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009db2:	4b47      	ldr	r3, [pc, #284]	@ (8009ed0 <_strtod_l+0xaf8>)
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d103      	bne.n	8009dc0 <_strtod_l+0x9e8>
 8009db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f43f ad2f 	beq.w	800981e <_strtod_l+0x446>
 8009dc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ed0 <_strtod_l+0xaf8>
 8009dc4:	f04f 3aff 	mov.w	sl, #4294967295
 8009dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dca:	9805      	ldr	r0, [sp, #20]
 8009dcc:	f7fe fe7c 	bl	8008ac8 <_Bfree>
 8009dd0:	9805      	ldr	r0, [sp, #20]
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7fe fe78 	bl	8008ac8 <_Bfree>
 8009dd8:	9805      	ldr	r0, [sp, #20]
 8009dda:	4641      	mov	r1, r8
 8009ddc:	f7fe fe74 	bl	8008ac8 <_Bfree>
 8009de0:	9805      	ldr	r0, [sp, #20]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7fe fe70 	bl	8008ac8 <_Bfree>
 8009de8:	e619      	b.n	8009a1e <_strtod_l+0x646>
 8009dea:	f1ba 0f01 	cmp.w	sl, #1
 8009dee:	d103      	bne.n	8009df8 <_strtod_l+0xa20>
 8009df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f43f ada6 	beq.w	8009944 <_strtod_l+0x56c>
 8009df8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ea8 <_strtod_l+0xad0>
 8009dfc:	4f35      	ldr	r7, [pc, #212]	@ (8009ed4 <_strtod_l+0xafc>)
 8009dfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e02:	2600      	movs	r6, #0
 8009e04:	e7b1      	b.n	8009d6a <_strtod_l+0x992>
 8009e06:	4f34      	ldr	r7, [pc, #208]	@ (8009ed8 <_strtod_l+0xb00>)
 8009e08:	2600      	movs	r6, #0
 8009e0a:	e7aa      	b.n	8009d62 <_strtod_l+0x98a>
 8009e0c:	4b32      	ldr	r3, [pc, #200]	@ (8009ed8 <_strtod_l+0xb00>)
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fbf8 	bl	8000608 <__aeabi_dmul>
 8009e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d09f      	beq.n	8009d62 <_strtod_l+0x98a>
 8009e22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e26:	e7a0      	b.n	8009d6a <_strtod_l+0x992>
 8009e28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009eb0 <_strtod_l+0xad8>
 8009e2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e30:	ec57 6b17 	vmov	r6, r7, d7
 8009e34:	e799      	b.n	8009d6a <_strtod_l+0x992>
 8009e36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1c1      	bne.n	8009dc8 <_strtod_l+0x9f0>
 8009e44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e48:	0d1b      	lsrs	r3, r3, #20
 8009e4a:	051b      	lsls	r3, r3, #20
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	d1bb      	bne.n	8009dc8 <_strtod_l+0x9f0>
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 ff38 	bl	8000cc8 <__aeabi_d2lz>
 8009e58:	f7f6 fba8 	bl	80005ac <__aeabi_l2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fa18 	bl	8000298 <__aeabi_dsub>
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e76:	ea46 060a 	orr.w	r6, r6, sl
 8009e7a:	431e      	orrs	r6, r3
 8009e7c:	d06f      	beq.n	8009f5e <_strtod_l+0xb86>
 8009e7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009eb8 <_strtod_l+0xae0>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fe32 	bl	8000aec <__aeabi_dcmplt>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f47f acd3 	bne.w	8009834 <_strtod_l+0x45c>
 8009e8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ec0 <_strtod_l+0xae8>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e98:	f7f6 fe46 	bl	8000b28 <__aeabi_dcmpgt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d093      	beq.n	8009dc8 <_strtod_l+0x9f0>
 8009ea0:	e4c8      	b.n	8009834 <_strtod_l+0x45c>
 8009ea2:	bf00      	nop
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	94a03595 	.word	0x94a03595
 8009ebc:	3fdfffff 	.word	0x3fdfffff
 8009ec0:	35afe535 	.word	0x35afe535
 8009ec4:	3fe00000 	.word	0x3fe00000
 8009ec8:	000fffff 	.word	0x000fffff
 8009ecc:	7ff00000 	.word	0x7ff00000
 8009ed0:	7fefffff 	.word	0x7fefffff
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	3fe00000 	.word	0x3fe00000
 8009edc:	7fe00000 	.word	0x7fe00000
 8009ee0:	7c9fffff 	.word	0x7c9fffff
 8009ee4:	9b08      	ldr	r3, [sp, #32]
 8009ee6:	b323      	cbz	r3, 8009f32 <_strtod_l+0xb5a>
 8009ee8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009eec:	d821      	bhi.n	8009f32 <_strtod_l+0xb5a>
 8009eee:	a328      	add	r3, pc, #160	@ (adr r3, 8009f90 <_strtod_l+0xbb8>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fe02 	bl	8000b00 <__aeabi_dcmple>
 8009efc:	b1a0      	cbz	r0, 8009f28 <_strtod_l+0xb50>
 8009efe:	4639      	mov	r1, r7
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7f6 fe59 	bl	8000bb8 <__aeabi_d2uiz>
 8009f06:	2801      	cmp	r0, #1
 8009f08:	bf38      	it	cc
 8009f0a:	2001      	movcc	r0, #1
 8009f0c:	f7f6 fb02 	bl	8000514 <__aeabi_ui2d>
 8009f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	b9fb      	cbnz	r3, 8009f58 <_strtod_l+0xb80>
 8009f18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f2e:	1b5b      	subs	r3, r3, r5
 8009f30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f3a:	f7ff f8f1 	bl	8009120 <__ulp>
 8009f3e:	4650      	mov	r0, sl
 8009f40:	ec53 2b10 	vmov	r2, r3, d0
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f4e:	f7f6 f9a5 	bl	800029c <__adddf3>
 8009f52:	4682      	mov	sl, r0
 8009f54:	468b      	mov	fp, r1
 8009f56:	e770      	b.n	8009e3a <_strtod_l+0xa62>
 8009f58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f5c:	e7e0      	b.n	8009f20 <_strtod_l+0xb48>
 8009f5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f98 <_strtod_l+0xbc0>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 fdc2 	bl	8000aec <__aeabi_dcmplt>
 8009f68:	e798      	b.n	8009e9c <_strtod_l+0xac4>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	f7ff ba6d 	b.w	8009452 <_strtod_l+0x7a>
 8009f78:	2a65      	cmp	r2, #101	@ 0x65
 8009f7a:	f43f ab68 	beq.w	800964e <_strtod_l+0x276>
 8009f7e:	2a45      	cmp	r2, #69	@ 0x45
 8009f80:	f43f ab65 	beq.w	800964e <_strtod_l+0x276>
 8009f84:	2301      	movs	r3, #1
 8009f86:	f7ff bba0 	b.w	80096ca <_strtod_l+0x2f2>
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
 8009f90:	ffc00000 	.word	0xffc00000
 8009f94:	41dfffff 	.word	0x41dfffff
 8009f98:	94a03595 	.word	0x94a03595
 8009f9c:	3fcfffff 	.word	0x3fcfffff

08009fa0 <_strtod_r>:
 8009fa0:	4b01      	ldr	r3, [pc, #4]	@ (8009fa8 <_strtod_r+0x8>)
 8009fa2:	f7ff ba19 	b.w	80093d8 <_strtod_l>
 8009fa6:	bf00      	nop
 8009fa8:	20000144 	.word	0x20000144

08009fac <_strtol_l.isra.0>:
 8009fac:	2b24      	cmp	r3, #36	@ 0x24
 8009fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb2:	4686      	mov	lr, r0
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	d801      	bhi.n	8009fbc <_strtol_l.isra.0+0x10>
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d106      	bne.n	8009fca <_strtol_l.isra.0+0x1e>
 8009fbc:	f7fd fdaa 	bl	8007b14 <__errno>
 8009fc0:	2316      	movs	r3, #22
 8009fc2:	6003      	str	r3, [r0, #0]
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fca:	4834      	ldr	r0, [pc, #208]	@ (800a09c <_strtol_l.isra.0+0xf0>)
 8009fcc:	460d      	mov	r5, r1
 8009fce:	462a      	mov	r2, r5
 8009fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fd4:	5d06      	ldrb	r6, [r0, r4]
 8009fd6:	f016 0608 	ands.w	r6, r6, #8
 8009fda:	d1f8      	bne.n	8009fce <_strtol_l.isra.0+0x22>
 8009fdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fde:	d110      	bne.n	800a002 <_strtol_l.isra.0+0x56>
 8009fe0:	782c      	ldrb	r4, [r5, #0]
 8009fe2:	2601      	movs	r6, #1
 8009fe4:	1c95      	adds	r5, r2, #2
 8009fe6:	f033 0210 	bics.w	r2, r3, #16
 8009fea:	d115      	bne.n	800a018 <_strtol_l.isra.0+0x6c>
 8009fec:	2c30      	cmp	r4, #48	@ 0x30
 8009fee:	d10d      	bne.n	800a00c <_strtol_l.isra.0+0x60>
 8009ff0:	782a      	ldrb	r2, [r5, #0]
 8009ff2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ff6:	2a58      	cmp	r2, #88	@ 0x58
 8009ff8:	d108      	bne.n	800a00c <_strtol_l.isra.0+0x60>
 8009ffa:	786c      	ldrb	r4, [r5, #1]
 8009ffc:	3502      	adds	r5, #2
 8009ffe:	2310      	movs	r3, #16
 800a000:	e00a      	b.n	800a018 <_strtol_l.isra.0+0x6c>
 800a002:	2c2b      	cmp	r4, #43	@ 0x2b
 800a004:	bf04      	itt	eq
 800a006:	782c      	ldrbeq	r4, [r5, #0]
 800a008:	1c95      	addeq	r5, r2, #2
 800a00a:	e7ec      	b.n	8009fe6 <_strtol_l.isra.0+0x3a>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1f6      	bne.n	8009ffe <_strtol_l.isra.0+0x52>
 800a010:	2c30      	cmp	r4, #48	@ 0x30
 800a012:	bf14      	ite	ne
 800a014:	230a      	movne	r3, #10
 800a016:	2308      	moveq	r3, #8
 800a018:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a01c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a020:	2200      	movs	r2, #0
 800a022:	fbbc f9f3 	udiv	r9, ip, r3
 800a026:	4610      	mov	r0, r2
 800a028:	fb03 ca19 	mls	sl, r3, r9, ip
 800a02c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a030:	2f09      	cmp	r7, #9
 800a032:	d80f      	bhi.n	800a054 <_strtol_l.isra.0+0xa8>
 800a034:	463c      	mov	r4, r7
 800a036:	42a3      	cmp	r3, r4
 800a038:	dd1b      	ble.n	800a072 <_strtol_l.isra.0+0xc6>
 800a03a:	1c57      	adds	r7, r2, #1
 800a03c:	d007      	beq.n	800a04e <_strtol_l.isra.0+0xa2>
 800a03e:	4581      	cmp	r9, r0
 800a040:	d314      	bcc.n	800a06c <_strtol_l.isra.0+0xc0>
 800a042:	d101      	bne.n	800a048 <_strtol_l.isra.0+0x9c>
 800a044:	45a2      	cmp	sl, r4
 800a046:	db11      	blt.n	800a06c <_strtol_l.isra.0+0xc0>
 800a048:	fb00 4003 	mla	r0, r0, r3, r4
 800a04c:	2201      	movs	r2, #1
 800a04e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a052:	e7eb      	b.n	800a02c <_strtol_l.isra.0+0x80>
 800a054:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a058:	2f19      	cmp	r7, #25
 800a05a:	d801      	bhi.n	800a060 <_strtol_l.isra.0+0xb4>
 800a05c:	3c37      	subs	r4, #55	@ 0x37
 800a05e:	e7ea      	b.n	800a036 <_strtol_l.isra.0+0x8a>
 800a060:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a064:	2f19      	cmp	r7, #25
 800a066:	d804      	bhi.n	800a072 <_strtol_l.isra.0+0xc6>
 800a068:	3c57      	subs	r4, #87	@ 0x57
 800a06a:	e7e4      	b.n	800a036 <_strtol_l.isra.0+0x8a>
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	e7ed      	b.n	800a04e <_strtol_l.isra.0+0xa2>
 800a072:	1c53      	adds	r3, r2, #1
 800a074:	d108      	bne.n	800a088 <_strtol_l.isra.0+0xdc>
 800a076:	2322      	movs	r3, #34	@ 0x22
 800a078:	f8ce 3000 	str.w	r3, [lr]
 800a07c:	4660      	mov	r0, ip
 800a07e:	f1b8 0f00 	cmp.w	r8, #0
 800a082:	d0a0      	beq.n	8009fc6 <_strtol_l.isra.0+0x1a>
 800a084:	1e69      	subs	r1, r5, #1
 800a086:	e006      	b.n	800a096 <_strtol_l.isra.0+0xea>
 800a088:	b106      	cbz	r6, 800a08c <_strtol_l.isra.0+0xe0>
 800a08a:	4240      	negs	r0, r0
 800a08c:	f1b8 0f00 	cmp.w	r8, #0
 800a090:	d099      	beq.n	8009fc6 <_strtol_l.isra.0+0x1a>
 800a092:	2a00      	cmp	r2, #0
 800a094:	d1f6      	bne.n	800a084 <_strtol_l.isra.0+0xd8>
 800a096:	f8c8 1000 	str.w	r1, [r8]
 800a09a:	e794      	b.n	8009fc6 <_strtol_l.isra.0+0x1a>
 800a09c:	0800b671 	.word	0x0800b671

0800a0a0 <_strtol_r>:
 800a0a0:	f7ff bf84 	b.w	8009fac <_strtol_l.isra.0>

0800a0a4 <__ssputs_r>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	688e      	ldr	r6, [r1, #8]
 800a0aa:	461f      	mov	r7, r3
 800a0ac:	42be      	cmp	r6, r7
 800a0ae:	680b      	ldr	r3, [r1, #0]
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	4690      	mov	r8, r2
 800a0b6:	d82d      	bhi.n	800a114 <__ssputs_r+0x70>
 800a0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0c0:	d026      	beq.n	800a110 <__ssputs_r+0x6c>
 800a0c2:	6965      	ldr	r5, [r4, #20]
 800a0c4:	6909      	ldr	r1, [r1, #16]
 800a0c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ca:	eba3 0901 	sub.w	r9, r3, r1
 800a0ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0d2:	1c7b      	adds	r3, r7, #1
 800a0d4:	444b      	add	r3, r9
 800a0d6:	106d      	asrs	r5, r5, #1
 800a0d8:	429d      	cmp	r5, r3
 800a0da:	bf38      	it	cc
 800a0dc:	461d      	movcc	r5, r3
 800a0de:	0553      	lsls	r3, r2, #21
 800a0e0:	d527      	bpl.n	800a132 <__ssputs_r+0x8e>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7fe fc24 	bl	8008930 <_malloc_r>
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	b360      	cbz	r0, 800a146 <__ssputs_r+0xa2>
 800a0ec:	6921      	ldr	r1, [r4, #16]
 800a0ee:	464a      	mov	r2, r9
 800a0f0:	f7fd fd3d 	bl	8007b6e <memcpy>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	6126      	str	r6, [r4, #16]
 800a102:	6165      	str	r5, [r4, #20]
 800a104:	444e      	add	r6, r9
 800a106:	eba5 0509 	sub.w	r5, r5, r9
 800a10a:	6026      	str	r6, [r4, #0]
 800a10c:	60a5      	str	r5, [r4, #8]
 800a10e:	463e      	mov	r6, r7
 800a110:	42be      	cmp	r6, r7
 800a112:	d900      	bls.n	800a116 <__ssputs_r+0x72>
 800a114:	463e      	mov	r6, r7
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	4632      	mov	r2, r6
 800a11a:	4641      	mov	r1, r8
 800a11c:	f000 f9c6 	bl	800a4ac <memmove>
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	1b9b      	subs	r3, r3, r6
 800a124:	60a3      	str	r3, [r4, #8]
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	4433      	add	r3, r6
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	2000      	movs	r0, #0
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	462a      	mov	r2, r5
 800a134:	f000 fd7d 	bl	800ac32 <_realloc_r>
 800a138:	4606      	mov	r6, r0
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d1e0      	bne.n	800a100 <__ssputs_r+0x5c>
 800a13e:	6921      	ldr	r1, [r4, #16]
 800a140:	4650      	mov	r0, sl
 800a142:	f7fe fb81 	bl	8008848 <_free_r>
 800a146:	230c      	movs	r3, #12
 800a148:	f8ca 3000 	str.w	r3, [sl]
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e7e9      	b.n	800a12e <__ssputs_r+0x8a>
	...

0800a15c <_svfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	4698      	mov	r8, r3
 800a162:	898b      	ldrh	r3, [r1, #12]
 800a164:	061b      	lsls	r3, r3, #24
 800a166:	b09d      	sub	sp, #116	@ 0x74
 800a168:	4607      	mov	r7, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	4614      	mov	r4, r2
 800a16e:	d510      	bpl.n	800a192 <_svfiprintf_r+0x36>
 800a170:	690b      	ldr	r3, [r1, #16]
 800a172:	b973      	cbnz	r3, 800a192 <_svfiprintf_r+0x36>
 800a174:	2140      	movs	r1, #64	@ 0x40
 800a176:	f7fe fbdb 	bl	8008930 <_malloc_r>
 800a17a:	6028      	str	r0, [r5, #0]
 800a17c:	6128      	str	r0, [r5, #16]
 800a17e:	b930      	cbnz	r0, 800a18e <_svfiprintf_r+0x32>
 800a180:	230c      	movs	r3, #12
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	b01d      	add	sp, #116	@ 0x74
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	2340      	movs	r3, #64	@ 0x40
 800a190:	616b      	str	r3, [r5, #20]
 800a192:	2300      	movs	r3, #0
 800a194:	9309      	str	r3, [sp, #36]	@ 0x24
 800a196:	2320      	movs	r3, #32
 800a198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1a0:	2330      	movs	r3, #48	@ 0x30
 800a1a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a340 <_svfiprintf_r+0x1e4>
 800a1a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1aa:	f04f 0901 	mov.w	r9, #1
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	469a      	mov	sl, r3
 800a1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b6:	b10a      	cbz	r2, 800a1bc <_svfiprintf_r+0x60>
 800a1b8:	2a25      	cmp	r2, #37	@ 0x25
 800a1ba:	d1f9      	bne.n	800a1b0 <_svfiprintf_r+0x54>
 800a1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a1c0:	d00b      	beq.n	800a1da <_svfiprintf_r+0x7e>
 800a1c2:	465b      	mov	r3, fp
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff ff6b 	bl	800a0a4 <__ssputs_r>
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f000 80a7 	beq.w	800a322 <_svfiprintf_r+0x1c6>
 800a1d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1d6:	445a      	add	r2, fp
 800a1d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1da:	f89a 3000 	ldrb.w	r3, [sl]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 809f 	beq.w	800a322 <_svfiprintf_r+0x1c6>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ee:	f10a 0a01 	add.w	sl, sl, #1
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	9307      	str	r3, [sp, #28]
 800a1f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1fc:	4654      	mov	r4, sl
 800a1fe:	2205      	movs	r2, #5
 800a200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a204:	484e      	ldr	r0, [pc, #312]	@ (800a340 <_svfiprintf_r+0x1e4>)
 800a206:	f7f5 ffeb 	bl	80001e0 <memchr>
 800a20a:	9a04      	ldr	r2, [sp, #16]
 800a20c:	b9d8      	cbnz	r0, 800a246 <_svfiprintf_r+0xea>
 800a20e:	06d0      	lsls	r0, r2, #27
 800a210:	bf44      	itt	mi
 800a212:	2320      	movmi	r3, #32
 800a214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a218:	0711      	lsls	r1, r2, #28
 800a21a:	bf44      	itt	mi
 800a21c:	232b      	movmi	r3, #43	@ 0x2b
 800a21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b2a      	cmp	r3, #42	@ 0x2a
 800a228:	d015      	beq.n	800a256 <_svfiprintf_r+0xfa>
 800a22a:	9a07      	ldr	r2, [sp, #28]
 800a22c:	4654      	mov	r4, sl
 800a22e:	2000      	movs	r0, #0
 800a230:	f04f 0c0a 	mov.w	ip, #10
 800a234:	4621      	mov	r1, r4
 800a236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a23a:	3b30      	subs	r3, #48	@ 0x30
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d94b      	bls.n	800a2d8 <_svfiprintf_r+0x17c>
 800a240:	b1b0      	cbz	r0, 800a270 <_svfiprintf_r+0x114>
 800a242:	9207      	str	r2, [sp, #28]
 800a244:	e014      	b.n	800a270 <_svfiprintf_r+0x114>
 800a246:	eba0 0308 	sub.w	r3, r0, r8
 800a24a:	fa09 f303 	lsl.w	r3, r9, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	46a2      	mov	sl, r4
 800a254:	e7d2      	b.n	800a1fc <_svfiprintf_r+0xa0>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	1d19      	adds	r1, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9103      	str	r1, [sp, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfbb      	ittet	lt
 800a262:	425b      	neglt	r3, r3
 800a264:	f042 0202 	orrlt.w	r2, r2, #2
 800a268:	9307      	strge	r3, [sp, #28]
 800a26a:	9307      	strlt	r3, [sp, #28]
 800a26c:	bfb8      	it	lt
 800a26e:	9204      	strlt	r2, [sp, #16]
 800a270:	7823      	ldrb	r3, [r4, #0]
 800a272:	2b2e      	cmp	r3, #46	@ 0x2e
 800a274:	d10a      	bne.n	800a28c <_svfiprintf_r+0x130>
 800a276:	7863      	ldrb	r3, [r4, #1]
 800a278:	2b2a      	cmp	r3, #42	@ 0x2a
 800a27a:	d132      	bne.n	800a2e2 <_svfiprintf_r+0x186>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d1a      	adds	r2, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9203      	str	r2, [sp, #12]
 800a284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a288:	3402      	adds	r4, #2
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a350 <_svfiprintf_r+0x1f4>
 800a290:	7821      	ldrb	r1, [r4, #0]
 800a292:	2203      	movs	r2, #3
 800a294:	4650      	mov	r0, sl
 800a296:	f7f5 ffa3 	bl	80001e0 <memchr>
 800a29a:	b138      	cbz	r0, 800a2ac <_svfiprintf_r+0x150>
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	eba0 000a 	sub.w	r0, r0, sl
 800a2a2:	2240      	movs	r2, #64	@ 0x40
 800a2a4:	4082      	lsls	r2, r0
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b0:	4824      	ldr	r0, [pc, #144]	@ (800a344 <_svfiprintf_r+0x1e8>)
 800a2b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	f7f5 ff92 	bl	80001e0 <memchr>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d036      	beq.n	800a32e <_svfiprintf_r+0x1d2>
 800a2c0:	4b21      	ldr	r3, [pc, #132]	@ (800a348 <_svfiprintf_r+0x1ec>)
 800a2c2:	bb1b      	cbnz	r3, 800a30c <_svfiprintf_r+0x1b0>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	3307      	adds	r3, #7
 800a2c8:	f023 0307 	bic.w	r3, r3, #7
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d2:	4433      	add	r3, r6
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	e76a      	b.n	800a1ae <_svfiprintf_r+0x52>
 800a2d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2dc:	460c      	mov	r4, r1
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7a8      	b.n	800a234 <_svfiprintf_r+0xd8>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f4:	3a30      	subs	r2, #48	@ 0x30
 800a2f6:	2a09      	cmp	r2, #9
 800a2f8:	d903      	bls.n	800a302 <_svfiprintf_r+0x1a6>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0c6      	beq.n	800a28c <_svfiprintf_r+0x130>
 800a2fe:	9105      	str	r1, [sp, #20]
 800a300:	e7c4      	b.n	800a28c <_svfiprintf_r+0x130>
 800a302:	fb0c 2101 	mla	r1, ip, r1, r2
 800a306:	4604      	mov	r4, r0
 800a308:	2301      	movs	r3, #1
 800a30a:	e7f0      	b.n	800a2ee <_svfiprintf_r+0x192>
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	462a      	mov	r2, r5
 800a312:	4b0e      	ldr	r3, [pc, #56]	@ (800a34c <_svfiprintf_r+0x1f0>)
 800a314:	a904      	add	r1, sp, #16
 800a316:	4638      	mov	r0, r7
 800a318:	f7fc fcbe 	bl	8006c98 <_printf_float>
 800a31c:	1c42      	adds	r2, r0, #1
 800a31e:	4606      	mov	r6, r0
 800a320:	d1d6      	bne.n	800a2d0 <_svfiprintf_r+0x174>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	065b      	lsls	r3, r3, #25
 800a326:	f53f af2d 	bmi.w	800a184 <_svfiprintf_r+0x28>
 800a32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a32c:	e72c      	b.n	800a188 <_svfiprintf_r+0x2c>
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	462a      	mov	r2, r5
 800a334:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <_svfiprintf_r+0x1f0>)
 800a336:	a904      	add	r1, sp, #16
 800a338:	4638      	mov	r0, r7
 800a33a:	f7fc ff45 	bl	80071c8 <_printf_i>
 800a33e:	e7ed      	b.n	800a31c <_svfiprintf_r+0x1c0>
 800a340:	0800b46d 	.word	0x0800b46d
 800a344:	0800b477 	.word	0x0800b477
 800a348:	08006c99 	.word	0x08006c99
 800a34c:	0800a0a5 	.word	0x0800a0a5
 800a350:	0800b473 	.word	0x0800b473

0800a354 <__sflush_r>:
 800a354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	0716      	lsls	r6, r2, #28
 800a35e:	4605      	mov	r5, r0
 800a360:	460c      	mov	r4, r1
 800a362:	d454      	bmi.n	800a40e <__sflush_r+0xba>
 800a364:	684b      	ldr	r3, [r1, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	dc02      	bgt.n	800a370 <__sflush_r+0x1c>
 800a36a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dd48      	ble.n	800a402 <__sflush_r+0xae>
 800a370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a372:	2e00      	cmp	r6, #0
 800a374:	d045      	beq.n	800a402 <__sflush_r+0xae>
 800a376:	2300      	movs	r3, #0
 800a378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a37c:	682f      	ldr	r7, [r5, #0]
 800a37e:	6a21      	ldr	r1, [r4, #32]
 800a380:	602b      	str	r3, [r5, #0]
 800a382:	d030      	beq.n	800a3e6 <__sflush_r+0x92>
 800a384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	0759      	lsls	r1, r3, #29
 800a38a:	d505      	bpl.n	800a398 <__sflush_r+0x44>
 800a38c:	6863      	ldr	r3, [r4, #4]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a392:	b10b      	cbz	r3, 800a398 <__sflush_r+0x44>
 800a394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a396:	1ad2      	subs	r2, r2, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a39c:	6a21      	ldr	r1, [r4, #32]
 800a39e:	4628      	mov	r0, r5
 800a3a0:	47b0      	blx	r6
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	d106      	bne.n	800a3b6 <__sflush_r+0x62>
 800a3a8:	6829      	ldr	r1, [r5, #0]
 800a3aa:	291d      	cmp	r1, #29
 800a3ac:	d82b      	bhi.n	800a406 <__sflush_r+0xb2>
 800a3ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a458 <__sflush_r+0x104>)
 800a3b0:	40ca      	lsrs	r2, r1
 800a3b2:	07d6      	lsls	r6, r2, #31
 800a3b4:	d527      	bpl.n	800a406 <__sflush_r+0xb2>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	6062      	str	r2, [r4, #4]
 800a3ba:	04d9      	lsls	r1, r3, #19
 800a3bc:	6922      	ldr	r2, [r4, #16]
 800a3be:	6022      	str	r2, [r4, #0]
 800a3c0:	d504      	bpl.n	800a3cc <__sflush_r+0x78>
 800a3c2:	1c42      	adds	r2, r0, #1
 800a3c4:	d101      	bne.n	800a3ca <__sflush_r+0x76>
 800a3c6:	682b      	ldr	r3, [r5, #0]
 800a3c8:	b903      	cbnz	r3, 800a3cc <__sflush_r+0x78>
 800a3ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ce:	602f      	str	r7, [r5, #0]
 800a3d0:	b1b9      	cbz	r1, 800a402 <__sflush_r+0xae>
 800a3d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3d6:	4299      	cmp	r1, r3
 800a3d8:	d002      	beq.n	800a3e0 <__sflush_r+0x8c>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f7fe fa34 	bl	8008848 <_free_r>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3e4:	e00d      	b.n	800a402 <__sflush_r+0xae>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b0      	blx	r6
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	1c50      	adds	r0, r2, #1
 800a3f0:	d1c9      	bne.n	800a386 <__sflush_r+0x32>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0c6      	beq.n	800a386 <__sflush_r+0x32>
 800a3f8:	2b1d      	cmp	r3, #29
 800a3fa:	d001      	beq.n	800a400 <__sflush_r+0xac>
 800a3fc:	2b16      	cmp	r3, #22
 800a3fe:	d11e      	bne.n	800a43e <__sflush_r+0xea>
 800a400:	602f      	str	r7, [r5, #0]
 800a402:	2000      	movs	r0, #0
 800a404:	e022      	b.n	800a44c <__sflush_r+0xf8>
 800a406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a40a:	b21b      	sxth	r3, r3
 800a40c:	e01b      	b.n	800a446 <__sflush_r+0xf2>
 800a40e:	690f      	ldr	r7, [r1, #16]
 800a410:	2f00      	cmp	r7, #0
 800a412:	d0f6      	beq.n	800a402 <__sflush_r+0xae>
 800a414:	0793      	lsls	r3, r2, #30
 800a416:	680e      	ldr	r6, [r1, #0]
 800a418:	bf08      	it	eq
 800a41a:	694b      	ldreq	r3, [r1, #20]
 800a41c:	600f      	str	r7, [r1, #0]
 800a41e:	bf18      	it	ne
 800a420:	2300      	movne	r3, #0
 800a422:	eba6 0807 	sub.w	r8, r6, r7
 800a426:	608b      	str	r3, [r1, #8]
 800a428:	f1b8 0f00 	cmp.w	r8, #0
 800a42c:	dde9      	ble.n	800a402 <__sflush_r+0xae>
 800a42e:	6a21      	ldr	r1, [r4, #32]
 800a430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a432:	4643      	mov	r3, r8
 800a434:	463a      	mov	r2, r7
 800a436:	4628      	mov	r0, r5
 800a438:	47b0      	blx	r6
 800a43a:	2800      	cmp	r0, #0
 800a43c:	dc08      	bgt.n	800a450 <__sflush_r+0xfc>
 800a43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	f04f 30ff 	mov.w	r0, #4294967295
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	4407      	add	r7, r0
 800a452:	eba8 0800 	sub.w	r8, r8, r0
 800a456:	e7e7      	b.n	800a428 <__sflush_r+0xd4>
 800a458:	20400001 	.word	0x20400001

0800a45c <_fflush_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	690b      	ldr	r3, [r1, #16]
 800a460:	4605      	mov	r5, r0
 800a462:	460c      	mov	r4, r1
 800a464:	b913      	cbnz	r3, 800a46c <_fflush_r+0x10>
 800a466:	2500      	movs	r5, #0
 800a468:	4628      	mov	r0, r5
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	b118      	cbz	r0, 800a476 <_fflush_r+0x1a>
 800a46e:	6a03      	ldr	r3, [r0, #32]
 800a470:	b90b      	cbnz	r3, 800a476 <_fflush_r+0x1a>
 800a472:	f7fd fa61 	bl	8007938 <__sinit>
 800a476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f3      	beq.n	800a466 <_fflush_r+0xa>
 800a47e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a480:	07d0      	lsls	r0, r2, #31
 800a482:	d404      	bmi.n	800a48e <_fflush_r+0x32>
 800a484:	0599      	lsls	r1, r3, #22
 800a486:	d402      	bmi.n	800a48e <_fflush_r+0x32>
 800a488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a48a:	f7fd fb6e 	bl	8007b6a <__retarget_lock_acquire_recursive>
 800a48e:	4628      	mov	r0, r5
 800a490:	4621      	mov	r1, r4
 800a492:	f7ff ff5f 	bl	800a354 <__sflush_r>
 800a496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a498:	07da      	lsls	r2, r3, #31
 800a49a:	4605      	mov	r5, r0
 800a49c:	d4e4      	bmi.n	800a468 <_fflush_r+0xc>
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	059b      	lsls	r3, r3, #22
 800a4a2:	d4e1      	bmi.n	800a468 <_fflush_r+0xc>
 800a4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4a6:	f7fd fb61 	bl	8007b6c <__retarget_lock_release_recursive>
 800a4aa:	e7dd      	b.n	800a468 <_fflush_r+0xc>

0800a4ac <memmove>:
 800a4ac:	4288      	cmp	r0, r1
 800a4ae:	b510      	push	{r4, lr}
 800a4b0:	eb01 0402 	add.w	r4, r1, r2
 800a4b4:	d902      	bls.n	800a4bc <memmove+0x10>
 800a4b6:	4284      	cmp	r4, r0
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	d807      	bhi.n	800a4cc <memmove+0x20>
 800a4bc:	1e43      	subs	r3, r0, #1
 800a4be:	42a1      	cmp	r1, r4
 800a4c0:	d008      	beq.n	800a4d4 <memmove+0x28>
 800a4c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ca:	e7f8      	b.n	800a4be <memmove+0x12>
 800a4cc:	4402      	add	r2, r0
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	428a      	cmp	r2, r1
 800a4d2:	d100      	bne.n	800a4d6 <memmove+0x2a>
 800a4d4:	bd10      	pop	{r4, pc}
 800a4d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4de:	e7f7      	b.n	800a4d0 <memmove+0x24>

0800a4e0 <strncmp>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	b16a      	cbz	r2, 800a500 <strncmp+0x20>
 800a4e4:	3901      	subs	r1, #1
 800a4e6:	1884      	adds	r4, r0, r2
 800a4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d103      	bne.n	800a4fc <strncmp+0x1c>
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d001      	beq.n	800a4fc <strncmp+0x1c>
 800a4f8:	2a00      	cmp	r2, #0
 800a4fa:	d1f5      	bne.n	800a4e8 <strncmp+0x8>
 800a4fc:	1ad0      	subs	r0, r2, r3
 800a4fe:	bd10      	pop	{r4, pc}
 800a500:	4610      	mov	r0, r2
 800a502:	e7fc      	b.n	800a4fe <strncmp+0x1e>

0800a504 <_sbrk_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d06      	ldr	r5, [pc, #24]	@ (800a520 <_sbrk_r+0x1c>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	602b      	str	r3, [r5, #0]
 800a510:	f7f7 f830 	bl	8001574 <_sbrk>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_sbrk_r+0x1a>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_sbrk_r+0x1a>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	2000068c 	.word	0x2000068c
 800a524:	00000000 	.word	0x00000000

0800a528 <nan>:
 800a528:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a530 <nan+0x8>
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	00000000 	.word	0x00000000
 800a534:	7ff80000 	.word	0x7ff80000

0800a538 <__assert_func>:
 800a538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a53a:	4614      	mov	r4, r2
 800a53c:	461a      	mov	r2, r3
 800a53e:	4b09      	ldr	r3, [pc, #36]	@ (800a564 <__assert_func+0x2c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4605      	mov	r5, r0
 800a544:	68d8      	ldr	r0, [r3, #12]
 800a546:	b14c      	cbz	r4, 800a55c <__assert_func+0x24>
 800a548:	4b07      	ldr	r3, [pc, #28]	@ (800a568 <__assert_func+0x30>)
 800a54a:	9100      	str	r1, [sp, #0]
 800a54c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a550:	4906      	ldr	r1, [pc, #24]	@ (800a56c <__assert_func+0x34>)
 800a552:	462b      	mov	r3, r5
 800a554:	f000 fba8 	bl	800aca8 <fiprintf>
 800a558:	f000 fbb8 	bl	800accc <abort>
 800a55c:	4b04      	ldr	r3, [pc, #16]	@ (800a570 <__assert_func+0x38>)
 800a55e:	461c      	mov	r4, r3
 800a560:	e7f3      	b.n	800a54a <__assert_func+0x12>
 800a562:	bf00      	nop
 800a564:	200000f4 	.word	0x200000f4
 800a568:	0800b486 	.word	0x0800b486
 800a56c:	0800b493 	.word	0x0800b493
 800a570:	0800b4c1 	.word	0x0800b4c1

0800a574 <_calloc_r>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	fba1 5402 	umull	r5, r4, r1, r2
 800a57a:	b934      	cbnz	r4, 800a58a <_calloc_r+0x16>
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7fe f9d7 	bl	8008930 <_malloc_r>
 800a582:	4606      	mov	r6, r0
 800a584:	b928      	cbnz	r0, 800a592 <_calloc_r+0x1e>
 800a586:	4630      	mov	r0, r6
 800a588:	bd70      	pop	{r4, r5, r6, pc}
 800a58a:	220c      	movs	r2, #12
 800a58c:	6002      	str	r2, [r0, #0]
 800a58e:	2600      	movs	r6, #0
 800a590:	e7f9      	b.n	800a586 <_calloc_r+0x12>
 800a592:	462a      	mov	r2, r5
 800a594:	4621      	mov	r1, r4
 800a596:	f7fd fa6a 	bl	8007a6e <memset>
 800a59a:	e7f4      	b.n	800a586 <_calloc_r+0x12>

0800a59c <rshift>:
 800a59c:	6903      	ldr	r3, [r0, #16]
 800a59e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5aa:	f100 0414 	add.w	r4, r0, #20
 800a5ae:	dd45      	ble.n	800a63c <rshift+0xa0>
 800a5b0:	f011 011f 	ands.w	r1, r1, #31
 800a5b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5bc:	d10c      	bne.n	800a5d8 <rshift+0x3c>
 800a5be:	f100 0710 	add.w	r7, r0, #16
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	42b1      	cmp	r1, r6
 800a5c6:	d334      	bcc.n	800a632 <rshift+0x96>
 800a5c8:	1a9b      	subs	r3, r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	1eea      	subs	r2, r5, #3
 800a5ce:	4296      	cmp	r6, r2
 800a5d0:	bf38      	it	cc
 800a5d2:	2300      	movcc	r3, #0
 800a5d4:	4423      	add	r3, r4
 800a5d6:	e015      	b.n	800a604 <rshift+0x68>
 800a5d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5dc:	f1c1 0820 	rsb	r8, r1, #32
 800a5e0:	40cf      	lsrs	r7, r1
 800a5e2:	f105 0e04 	add.w	lr, r5, #4
 800a5e6:	46a1      	mov	r9, r4
 800a5e8:	4576      	cmp	r6, lr
 800a5ea:	46f4      	mov	ip, lr
 800a5ec:	d815      	bhi.n	800a61a <rshift+0x7e>
 800a5ee:	1a9a      	subs	r2, r3, r2
 800a5f0:	0092      	lsls	r2, r2, #2
 800a5f2:	3a04      	subs	r2, #4
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	42ae      	cmp	r6, r5
 800a5f8:	bf38      	it	cc
 800a5fa:	2200      	movcc	r2, #0
 800a5fc:	18a3      	adds	r3, r4, r2
 800a5fe:	50a7      	str	r7, [r4, r2]
 800a600:	b107      	cbz	r7, 800a604 <rshift+0x68>
 800a602:	3304      	adds	r3, #4
 800a604:	1b1a      	subs	r2, r3, r4
 800a606:	42a3      	cmp	r3, r4
 800a608:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a60c:	bf08      	it	eq
 800a60e:	2300      	moveq	r3, #0
 800a610:	6102      	str	r2, [r0, #16]
 800a612:	bf08      	it	eq
 800a614:	6143      	streq	r3, [r0, #20]
 800a616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a61a:	f8dc c000 	ldr.w	ip, [ip]
 800a61e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a622:	ea4c 0707 	orr.w	r7, ip, r7
 800a626:	f849 7b04 	str.w	r7, [r9], #4
 800a62a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a62e:	40cf      	lsrs	r7, r1
 800a630:	e7da      	b.n	800a5e8 <rshift+0x4c>
 800a632:	f851 cb04 	ldr.w	ip, [r1], #4
 800a636:	f847 cf04 	str.w	ip, [r7, #4]!
 800a63a:	e7c3      	b.n	800a5c4 <rshift+0x28>
 800a63c:	4623      	mov	r3, r4
 800a63e:	e7e1      	b.n	800a604 <rshift+0x68>

0800a640 <__hexdig_fun>:
 800a640:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a644:	2b09      	cmp	r3, #9
 800a646:	d802      	bhi.n	800a64e <__hexdig_fun+0xe>
 800a648:	3820      	subs	r0, #32
 800a64a:	b2c0      	uxtb	r0, r0
 800a64c:	4770      	bx	lr
 800a64e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a652:	2b05      	cmp	r3, #5
 800a654:	d801      	bhi.n	800a65a <__hexdig_fun+0x1a>
 800a656:	3847      	subs	r0, #71	@ 0x47
 800a658:	e7f7      	b.n	800a64a <__hexdig_fun+0xa>
 800a65a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a65e:	2b05      	cmp	r3, #5
 800a660:	d801      	bhi.n	800a666 <__hexdig_fun+0x26>
 800a662:	3827      	subs	r0, #39	@ 0x27
 800a664:	e7f1      	b.n	800a64a <__hexdig_fun+0xa>
 800a666:	2000      	movs	r0, #0
 800a668:	4770      	bx	lr
	...

0800a66c <__gethex>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	b085      	sub	sp, #20
 800a672:	468a      	mov	sl, r1
 800a674:	9302      	str	r3, [sp, #8]
 800a676:	680b      	ldr	r3, [r1, #0]
 800a678:	9001      	str	r0, [sp, #4]
 800a67a:	4690      	mov	r8, r2
 800a67c:	1c9c      	adds	r4, r3, #2
 800a67e:	46a1      	mov	r9, r4
 800a680:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a684:	2830      	cmp	r0, #48	@ 0x30
 800a686:	d0fa      	beq.n	800a67e <__gethex+0x12>
 800a688:	eba9 0303 	sub.w	r3, r9, r3
 800a68c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a690:	f7ff ffd6 	bl	800a640 <__hexdig_fun>
 800a694:	4605      	mov	r5, r0
 800a696:	2800      	cmp	r0, #0
 800a698:	d168      	bne.n	800a76c <__gethex+0x100>
 800a69a:	49a0      	ldr	r1, [pc, #640]	@ (800a91c <__gethex+0x2b0>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	4648      	mov	r0, r9
 800a6a0:	f7ff ff1e 	bl	800a4e0 <strncmp>
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d167      	bne.n	800a77a <__gethex+0x10e>
 800a6aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ae:	4626      	mov	r6, r4
 800a6b0:	f7ff ffc6 	bl	800a640 <__hexdig_fun>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d062      	beq.n	800a77e <__gethex+0x112>
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	7818      	ldrb	r0, [r3, #0]
 800a6bc:	2830      	cmp	r0, #48	@ 0x30
 800a6be:	4699      	mov	r9, r3
 800a6c0:	f103 0301 	add.w	r3, r3, #1
 800a6c4:	d0f9      	beq.n	800a6ba <__gethex+0x4e>
 800a6c6:	f7ff ffbb 	bl	800a640 <__hexdig_fun>
 800a6ca:	fab0 f580 	clz	r5, r0
 800a6ce:	096d      	lsrs	r5, r5, #5
 800a6d0:	f04f 0b01 	mov.w	fp, #1
 800a6d4:	464a      	mov	r2, r9
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	3201      	adds	r2, #1
 800a6da:	7830      	ldrb	r0, [r6, #0]
 800a6dc:	f7ff ffb0 	bl	800a640 <__hexdig_fun>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d1f8      	bne.n	800a6d6 <__gethex+0x6a>
 800a6e4:	498d      	ldr	r1, [pc, #564]	@ (800a91c <__gethex+0x2b0>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff fef9 	bl	800a4e0 <strncmp>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d13f      	bne.n	800a772 <__gethex+0x106>
 800a6f2:	b944      	cbnz	r4, 800a706 <__gethex+0x9a>
 800a6f4:	1c74      	adds	r4, r6, #1
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	4616      	mov	r6, r2
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	7830      	ldrb	r0, [r6, #0]
 800a6fe:	f7ff ff9f 	bl	800a640 <__hexdig_fun>
 800a702:	2800      	cmp	r0, #0
 800a704:	d1f8      	bne.n	800a6f8 <__gethex+0x8c>
 800a706:	1ba4      	subs	r4, r4, r6
 800a708:	00a7      	lsls	r7, r4, #2
 800a70a:	7833      	ldrb	r3, [r6, #0]
 800a70c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a710:	2b50      	cmp	r3, #80	@ 0x50
 800a712:	d13e      	bne.n	800a792 <__gethex+0x126>
 800a714:	7873      	ldrb	r3, [r6, #1]
 800a716:	2b2b      	cmp	r3, #43	@ 0x2b
 800a718:	d033      	beq.n	800a782 <__gethex+0x116>
 800a71a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a71c:	d034      	beq.n	800a788 <__gethex+0x11c>
 800a71e:	1c71      	adds	r1, r6, #1
 800a720:	2400      	movs	r4, #0
 800a722:	7808      	ldrb	r0, [r1, #0]
 800a724:	f7ff ff8c 	bl	800a640 <__hexdig_fun>
 800a728:	1e43      	subs	r3, r0, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b18      	cmp	r3, #24
 800a72e:	d830      	bhi.n	800a792 <__gethex+0x126>
 800a730:	f1a0 0210 	sub.w	r2, r0, #16
 800a734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a738:	f7ff ff82 	bl	800a640 <__hexdig_fun>
 800a73c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a740:	fa5f fc8c 	uxtb.w	ip, ip
 800a744:	f1bc 0f18 	cmp.w	ip, #24
 800a748:	f04f 030a 	mov.w	r3, #10
 800a74c:	d91e      	bls.n	800a78c <__gethex+0x120>
 800a74e:	b104      	cbz	r4, 800a752 <__gethex+0xe6>
 800a750:	4252      	negs	r2, r2
 800a752:	4417      	add	r7, r2
 800a754:	f8ca 1000 	str.w	r1, [sl]
 800a758:	b1ed      	cbz	r5, 800a796 <__gethex+0x12a>
 800a75a:	f1bb 0f00 	cmp.w	fp, #0
 800a75e:	bf0c      	ite	eq
 800a760:	2506      	moveq	r5, #6
 800a762:	2500      	movne	r5, #0
 800a764:	4628      	mov	r0, r5
 800a766:	b005      	add	sp, #20
 800a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	2500      	movs	r5, #0
 800a76e:	462c      	mov	r4, r5
 800a770:	e7b0      	b.n	800a6d4 <__gethex+0x68>
 800a772:	2c00      	cmp	r4, #0
 800a774:	d1c7      	bne.n	800a706 <__gethex+0x9a>
 800a776:	4627      	mov	r7, r4
 800a778:	e7c7      	b.n	800a70a <__gethex+0x9e>
 800a77a:	464e      	mov	r6, r9
 800a77c:	462f      	mov	r7, r5
 800a77e:	2501      	movs	r5, #1
 800a780:	e7c3      	b.n	800a70a <__gethex+0x9e>
 800a782:	2400      	movs	r4, #0
 800a784:	1cb1      	adds	r1, r6, #2
 800a786:	e7cc      	b.n	800a722 <__gethex+0xb6>
 800a788:	2401      	movs	r4, #1
 800a78a:	e7fb      	b.n	800a784 <__gethex+0x118>
 800a78c:	fb03 0002 	mla	r0, r3, r2, r0
 800a790:	e7ce      	b.n	800a730 <__gethex+0xc4>
 800a792:	4631      	mov	r1, r6
 800a794:	e7de      	b.n	800a754 <__gethex+0xe8>
 800a796:	eba6 0309 	sub.w	r3, r6, r9
 800a79a:	3b01      	subs	r3, #1
 800a79c:	4629      	mov	r1, r5
 800a79e:	2b07      	cmp	r3, #7
 800a7a0:	dc0a      	bgt.n	800a7b8 <__gethex+0x14c>
 800a7a2:	9801      	ldr	r0, [sp, #4]
 800a7a4:	f7fe f950 	bl	8008a48 <_Balloc>
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	b940      	cbnz	r0, 800a7be <__gethex+0x152>
 800a7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a920 <__gethex+0x2b4>)
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	21e4      	movs	r1, #228	@ 0xe4
 800a7b2:	485c      	ldr	r0, [pc, #368]	@ (800a924 <__gethex+0x2b8>)
 800a7b4:	f7ff fec0 	bl	800a538 <__assert_func>
 800a7b8:	3101      	adds	r1, #1
 800a7ba:	105b      	asrs	r3, r3, #1
 800a7bc:	e7ef      	b.n	800a79e <__gethex+0x132>
 800a7be:	f100 0a14 	add.w	sl, r0, #20
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4655      	mov	r5, sl
 800a7c6:	469b      	mov	fp, r3
 800a7c8:	45b1      	cmp	r9, r6
 800a7ca:	d337      	bcc.n	800a83c <__gethex+0x1d0>
 800a7cc:	f845 bb04 	str.w	fp, [r5], #4
 800a7d0:	eba5 050a 	sub.w	r5, r5, sl
 800a7d4:	10ad      	asrs	r5, r5, #2
 800a7d6:	6125      	str	r5, [r4, #16]
 800a7d8:	4658      	mov	r0, fp
 800a7da:	f7fe fa27 	bl	8008c2c <__hi0bits>
 800a7de:	016d      	lsls	r5, r5, #5
 800a7e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a7e4:	1a2d      	subs	r5, r5, r0
 800a7e6:	42b5      	cmp	r5, r6
 800a7e8:	dd54      	ble.n	800a894 <__gethex+0x228>
 800a7ea:	1bad      	subs	r5, r5, r6
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7fe fdb3 	bl	800935a <__any_on>
 800a7f4:	4681      	mov	r9, r0
 800a7f6:	b178      	cbz	r0, 800a818 <__gethex+0x1ac>
 800a7f8:	1e6b      	subs	r3, r5, #1
 800a7fa:	1159      	asrs	r1, r3, #5
 800a7fc:	f003 021f 	and.w	r2, r3, #31
 800a800:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a804:	f04f 0901 	mov.w	r9, #1
 800a808:	fa09 f202 	lsl.w	r2, r9, r2
 800a80c:	420a      	tst	r2, r1
 800a80e:	d003      	beq.n	800a818 <__gethex+0x1ac>
 800a810:	454b      	cmp	r3, r9
 800a812:	dc36      	bgt.n	800a882 <__gethex+0x216>
 800a814:	f04f 0902 	mov.w	r9, #2
 800a818:	4629      	mov	r1, r5
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7ff febe 	bl	800a59c <rshift>
 800a820:	442f      	add	r7, r5
 800a822:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a826:	42bb      	cmp	r3, r7
 800a828:	da42      	bge.n	800a8b0 <__gethex+0x244>
 800a82a:	9801      	ldr	r0, [sp, #4]
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7fe f94b 	bl	8008ac8 <_Bfree>
 800a832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a834:	2300      	movs	r3, #0
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	25a3      	movs	r5, #163	@ 0xa3
 800a83a:	e793      	b.n	800a764 <__gethex+0xf8>
 800a83c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a840:	2a2e      	cmp	r2, #46	@ 0x2e
 800a842:	d012      	beq.n	800a86a <__gethex+0x1fe>
 800a844:	2b20      	cmp	r3, #32
 800a846:	d104      	bne.n	800a852 <__gethex+0x1e6>
 800a848:	f845 bb04 	str.w	fp, [r5], #4
 800a84c:	f04f 0b00 	mov.w	fp, #0
 800a850:	465b      	mov	r3, fp
 800a852:	7830      	ldrb	r0, [r6, #0]
 800a854:	9303      	str	r3, [sp, #12]
 800a856:	f7ff fef3 	bl	800a640 <__hexdig_fun>
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	f000 000f 	and.w	r0, r0, #15
 800a860:	4098      	lsls	r0, r3
 800a862:	ea4b 0b00 	orr.w	fp, fp, r0
 800a866:	3304      	adds	r3, #4
 800a868:	e7ae      	b.n	800a7c8 <__gethex+0x15c>
 800a86a:	45b1      	cmp	r9, r6
 800a86c:	d8ea      	bhi.n	800a844 <__gethex+0x1d8>
 800a86e:	492b      	ldr	r1, [pc, #172]	@ (800a91c <__gethex+0x2b0>)
 800a870:	9303      	str	r3, [sp, #12]
 800a872:	2201      	movs	r2, #1
 800a874:	4630      	mov	r0, r6
 800a876:	f7ff fe33 	bl	800a4e0 <strncmp>
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d1e1      	bne.n	800a844 <__gethex+0x1d8>
 800a880:	e7a2      	b.n	800a7c8 <__gethex+0x15c>
 800a882:	1ea9      	subs	r1, r5, #2
 800a884:	4620      	mov	r0, r4
 800a886:	f7fe fd68 	bl	800935a <__any_on>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d0c2      	beq.n	800a814 <__gethex+0x1a8>
 800a88e:	f04f 0903 	mov.w	r9, #3
 800a892:	e7c1      	b.n	800a818 <__gethex+0x1ac>
 800a894:	da09      	bge.n	800a8aa <__gethex+0x23e>
 800a896:	1b75      	subs	r5, r6, r5
 800a898:	4621      	mov	r1, r4
 800a89a:	9801      	ldr	r0, [sp, #4]
 800a89c:	462a      	mov	r2, r5
 800a89e:	f7fe fb23 	bl	8008ee8 <__lshift>
 800a8a2:	1b7f      	subs	r7, r7, r5
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	f100 0a14 	add.w	sl, r0, #20
 800a8aa:	f04f 0900 	mov.w	r9, #0
 800a8ae:	e7b8      	b.n	800a822 <__gethex+0x1b6>
 800a8b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8b4:	42bd      	cmp	r5, r7
 800a8b6:	dd6f      	ble.n	800a998 <__gethex+0x32c>
 800a8b8:	1bed      	subs	r5, r5, r7
 800a8ba:	42ae      	cmp	r6, r5
 800a8bc:	dc34      	bgt.n	800a928 <__gethex+0x2bc>
 800a8be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d022      	beq.n	800a90c <__gethex+0x2a0>
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d024      	beq.n	800a914 <__gethex+0x2a8>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d115      	bne.n	800a8fa <__gethex+0x28e>
 800a8ce:	42ae      	cmp	r6, r5
 800a8d0:	d113      	bne.n	800a8fa <__gethex+0x28e>
 800a8d2:	2e01      	cmp	r6, #1
 800a8d4:	d10b      	bne.n	800a8ee <__gethex+0x282>
 800a8d6:	9a02      	ldr	r2, [sp, #8]
 800a8d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	2301      	movs	r3, #1
 800a8e0:	6123      	str	r3, [r4, #16]
 800a8e2:	f8ca 3000 	str.w	r3, [sl]
 800a8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e8:	2562      	movs	r5, #98	@ 0x62
 800a8ea:	601c      	str	r4, [r3, #0]
 800a8ec:	e73a      	b.n	800a764 <__gethex+0xf8>
 800a8ee:	1e71      	subs	r1, r6, #1
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f7fe fd32 	bl	800935a <__any_on>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d1ed      	bne.n	800a8d6 <__gethex+0x26a>
 800a8fa:	9801      	ldr	r0, [sp, #4]
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7fe f8e3 	bl	8008ac8 <_Bfree>
 800a902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a904:	2300      	movs	r3, #0
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	2550      	movs	r5, #80	@ 0x50
 800a90a:	e72b      	b.n	800a764 <__gethex+0xf8>
 800a90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1f3      	bne.n	800a8fa <__gethex+0x28e>
 800a912:	e7e0      	b.n	800a8d6 <__gethex+0x26a>
 800a914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1dd      	bne.n	800a8d6 <__gethex+0x26a>
 800a91a:	e7ee      	b.n	800a8fa <__gethex+0x28e>
 800a91c:	0800b46b 	.word	0x0800b46b
 800a920:	0800b401 	.word	0x0800b401
 800a924:	0800b4c2 	.word	0x0800b4c2
 800a928:	1e6f      	subs	r7, r5, #1
 800a92a:	f1b9 0f00 	cmp.w	r9, #0
 800a92e:	d130      	bne.n	800a992 <__gethex+0x326>
 800a930:	b127      	cbz	r7, 800a93c <__gethex+0x2d0>
 800a932:	4639      	mov	r1, r7
 800a934:	4620      	mov	r0, r4
 800a936:	f7fe fd10 	bl	800935a <__any_on>
 800a93a:	4681      	mov	r9, r0
 800a93c:	117a      	asrs	r2, r7, #5
 800a93e:	2301      	movs	r3, #1
 800a940:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a944:	f007 071f 	and.w	r7, r7, #31
 800a948:	40bb      	lsls	r3, r7
 800a94a:	4213      	tst	r3, r2
 800a94c:	4629      	mov	r1, r5
 800a94e:	4620      	mov	r0, r4
 800a950:	bf18      	it	ne
 800a952:	f049 0902 	orrne.w	r9, r9, #2
 800a956:	f7ff fe21 	bl	800a59c <rshift>
 800a95a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a95e:	1b76      	subs	r6, r6, r5
 800a960:	2502      	movs	r5, #2
 800a962:	f1b9 0f00 	cmp.w	r9, #0
 800a966:	d047      	beq.n	800a9f8 <__gethex+0x38c>
 800a968:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d015      	beq.n	800a99c <__gethex+0x330>
 800a970:	2b03      	cmp	r3, #3
 800a972:	d017      	beq.n	800a9a4 <__gethex+0x338>
 800a974:	2b01      	cmp	r3, #1
 800a976:	d109      	bne.n	800a98c <__gethex+0x320>
 800a978:	f019 0f02 	tst.w	r9, #2
 800a97c:	d006      	beq.n	800a98c <__gethex+0x320>
 800a97e:	f8da 3000 	ldr.w	r3, [sl]
 800a982:	ea49 0903 	orr.w	r9, r9, r3
 800a986:	f019 0f01 	tst.w	r9, #1
 800a98a:	d10e      	bne.n	800a9aa <__gethex+0x33e>
 800a98c:	f045 0510 	orr.w	r5, r5, #16
 800a990:	e032      	b.n	800a9f8 <__gethex+0x38c>
 800a992:	f04f 0901 	mov.w	r9, #1
 800a996:	e7d1      	b.n	800a93c <__gethex+0x2d0>
 800a998:	2501      	movs	r5, #1
 800a99a:	e7e2      	b.n	800a962 <__gethex+0x2f6>
 800a99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a99e:	f1c3 0301 	rsb	r3, r3, #1
 800a9a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0f0      	beq.n	800a98c <__gethex+0x320>
 800a9aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9ae:	f104 0314 	add.w	r3, r4, #20
 800a9b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9ba:	f04f 0c00 	mov.w	ip, #0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9c8:	d01b      	beq.n	800aa02 <__gethex+0x396>
 800a9ca:	3201      	adds	r2, #1
 800a9cc:	6002      	str	r2, [r0, #0]
 800a9ce:	2d02      	cmp	r5, #2
 800a9d0:	f104 0314 	add.w	r3, r4, #20
 800a9d4:	d13c      	bne.n	800aa50 <__gethex+0x3e4>
 800a9d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a9da:	3a01      	subs	r2, #1
 800a9dc:	42b2      	cmp	r2, r6
 800a9de:	d109      	bne.n	800a9f4 <__gethex+0x388>
 800a9e0:	1171      	asrs	r1, r6, #5
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9e8:	f006 061f 	and.w	r6, r6, #31
 800a9ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a9f0:	421e      	tst	r6, r3
 800a9f2:	d13a      	bne.n	800aa6a <__gethex+0x3fe>
 800a9f4:	f045 0520 	orr.w	r5, r5, #32
 800a9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9fa:	601c      	str	r4, [r3, #0]
 800a9fc:	9b02      	ldr	r3, [sp, #8]
 800a9fe:	601f      	str	r7, [r3, #0]
 800aa00:	e6b0      	b.n	800a764 <__gethex+0xf8>
 800aa02:	4299      	cmp	r1, r3
 800aa04:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa08:	d8d9      	bhi.n	800a9be <__gethex+0x352>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	459b      	cmp	fp, r3
 800aa0e:	db17      	blt.n	800aa40 <__gethex+0x3d4>
 800aa10:	6861      	ldr	r1, [r4, #4]
 800aa12:	9801      	ldr	r0, [sp, #4]
 800aa14:	3101      	adds	r1, #1
 800aa16:	f7fe f817 	bl	8008a48 <_Balloc>
 800aa1a:	4681      	mov	r9, r0
 800aa1c:	b918      	cbnz	r0, 800aa26 <__gethex+0x3ba>
 800aa1e:	4b1a      	ldr	r3, [pc, #104]	@ (800aa88 <__gethex+0x41c>)
 800aa20:	4602      	mov	r2, r0
 800aa22:	2184      	movs	r1, #132	@ 0x84
 800aa24:	e6c5      	b.n	800a7b2 <__gethex+0x146>
 800aa26:	6922      	ldr	r2, [r4, #16]
 800aa28:	3202      	adds	r2, #2
 800aa2a:	f104 010c 	add.w	r1, r4, #12
 800aa2e:	0092      	lsls	r2, r2, #2
 800aa30:	300c      	adds	r0, #12
 800aa32:	f7fd f89c 	bl	8007b6e <memcpy>
 800aa36:	4621      	mov	r1, r4
 800aa38:	9801      	ldr	r0, [sp, #4]
 800aa3a:	f7fe f845 	bl	8008ac8 <_Bfree>
 800aa3e:	464c      	mov	r4, r9
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa48:	6122      	str	r2, [r4, #16]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	615a      	str	r2, [r3, #20]
 800aa4e:	e7be      	b.n	800a9ce <__gethex+0x362>
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	455a      	cmp	r2, fp
 800aa54:	dd0b      	ble.n	800aa6e <__gethex+0x402>
 800aa56:	2101      	movs	r1, #1
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f7ff fd9f 	bl	800a59c <rshift>
 800aa5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa62:	3701      	adds	r7, #1
 800aa64:	42bb      	cmp	r3, r7
 800aa66:	f6ff aee0 	blt.w	800a82a <__gethex+0x1be>
 800aa6a:	2501      	movs	r5, #1
 800aa6c:	e7c2      	b.n	800a9f4 <__gethex+0x388>
 800aa6e:	f016 061f 	ands.w	r6, r6, #31
 800aa72:	d0fa      	beq.n	800aa6a <__gethex+0x3fe>
 800aa74:	4453      	add	r3, sl
 800aa76:	f1c6 0620 	rsb	r6, r6, #32
 800aa7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa7e:	f7fe f8d5 	bl	8008c2c <__hi0bits>
 800aa82:	42b0      	cmp	r0, r6
 800aa84:	dbe7      	blt.n	800aa56 <__gethex+0x3ea>
 800aa86:	e7f0      	b.n	800aa6a <__gethex+0x3fe>
 800aa88:	0800b401 	.word	0x0800b401

0800aa8c <L_shift>:
 800aa8c:	f1c2 0208 	rsb	r2, r2, #8
 800aa90:	0092      	lsls	r2, r2, #2
 800aa92:	b570      	push	{r4, r5, r6, lr}
 800aa94:	f1c2 0620 	rsb	r6, r2, #32
 800aa98:	6843      	ldr	r3, [r0, #4]
 800aa9a:	6804      	ldr	r4, [r0, #0]
 800aa9c:	fa03 f506 	lsl.w	r5, r3, r6
 800aaa0:	432c      	orrs	r4, r5
 800aaa2:	40d3      	lsrs	r3, r2
 800aaa4:	6004      	str	r4, [r0, #0]
 800aaa6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaaa:	4288      	cmp	r0, r1
 800aaac:	d3f4      	bcc.n	800aa98 <L_shift+0xc>
 800aaae:	bd70      	pop	{r4, r5, r6, pc}

0800aab0 <__match>:
 800aab0:	b530      	push	{r4, r5, lr}
 800aab2:	6803      	ldr	r3, [r0, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaba:	b914      	cbnz	r4, 800aac2 <__match+0x12>
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	2001      	movs	r0, #1
 800aac0:	bd30      	pop	{r4, r5, pc}
 800aac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aaca:	2d19      	cmp	r5, #25
 800aacc:	bf98      	it	ls
 800aace:	3220      	addls	r2, #32
 800aad0:	42a2      	cmp	r2, r4
 800aad2:	d0f0      	beq.n	800aab6 <__match+0x6>
 800aad4:	2000      	movs	r0, #0
 800aad6:	e7f3      	b.n	800aac0 <__match+0x10>

0800aad8 <__hexnan>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	680b      	ldr	r3, [r1, #0]
 800aade:	6801      	ldr	r1, [r0, #0]
 800aae0:	115e      	asrs	r6, r3, #5
 800aae2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aae6:	f013 031f 	ands.w	r3, r3, #31
 800aaea:	b087      	sub	sp, #28
 800aaec:	bf18      	it	ne
 800aaee:	3604      	addne	r6, #4
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	1f37      	subs	r7, r6, #4
 800aaf4:	4682      	mov	sl, r0
 800aaf6:	4690      	mov	r8, r2
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	f846 5c04 	str.w	r5, [r6, #-4]
 800aafe:	46b9      	mov	r9, r7
 800ab00:	463c      	mov	r4, r7
 800ab02:	9502      	str	r5, [sp, #8]
 800ab04:	46ab      	mov	fp, r5
 800ab06:	784a      	ldrb	r2, [r1, #1]
 800ab08:	1c4b      	adds	r3, r1, #1
 800ab0a:	9303      	str	r3, [sp, #12]
 800ab0c:	b342      	cbz	r2, 800ab60 <__hexnan+0x88>
 800ab0e:	4610      	mov	r0, r2
 800ab10:	9105      	str	r1, [sp, #20]
 800ab12:	9204      	str	r2, [sp, #16]
 800ab14:	f7ff fd94 	bl	800a640 <__hexdig_fun>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d151      	bne.n	800abc0 <__hexnan+0xe8>
 800ab1c:	9a04      	ldr	r2, [sp, #16]
 800ab1e:	9905      	ldr	r1, [sp, #20]
 800ab20:	2a20      	cmp	r2, #32
 800ab22:	d818      	bhi.n	800ab56 <__hexnan+0x7e>
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	459b      	cmp	fp, r3
 800ab28:	dd13      	ble.n	800ab52 <__hexnan+0x7a>
 800ab2a:	454c      	cmp	r4, r9
 800ab2c:	d206      	bcs.n	800ab3c <__hexnan+0x64>
 800ab2e:	2d07      	cmp	r5, #7
 800ab30:	dc04      	bgt.n	800ab3c <__hexnan+0x64>
 800ab32:	462a      	mov	r2, r5
 800ab34:	4649      	mov	r1, r9
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff ffa8 	bl	800aa8c <L_shift>
 800ab3c:	4544      	cmp	r4, r8
 800ab3e:	d952      	bls.n	800abe6 <__hexnan+0x10e>
 800ab40:	2300      	movs	r3, #0
 800ab42:	f1a4 0904 	sub.w	r9, r4, #4
 800ab46:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab4a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab4e:	464c      	mov	r4, r9
 800ab50:	461d      	mov	r5, r3
 800ab52:	9903      	ldr	r1, [sp, #12]
 800ab54:	e7d7      	b.n	800ab06 <__hexnan+0x2e>
 800ab56:	2a29      	cmp	r2, #41	@ 0x29
 800ab58:	d157      	bne.n	800ac0a <__hexnan+0x132>
 800ab5a:	3102      	adds	r1, #2
 800ab5c:	f8ca 1000 	str.w	r1, [sl]
 800ab60:	f1bb 0f00 	cmp.w	fp, #0
 800ab64:	d051      	beq.n	800ac0a <__hexnan+0x132>
 800ab66:	454c      	cmp	r4, r9
 800ab68:	d206      	bcs.n	800ab78 <__hexnan+0xa0>
 800ab6a:	2d07      	cmp	r5, #7
 800ab6c:	dc04      	bgt.n	800ab78 <__hexnan+0xa0>
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4649      	mov	r1, r9
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff ff8a 	bl	800aa8c <L_shift>
 800ab78:	4544      	cmp	r4, r8
 800ab7a:	d936      	bls.n	800abea <__hexnan+0x112>
 800ab7c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab80:	4623      	mov	r3, r4
 800ab82:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab86:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab8a:	429f      	cmp	r7, r3
 800ab8c:	d2f9      	bcs.n	800ab82 <__hexnan+0xaa>
 800ab8e:	1b3b      	subs	r3, r7, r4
 800ab90:	f023 0303 	bic.w	r3, r3, #3
 800ab94:	3304      	adds	r3, #4
 800ab96:	3401      	adds	r4, #1
 800ab98:	3e03      	subs	r6, #3
 800ab9a:	42b4      	cmp	r4, r6
 800ab9c:	bf88      	it	hi
 800ab9e:	2304      	movhi	r3, #4
 800aba0:	4443      	add	r3, r8
 800aba2:	2200      	movs	r2, #0
 800aba4:	f843 2b04 	str.w	r2, [r3], #4
 800aba8:	429f      	cmp	r7, r3
 800abaa:	d2fb      	bcs.n	800aba4 <__hexnan+0xcc>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	b91b      	cbnz	r3, 800abb8 <__hexnan+0xe0>
 800abb0:	4547      	cmp	r7, r8
 800abb2:	d128      	bne.n	800ac06 <__hexnan+0x12e>
 800abb4:	2301      	movs	r3, #1
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	2005      	movs	r0, #5
 800abba:	b007      	add	sp, #28
 800abbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc0:	3501      	adds	r5, #1
 800abc2:	2d08      	cmp	r5, #8
 800abc4:	f10b 0b01 	add.w	fp, fp, #1
 800abc8:	dd06      	ble.n	800abd8 <__hexnan+0x100>
 800abca:	4544      	cmp	r4, r8
 800abcc:	d9c1      	bls.n	800ab52 <__hexnan+0x7a>
 800abce:	2300      	movs	r3, #0
 800abd0:	f844 3c04 	str.w	r3, [r4, #-4]
 800abd4:	2501      	movs	r5, #1
 800abd6:	3c04      	subs	r4, #4
 800abd8:	6822      	ldr	r2, [r4, #0]
 800abda:	f000 000f 	and.w	r0, r0, #15
 800abde:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abe2:	6020      	str	r0, [r4, #0]
 800abe4:	e7b5      	b.n	800ab52 <__hexnan+0x7a>
 800abe6:	2508      	movs	r5, #8
 800abe8:	e7b3      	b.n	800ab52 <__hexnan+0x7a>
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0dd      	beq.n	800abac <__hexnan+0xd4>
 800abf0:	f1c3 0320 	rsb	r3, r3, #32
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295
 800abf8:	40da      	lsrs	r2, r3
 800abfa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abfe:	4013      	ands	r3, r2
 800ac00:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac04:	e7d2      	b.n	800abac <__hexnan+0xd4>
 800ac06:	3f04      	subs	r7, #4
 800ac08:	e7d0      	b.n	800abac <__hexnan+0xd4>
 800ac0a:	2004      	movs	r0, #4
 800ac0c:	e7d5      	b.n	800abba <__hexnan+0xe2>

0800ac0e <__ascii_mbtowc>:
 800ac0e:	b082      	sub	sp, #8
 800ac10:	b901      	cbnz	r1, 800ac14 <__ascii_mbtowc+0x6>
 800ac12:	a901      	add	r1, sp, #4
 800ac14:	b142      	cbz	r2, 800ac28 <__ascii_mbtowc+0x1a>
 800ac16:	b14b      	cbz	r3, 800ac2c <__ascii_mbtowc+0x1e>
 800ac18:	7813      	ldrb	r3, [r2, #0]
 800ac1a:	600b      	str	r3, [r1, #0]
 800ac1c:	7812      	ldrb	r2, [r2, #0]
 800ac1e:	1e10      	subs	r0, r2, #0
 800ac20:	bf18      	it	ne
 800ac22:	2001      	movne	r0, #1
 800ac24:	b002      	add	sp, #8
 800ac26:	4770      	bx	lr
 800ac28:	4610      	mov	r0, r2
 800ac2a:	e7fb      	b.n	800ac24 <__ascii_mbtowc+0x16>
 800ac2c:	f06f 0001 	mvn.w	r0, #1
 800ac30:	e7f8      	b.n	800ac24 <__ascii_mbtowc+0x16>

0800ac32 <_realloc_r>:
 800ac32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac36:	4607      	mov	r7, r0
 800ac38:	4614      	mov	r4, r2
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	b921      	cbnz	r1, 800ac48 <_realloc_r+0x16>
 800ac3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	4611      	mov	r1, r2
 800ac44:	f7fd be74 	b.w	8008930 <_malloc_r>
 800ac48:	b92a      	cbnz	r2, 800ac56 <_realloc_r+0x24>
 800ac4a:	f7fd fdfd 	bl	8008848 <_free_r>
 800ac4e:	4625      	mov	r5, r4
 800ac50:	4628      	mov	r0, r5
 800ac52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac56:	f000 f840 	bl	800acda <_malloc_usable_size_r>
 800ac5a:	4284      	cmp	r4, r0
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	d802      	bhi.n	800ac66 <_realloc_r+0x34>
 800ac60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac64:	d8f4      	bhi.n	800ac50 <_realloc_r+0x1e>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7fd fe61 	bl	8008930 <_malloc_r>
 800ac6e:	4680      	mov	r8, r0
 800ac70:	b908      	cbnz	r0, 800ac76 <_realloc_r+0x44>
 800ac72:	4645      	mov	r5, r8
 800ac74:	e7ec      	b.n	800ac50 <_realloc_r+0x1e>
 800ac76:	42b4      	cmp	r4, r6
 800ac78:	4622      	mov	r2, r4
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	bf28      	it	cs
 800ac7e:	4632      	movcs	r2, r6
 800ac80:	f7fc ff75 	bl	8007b6e <memcpy>
 800ac84:	4629      	mov	r1, r5
 800ac86:	4638      	mov	r0, r7
 800ac88:	f7fd fdde 	bl	8008848 <_free_r>
 800ac8c:	e7f1      	b.n	800ac72 <_realloc_r+0x40>

0800ac8e <__ascii_wctomb>:
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	b141      	cbz	r1, 800aca6 <__ascii_wctomb+0x18>
 800ac94:	2aff      	cmp	r2, #255	@ 0xff
 800ac96:	d904      	bls.n	800aca2 <__ascii_wctomb+0x14>
 800ac98:	228a      	movs	r2, #138	@ 0x8a
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aca0:	4770      	bx	lr
 800aca2:	700a      	strb	r2, [r1, #0]
 800aca4:	2001      	movs	r0, #1
 800aca6:	4770      	bx	lr

0800aca8 <fiprintf>:
 800aca8:	b40e      	push	{r1, r2, r3}
 800acaa:	b503      	push	{r0, r1, lr}
 800acac:	4601      	mov	r1, r0
 800acae:	ab03      	add	r3, sp, #12
 800acb0:	4805      	ldr	r0, [pc, #20]	@ (800acc8 <fiprintf+0x20>)
 800acb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb6:	6800      	ldr	r0, [r0, #0]
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	f000 f83f 	bl	800ad3c <_vfiprintf_r>
 800acbe:	b002      	add	sp, #8
 800acc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc4:	b003      	add	sp, #12
 800acc6:	4770      	bx	lr
 800acc8:	200000f4 	.word	0x200000f4

0800accc <abort>:
 800accc:	b508      	push	{r3, lr}
 800acce:	2006      	movs	r0, #6
 800acd0:	f000 fa08 	bl	800b0e4 <raise>
 800acd4:	2001      	movs	r0, #1
 800acd6:	f7f6 fbd5 	bl	8001484 <_exit>

0800acda <_malloc_usable_size_r>:
 800acda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acde:	1f18      	subs	r0, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbc      	itt	lt
 800ace4:	580b      	ldrlt	r3, [r1, r0]
 800ace6:	18c0      	addlt	r0, r0, r3
 800ace8:	4770      	bx	lr

0800acea <__sfputc_r>:
 800acea:	6893      	ldr	r3, [r2, #8]
 800acec:	3b01      	subs	r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	b410      	push	{r4}
 800acf2:	6093      	str	r3, [r2, #8]
 800acf4:	da08      	bge.n	800ad08 <__sfputc_r+0x1e>
 800acf6:	6994      	ldr	r4, [r2, #24]
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	db01      	blt.n	800ad00 <__sfputc_r+0x16>
 800acfc:	290a      	cmp	r1, #10
 800acfe:	d103      	bne.n	800ad08 <__sfputc_r+0x1e>
 800ad00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad04:	f000 b932 	b.w	800af6c <__swbuf_r>
 800ad08:	6813      	ldr	r3, [r2, #0]
 800ad0a:	1c58      	adds	r0, r3, #1
 800ad0c:	6010      	str	r0, [r2, #0]
 800ad0e:	7019      	strb	r1, [r3, #0]
 800ad10:	4608      	mov	r0, r1
 800ad12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <__sfputs_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	4614      	mov	r4, r2
 800ad20:	18d5      	adds	r5, r2, r3
 800ad22:	42ac      	cmp	r4, r5
 800ad24:	d101      	bne.n	800ad2a <__sfputs_r+0x12>
 800ad26:	2000      	movs	r0, #0
 800ad28:	e007      	b.n	800ad3a <__sfputs_r+0x22>
 800ad2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2e:	463a      	mov	r2, r7
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7ff ffda 	bl	800acea <__sfputc_r>
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	d1f3      	bne.n	800ad22 <__sfputs_r+0xa>
 800ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad3c <_vfiprintf_r>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	460d      	mov	r5, r1
 800ad42:	b09d      	sub	sp, #116	@ 0x74
 800ad44:	4614      	mov	r4, r2
 800ad46:	4698      	mov	r8, r3
 800ad48:	4606      	mov	r6, r0
 800ad4a:	b118      	cbz	r0, 800ad54 <_vfiprintf_r+0x18>
 800ad4c:	6a03      	ldr	r3, [r0, #32]
 800ad4e:	b90b      	cbnz	r3, 800ad54 <_vfiprintf_r+0x18>
 800ad50:	f7fc fdf2 	bl	8007938 <__sinit>
 800ad54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad56:	07d9      	lsls	r1, r3, #31
 800ad58:	d405      	bmi.n	800ad66 <_vfiprintf_r+0x2a>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	059a      	lsls	r2, r3, #22
 800ad5e:	d402      	bmi.n	800ad66 <_vfiprintf_r+0x2a>
 800ad60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad62:	f7fc ff02 	bl	8007b6a <__retarget_lock_acquire_recursive>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	071b      	lsls	r3, r3, #28
 800ad6a:	d501      	bpl.n	800ad70 <_vfiprintf_r+0x34>
 800ad6c:	692b      	ldr	r3, [r5, #16]
 800ad6e:	b99b      	cbnz	r3, 800ad98 <_vfiprintf_r+0x5c>
 800ad70:	4629      	mov	r1, r5
 800ad72:	4630      	mov	r0, r6
 800ad74:	f000 f938 	bl	800afe8 <__swsetup_r>
 800ad78:	b170      	cbz	r0, 800ad98 <_vfiprintf_r+0x5c>
 800ad7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad7c:	07dc      	lsls	r4, r3, #31
 800ad7e:	d504      	bpl.n	800ad8a <_vfiprintf_r+0x4e>
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	b01d      	add	sp, #116	@ 0x74
 800ad86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	0598      	lsls	r0, r3, #22
 800ad8e:	d4f7      	bmi.n	800ad80 <_vfiprintf_r+0x44>
 800ad90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad92:	f7fc feeb 	bl	8007b6c <__retarget_lock_release_recursive>
 800ad96:	e7f3      	b.n	800ad80 <_vfiprintf_r+0x44>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9c:	2320      	movs	r3, #32
 800ad9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ada2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ada6:	2330      	movs	r3, #48	@ 0x30
 800ada8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af58 <_vfiprintf_r+0x21c>
 800adac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adb0:	f04f 0901 	mov.w	r9, #1
 800adb4:	4623      	mov	r3, r4
 800adb6:	469a      	mov	sl, r3
 800adb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adbc:	b10a      	cbz	r2, 800adc2 <_vfiprintf_r+0x86>
 800adbe:	2a25      	cmp	r2, #37	@ 0x25
 800adc0:	d1f9      	bne.n	800adb6 <_vfiprintf_r+0x7a>
 800adc2:	ebba 0b04 	subs.w	fp, sl, r4
 800adc6:	d00b      	beq.n	800ade0 <_vfiprintf_r+0xa4>
 800adc8:	465b      	mov	r3, fp
 800adca:	4622      	mov	r2, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	4630      	mov	r0, r6
 800add0:	f7ff ffa2 	bl	800ad18 <__sfputs_r>
 800add4:	3001      	adds	r0, #1
 800add6:	f000 80a7 	beq.w	800af28 <_vfiprintf_r+0x1ec>
 800adda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800addc:	445a      	add	r2, fp
 800adde:	9209      	str	r2, [sp, #36]	@ 0x24
 800ade0:	f89a 3000 	ldrb.w	r3, [sl]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 809f 	beq.w	800af28 <_vfiprintf_r+0x1ec>
 800adea:	2300      	movs	r3, #0
 800adec:	f04f 32ff 	mov.w	r2, #4294967295
 800adf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adf4:	f10a 0a01 	add.w	sl, sl, #1
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	9307      	str	r3, [sp, #28]
 800adfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae00:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae02:	4654      	mov	r4, sl
 800ae04:	2205      	movs	r2, #5
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	4853      	ldr	r0, [pc, #332]	@ (800af58 <_vfiprintf_r+0x21c>)
 800ae0c:	f7f5 f9e8 	bl	80001e0 <memchr>
 800ae10:	9a04      	ldr	r2, [sp, #16]
 800ae12:	b9d8      	cbnz	r0, 800ae4c <_vfiprintf_r+0x110>
 800ae14:	06d1      	lsls	r1, r2, #27
 800ae16:	bf44      	itt	mi
 800ae18:	2320      	movmi	r3, #32
 800ae1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae1e:	0713      	lsls	r3, r2, #28
 800ae20:	bf44      	itt	mi
 800ae22:	232b      	movmi	r3, #43	@ 0x2b
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae28:	f89a 3000 	ldrb.w	r3, [sl]
 800ae2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae2e:	d015      	beq.n	800ae5c <_vfiprintf_r+0x120>
 800ae30:	9a07      	ldr	r2, [sp, #28]
 800ae32:	4654      	mov	r4, sl
 800ae34:	2000      	movs	r0, #0
 800ae36:	f04f 0c0a 	mov.w	ip, #10
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae40:	3b30      	subs	r3, #48	@ 0x30
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d94b      	bls.n	800aede <_vfiprintf_r+0x1a2>
 800ae46:	b1b0      	cbz	r0, 800ae76 <_vfiprintf_r+0x13a>
 800ae48:	9207      	str	r2, [sp, #28]
 800ae4a:	e014      	b.n	800ae76 <_vfiprintf_r+0x13a>
 800ae4c:	eba0 0308 	sub.w	r3, r0, r8
 800ae50:	fa09 f303 	lsl.w	r3, r9, r3
 800ae54:	4313      	orrs	r3, r2
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	46a2      	mov	sl, r4
 800ae5a:	e7d2      	b.n	800ae02 <_vfiprintf_r+0xc6>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	1d19      	adds	r1, r3, #4
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	9103      	str	r1, [sp, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfbb      	ittet	lt
 800ae68:	425b      	neglt	r3, r3
 800ae6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae6e:	9307      	strge	r3, [sp, #28]
 800ae70:	9307      	strlt	r3, [sp, #28]
 800ae72:	bfb8      	it	lt
 800ae74:	9204      	strlt	r2, [sp, #16]
 800ae76:	7823      	ldrb	r3, [r4, #0]
 800ae78:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae7a:	d10a      	bne.n	800ae92 <_vfiprintf_r+0x156>
 800ae7c:	7863      	ldrb	r3, [r4, #1]
 800ae7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae80:	d132      	bne.n	800aee8 <_vfiprintf_r+0x1ac>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	1d1a      	adds	r2, r3, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	9203      	str	r2, [sp, #12]
 800ae8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae8e:	3402      	adds	r4, #2
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af68 <_vfiprintf_r+0x22c>
 800ae96:	7821      	ldrb	r1, [r4, #0]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	f7f5 f9a0 	bl	80001e0 <memchr>
 800aea0:	b138      	cbz	r0, 800aeb2 <_vfiprintf_r+0x176>
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	eba0 000a 	sub.w	r0, r0, sl
 800aea8:	2240      	movs	r2, #64	@ 0x40
 800aeaa:	4082      	lsls	r2, r0
 800aeac:	4313      	orrs	r3, r2
 800aeae:	3401      	adds	r4, #1
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb6:	4829      	ldr	r0, [pc, #164]	@ (800af5c <_vfiprintf_r+0x220>)
 800aeb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aebc:	2206      	movs	r2, #6
 800aebe:	f7f5 f98f 	bl	80001e0 <memchr>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d03f      	beq.n	800af46 <_vfiprintf_r+0x20a>
 800aec6:	4b26      	ldr	r3, [pc, #152]	@ (800af60 <_vfiprintf_r+0x224>)
 800aec8:	bb1b      	cbnz	r3, 800af12 <_vfiprintf_r+0x1d6>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	3307      	adds	r3, #7
 800aece:	f023 0307 	bic.w	r3, r3, #7
 800aed2:	3308      	adds	r3, #8
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aed8:	443b      	add	r3, r7
 800aeda:	9309      	str	r3, [sp, #36]	@ 0x24
 800aedc:	e76a      	b.n	800adb4 <_vfiprintf_r+0x78>
 800aede:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee2:	460c      	mov	r4, r1
 800aee4:	2001      	movs	r0, #1
 800aee6:	e7a8      	b.n	800ae3a <_vfiprintf_r+0xfe>
 800aee8:	2300      	movs	r3, #0
 800aeea:	3401      	adds	r4, #1
 800aeec:	9305      	str	r3, [sp, #20]
 800aeee:	4619      	mov	r1, r3
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	4620      	mov	r0, r4
 800aef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aefa:	3a30      	subs	r2, #48	@ 0x30
 800aefc:	2a09      	cmp	r2, #9
 800aefe:	d903      	bls.n	800af08 <_vfiprintf_r+0x1cc>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0c6      	beq.n	800ae92 <_vfiprintf_r+0x156>
 800af04:	9105      	str	r1, [sp, #20]
 800af06:	e7c4      	b.n	800ae92 <_vfiprintf_r+0x156>
 800af08:	fb0c 2101 	mla	r1, ip, r1, r2
 800af0c:	4604      	mov	r4, r0
 800af0e:	2301      	movs	r3, #1
 800af10:	e7f0      	b.n	800aef4 <_vfiprintf_r+0x1b8>
 800af12:	ab03      	add	r3, sp, #12
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	462a      	mov	r2, r5
 800af18:	4b12      	ldr	r3, [pc, #72]	@ (800af64 <_vfiprintf_r+0x228>)
 800af1a:	a904      	add	r1, sp, #16
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7fb febb 	bl	8006c98 <_printf_float>
 800af22:	4607      	mov	r7, r0
 800af24:	1c78      	adds	r0, r7, #1
 800af26:	d1d6      	bne.n	800aed6 <_vfiprintf_r+0x19a>
 800af28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af2a:	07d9      	lsls	r1, r3, #31
 800af2c:	d405      	bmi.n	800af3a <_vfiprintf_r+0x1fe>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	059a      	lsls	r2, r3, #22
 800af32:	d402      	bmi.n	800af3a <_vfiprintf_r+0x1fe>
 800af34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af36:	f7fc fe19 	bl	8007b6c <__retarget_lock_release_recursive>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	065b      	lsls	r3, r3, #25
 800af3e:	f53f af1f 	bmi.w	800ad80 <_vfiprintf_r+0x44>
 800af42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af44:	e71e      	b.n	800ad84 <_vfiprintf_r+0x48>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b05      	ldr	r3, [pc, #20]	@ (800af64 <_vfiprintf_r+0x228>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4630      	mov	r0, r6
 800af52:	f7fc f939 	bl	80071c8 <_printf_i>
 800af56:	e7e4      	b.n	800af22 <_vfiprintf_r+0x1e6>
 800af58:	0800b46d 	.word	0x0800b46d
 800af5c:	0800b477 	.word	0x0800b477
 800af60:	08006c99 	.word	0x08006c99
 800af64:	0800ad19 	.word	0x0800ad19
 800af68:	0800b473 	.word	0x0800b473

0800af6c <__swbuf_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	460e      	mov	r6, r1
 800af70:	4614      	mov	r4, r2
 800af72:	4605      	mov	r5, r0
 800af74:	b118      	cbz	r0, 800af7e <__swbuf_r+0x12>
 800af76:	6a03      	ldr	r3, [r0, #32]
 800af78:	b90b      	cbnz	r3, 800af7e <__swbuf_r+0x12>
 800af7a:	f7fc fcdd 	bl	8007938 <__sinit>
 800af7e:	69a3      	ldr	r3, [r4, #24]
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	071a      	lsls	r2, r3, #28
 800af86:	d501      	bpl.n	800af8c <__swbuf_r+0x20>
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b943      	cbnz	r3, 800af9e <__swbuf_r+0x32>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f82a 	bl	800afe8 <__swsetup_r>
 800af94:	b118      	cbz	r0, 800af9e <__swbuf_r+0x32>
 800af96:	f04f 37ff 	mov.w	r7, #4294967295
 800af9a:	4638      	mov	r0, r7
 800af9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	6922      	ldr	r2, [r4, #16]
 800afa2:	1a98      	subs	r0, r3, r2
 800afa4:	6963      	ldr	r3, [r4, #20]
 800afa6:	b2f6      	uxtb	r6, r6
 800afa8:	4283      	cmp	r3, r0
 800afaa:	4637      	mov	r7, r6
 800afac:	dc05      	bgt.n	800afba <__swbuf_r+0x4e>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f7ff fa53 	bl	800a45c <_fflush_r>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1ed      	bne.n	800af96 <__swbuf_r+0x2a>
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	701e      	strb	r6, [r3, #0]
 800afc8:	6962      	ldr	r2, [r4, #20]
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	429a      	cmp	r2, r3
 800afce:	d004      	beq.n	800afda <__swbuf_r+0x6e>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	07db      	lsls	r3, r3, #31
 800afd4:	d5e1      	bpl.n	800af9a <__swbuf_r+0x2e>
 800afd6:	2e0a      	cmp	r6, #10
 800afd8:	d1df      	bne.n	800af9a <__swbuf_r+0x2e>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f7ff fa3d 	bl	800a45c <_fflush_r>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0d9      	beq.n	800af9a <__swbuf_r+0x2e>
 800afe6:	e7d6      	b.n	800af96 <__swbuf_r+0x2a>

0800afe8 <__swsetup_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4b29      	ldr	r3, [pc, #164]	@ (800b090 <__swsetup_r+0xa8>)
 800afec:	4605      	mov	r5, r0
 800afee:	6818      	ldr	r0, [r3, #0]
 800aff0:	460c      	mov	r4, r1
 800aff2:	b118      	cbz	r0, 800affc <__swsetup_r+0x14>
 800aff4:	6a03      	ldr	r3, [r0, #32]
 800aff6:	b90b      	cbnz	r3, 800affc <__swsetup_r+0x14>
 800aff8:	f7fc fc9e 	bl	8007938 <__sinit>
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	0719      	lsls	r1, r3, #28
 800b002:	d422      	bmi.n	800b04a <__swsetup_r+0x62>
 800b004:	06da      	lsls	r2, r3, #27
 800b006:	d407      	bmi.n	800b018 <__swsetup_r+0x30>
 800b008:	2209      	movs	r2, #9
 800b00a:	602a      	str	r2, [r5, #0]
 800b00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	f04f 30ff 	mov.w	r0, #4294967295
 800b016:	e033      	b.n	800b080 <__swsetup_r+0x98>
 800b018:	0758      	lsls	r0, r3, #29
 800b01a:	d512      	bpl.n	800b042 <__swsetup_r+0x5a>
 800b01c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b01e:	b141      	cbz	r1, 800b032 <__swsetup_r+0x4a>
 800b020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <__swsetup_r+0x46>
 800b028:	4628      	mov	r0, r5
 800b02a:	f7fd fc0d 	bl	8008848 <_free_r>
 800b02e:	2300      	movs	r3, #0
 800b030:	6363      	str	r3, [r4, #52]	@ 0x34
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	2300      	movs	r3, #0
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	f043 0308 	orr.w	r3, r3, #8
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	b94b      	cbnz	r3, 800b062 <__swsetup_r+0x7a>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b058:	d003      	beq.n	800b062 <__swsetup_r+0x7a>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	f000 f883 	bl	800b168 <__smakebuf_r>
 800b062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b066:	f013 0201 	ands.w	r2, r3, #1
 800b06a:	d00a      	beq.n	800b082 <__swsetup_r+0x9a>
 800b06c:	2200      	movs	r2, #0
 800b06e:	60a2      	str	r2, [r4, #8]
 800b070:	6962      	ldr	r2, [r4, #20]
 800b072:	4252      	negs	r2, r2
 800b074:	61a2      	str	r2, [r4, #24]
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	b942      	cbnz	r2, 800b08c <__swsetup_r+0xa4>
 800b07a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b07e:	d1c5      	bne.n	800b00c <__swsetup_r+0x24>
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	0799      	lsls	r1, r3, #30
 800b084:	bf58      	it	pl
 800b086:	6962      	ldrpl	r2, [r4, #20]
 800b088:	60a2      	str	r2, [r4, #8]
 800b08a:	e7f4      	b.n	800b076 <__swsetup_r+0x8e>
 800b08c:	2000      	movs	r0, #0
 800b08e:	e7f7      	b.n	800b080 <__swsetup_r+0x98>
 800b090:	200000f4 	.word	0x200000f4

0800b094 <_raise_r>:
 800b094:	291f      	cmp	r1, #31
 800b096:	b538      	push	{r3, r4, r5, lr}
 800b098:	4605      	mov	r5, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	d904      	bls.n	800b0a8 <_raise_r+0x14>
 800b09e:	2316      	movs	r3, #22
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0aa:	b112      	cbz	r2, 800b0b2 <_raise_r+0x1e>
 800b0ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0b0:	b94b      	cbnz	r3, 800b0c6 <_raise_r+0x32>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 f830 	bl	800b118 <_getpid_r>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c2:	f000 b817 	b.w	800b0f4 <_kill_r>
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d00a      	beq.n	800b0e0 <_raise_r+0x4c>
 800b0ca:	1c59      	adds	r1, r3, #1
 800b0cc:	d103      	bne.n	800b0d6 <_raise_r+0x42>
 800b0ce:	2316      	movs	r3, #22
 800b0d0:	6003      	str	r3, [r0, #0]
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	e7e7      	b.n	800b0a6 <_raise_r+0x12>
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4798      	blx	r3
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7e0      	b.n	800b0a6 <_raise_r+0x12>

0800b0e4 <raise>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <raise+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f7ff bfd3 	b.w	800b094 <_raise_r>
 800b0ee:	bf00      	nop
 800b0f0:	200000f4 	.word	0x200000f4

0800b0f4 <_kill_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d07      	ldr	r5, [pc, #28]	@ (800b114 <_kill_r+0x20>)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	4611      	mov	r1, r2
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	f7f6 f9af 	bl	8001464 <_kill>
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	d102      	bne.n	800b110 <_kill_r+0x1c>
 800b10a:	682b      	ldr	r3, [r5, #0]
 800b10c:	b103      	cbz	r3, 800b110 <_kill_r+0x1c>
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	bf00      	nop
 800b114:	2000068c 	.word	0x2000068c

0800b118 <_getpid_r>:
 800b118:	f7f6 b99c 	b.w	8001454 <_getpid>

0800b11c <__swhatbuf_r>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b124:	2900      	cmp	r1, #0
 800b126:	b096      	sub	sp, #88	@ 0x58
 800b128:	4615      	mov	r5, r2
 800b12a:	461e      	mov	r6, r3
 800b12c:	da0d      	bge.n	800b14a <__swhatbuf_r+0x2e>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b134:	f04f 0100 	mov.w	r1, #0
 800b138:	bf14      	ite	ne
 800b13a:	2340      	movne	r3, #64	@ 0x40
 800b13c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b140:	2000      	movs	r0, #0
 800b142:	6031      	str	r1, [r6, #0]
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	b016      	add	sp, #88	@ 0x58
 800b148:	bd70      	pop	{r4, r5, r6, pc}
 800b14a:	466a      	mov	r2, sp
 800b14c:	f000 f848 	bl	800b1e0 <_fstat_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	dbec      	blt.n	800b12e <__swhatbuf_r+0x12>
 800b154:	9901      	ldr	r1, [sp, #4]
 800b156:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b15a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b15e:	4259      	negs	r1, r3
 800b160:	4159      	adcs	r1, r3
 800b162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b166:	e7eb      	b.n	800b140 <__swhatbuf_r+0x24>

0800b168 <__smakebuf_r>:
 800b168:	898b      	ldrh	r3, [r1, #12]
 800b16a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16c:	079d      	lsls	r5, r3, #30
 800b16e:	4606      	mov	r6, r0
 800b170:	460c      	mov	r4, r1
 800b172:	d507      	bpl.n	800b184 <__smakebuf_r+0x1c>
 800b174:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b178:	6023      	str	r3, [r4, #0]
 800b17a:	6123      	str	r3, [r4, #16]
 800b17c:	2301      	movs	r3, #1
 800b17e:	6163      	str	r3, [r4, #20]
 800b180:	b003      	add	sp, #12
 800b182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b184:	ab01      	add	r3, sp, #4
 800b186:	466a      	mov	r2, sp
 800b188:	f7ff ffc8 	bl	800b11c <__swhatbuf_r>
 800b18c:	9f00      	ldr	r7, [sp, #0]
 800b18e:	4605      	mov	r5, r0
 800b190:	4639      	mov	r1, r7
 800b192:	4630      	mov	r0, r6
 800b194:	f7fd fbcc 	bl	8008930 <_malloc_r>
 800b198:	b948      	cbnz	r0, 800b1ae <__smakebuf_r+0x46>
 800b19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19e:	059a      	lsls	r2, r3, #22
 800b1a0:	d4ee      	bmi.n	800b180 <__smakebuf_r+0x18>
 800b1a2:	f023 0303 	bic.w	r3, r3, #3
 800b1a6:	f043 0302 	orr.w	r3, r3, #2
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	e7e2      	b.n	800b174 <__smakebuf_r+0xc>
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	6020      	str	r0, [r4, #0]
 800b1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1be:	b15b      	cbz	r3, 800b1d8 <__smakebuf_r+0x70>
 800b1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f000 f81d 	bl	800b204 <_isatty_r>
 800b1ca:	b128      	cbz	r0, 800b1d8 <__smakebuf_r+0x70>
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	f023 0303 	bic.w	r3, r3, #3
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	81a3      	strh	r3, [r4, #12]
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	431d      	orrs	r5, r3
 800b1dc:	81a5      	strh	r5, [r4, #12]
 800b1de:	e7cf      	b.n	800b180 <__smakebuf_r+0x18>

0800b1e0 <_fstat_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	@ (800b200 <_fstat_r+0x20>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 f999 	bl	8001524 <_fstat>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_fstat_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_fstat_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	2000068c 	.word	0x2000068c

0800b204 <_isatty_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d06      	ldr	r5, [pc, #24]	@ (800b220 <_isatty_r+0x1c>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f6 f998 	bl	8001544 <_isatty>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_isatty_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_isatty_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	2000068c 	.word	0x2000068c

0800b224 <_init>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	bf00      	nop
 800b228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b22a:	bc08      	pop	{r3}
 800b22c:	469e      	mov	lr, r3
 800b22e:	4770      	bx	lr

0800b230 <_fini>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr
