
0626_zero_mini_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b4  080068b4  00008120  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068bc  080068bc  00008120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  080068c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000120  080069e4  00008120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  080069e4  000084ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001499c  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab0  00000000  00000000  0001caec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000205a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb7  00000000  00000000  000218b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d2  00000000  00000000  0002276f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6d4  00000000  00000000  0003af41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918fa  00000000  00000000  00056615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005168  00000000  00000000  000e7f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000ed0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006764 	.word	0x08006764

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	08006764 	.word	0x08006764

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b49      	ldr	r3, [pc, #292]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b46      	ldr	r3, [pc, #280]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b42      	ldr	r3, [pc, #264]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <MX_GPIO_Init+0x140>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <MX_GPIO_Init+0x140>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0x140>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000638:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800063a:	f002 fb17 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800063e:	2200      	movs	r2, #0
 8000640:	f24f 0107 	movw	r1, #61447	@ 0xf007
 8000644:	482b      	ldr	r0, [pc, #172]	@ (80006f4 <MX_GPIO_Init+0x148>)
 8000646:	f002 fb11 	bl	8002c6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000650:	4829      	ldr	r0, [pc, #164]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 8000652:	f002 fb0b 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8000656:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4823      	ldr	r0, [pc, #140]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 800066c:	f002 f962 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000670:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <MX_GPIO_Init+0x144>)
 800068a:	f002 f953 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800068e:	f24f 0307 	movw	r3, #61447	@ 0xf007
 8000692:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	4619      	mov	r1, r3
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006a8:	f002 f944 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_GPIO_Init+0x14c>)
 80006c6:	f002 f935 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006ca:	2328      	movs	r3, #40	@ 0x28
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_GPIO_Init+0x148>)
 80006de:	f002 f929 	bl	8002934 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020000 	.word	0x40020000

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f002 fab1 	bl	8002ca0 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8d2 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000013c 	.word	0x2000013c
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_I2C_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <HAL_I2C_MspInit+0x8c>)
 80007b4:	f002 f8be 	bl	8002934 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0x88>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 fe68 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f814 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feda 	bl	80005ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f8:	f000 f9d4 	bl	8000ba4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007fc:	f000 fbae 	bl	8000f5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff7c 	bl	80006fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000804:	f000 fa1a 	bl	8000c3c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000808:	f000 f92a 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM4_Init();
 800080c:	f000 fa8e 	bl	8000d2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000810:	f001 f892 	bl	8001938 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000814:	f001 f87c 	bl	8001910 <ap_main>
 8000818:	e7fc      	b.n	8000814 <main+0x2c>
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 fb1c 	bl	8005e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b27      	ldr	r3, [pc, #156]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a26      	ldr	r2, [pc, #152]	@ (80008e4 <SystemClock_Config+0xc8>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <SystemClock_Config+0xc8>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <SystemClock_Config+0xcc>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000890:	2364      	movs	r3, #100	@ 0x64
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fe9b 	bl	80035dc <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f81e 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2103      	movs	r1, #3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f8fd 	bl	8003acc <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d8:	f000 f808 	bl	80008ec <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	@ 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000936:	2007      	movs	r0, #7
 8000938:	f001 ff28 	bl	800278c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f001 fde1 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <TIM2_IRQHandler+0x10>)
 80009ae:	f003 fc69 	bl	8004284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001dc 	.word	0x200001dc

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f004 fb1d 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200002b4 	.word	0x200002b4

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f005 fa3a 	bl	8005e78 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20020000 	.word	0x20020000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	20000190 	.word	0x20000190
 8000a38:	200004f0 	.word	0x200004f0

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f005 f9e5 	bl	8005e68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba0 <MX_TIM1_Init+0x140>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aa6:	2263      	movs	r2, #99	@ 0x63
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000ab2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac4:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aca:	4834      	ldr	r0, [pc, #208]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000acc:	f003 fa1e 	bl	8003f0c <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ad6:	f7ff ff09 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482d      	ldr	r0, [pc, #180]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000ae8:	f003 fd7e 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000af2:	f7ff fefb 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af6:	4829      	ldr	r0, [pc, #164]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000af8:	f003 faba 	bl	8004070 <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b02:	f7ff fef3 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b12:	4619      	mov	r1, r3
 8000b14:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000b16:	f004 f929 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b20:	f7ff fee4 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	@ 0x60
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500-1;
 8000b28:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4814      	ldr	r0, [pc, #80]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000b4c:	f003 fc8a 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000b56:	f7ff fec9 	bl	80008ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000b7e:	f004 f963 	bl	8004e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000b88:	f7ff feb0 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <MX_TIM1_Init+0x13c>)
 8000b8e:	f000 f983 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	@ 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000194 	.word	0x20000194
 8000ba0:	40010000 	.word	0x40010000

08000ba4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bca:	2263      	movs	r2, #99	@ 0x63
 8000bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000bea:	f003 f98f 	bl	8003f0c <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf4:	f7ff fe7a 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c06:	f003 fcef 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c10:	f7ff fe6c 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_TIM2_Init+0x94>)
 8000c22:	f004 f8a3 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f7ff fe5e 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001dc 	.word	0x200001dc

08000c3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d28 <MX_TIM3_Init+0xec>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c74:	2263      	movs	r2, #99	@ 0x63
 8000c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c92:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000c94:	f003 f93a 	bl	8003f0c <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c9e:	f7ff fe25 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cac:	4619      	mov	r1, r3
 8000cae:	481d      	ldr	r0, [pc, #116]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cb0:	f003 fc9a 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cba:	f7ff fe17 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cc0:	f003 f9d6 	bl	8004070 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cca:	f7ff fe0f 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000cde:	f004 f845 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ce8:	f7ff fe00 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	@ 0x60
 8000cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8000cf0:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000cf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d06:	f003 fbad 	bl	8004464 <HAL_TIM_PWM_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d10:	f7ff fdec 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <MX_TIM3_Init+0xe8>)
 8000d16:	f000 f8bf 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000d1a:	bf00      	nop
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000224 	.word	0x20000224
 8000d28:	40000400 	.word	0x40000400

08000d2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc4 <MX_TIM4_Init+0x98>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d50:	2263      	movs	r2, #99	@ 0x63
 8000d52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6e:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d70:	f003 f8cc 	bl	8003f0c <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fdb7 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000d8c:	f003 fc2c 	bl	80045e8 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f7ff fda9 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da2:	463b      	mov	r3, r7
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_TIM4_Init+0x94>)
 8000da8:	f003 ffe0 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000db2:	f7ff fd9b 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000026c 	.word	0x2000026c
 8000dc4:	40000800 	.word	0x40000800

08000dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10e      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000df6:	e042      	b.n	8000e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e00:	d116      	bne.n	8000e30 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201c      	movs	r0, #28
 8000e24:	f001 fcbd 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e28:	201c      	movs	r0, #28
 8000e2a:	f001 fcd6 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8000e2e:	e026      	b.n	8000e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <HAL_TIM_Base_MspInit+0xc8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10e      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	e012      	b.n	8000e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <HAL_TIM_Base_MspInit+0xcc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d10d      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_TIM_Base_MspInit+0xc4>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40000800 	.word	0x40000800

08000e98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a24      	ldr	r2, [pc, #144]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11f      	bne.n	8000efa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a22      	ldr	r2, [pc, #136]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <HAL_TIM_MspPostInit+0xb8>)
 8000ef4:	f001 fd1e 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ef8:	e022      	b.n	8000f40 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <HAL_TIM_MspPostInit+0xbc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d11d      	bne.n	8000f40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f20:	2310      	movs	r3, #16
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f30:	2302      	movs	r3, #2
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <HAL_TIM_MspPostInit+0xc0>)
 8000f3c:	f001 fcfa 	bl	8002934 <HAL_GPIO_Init>
}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	@ 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40020400 	.word	0x40020400

08000f5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <MX_USART2_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f003 ffbe 	bl	8004f14 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f7ff fca5 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002b4 	.word	0x200002b4
 8000fac:	40004400 	.word	0x40004400

08000fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <HAL_UART_MspInit+0x94>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d133      	bne.n	800103a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <HAL_UART_MspInit+0x98>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800100a:	230c      	movs	r3, #12
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <HAL_UART_MspInit+0x9c>)
 8001026:	f001 fc85 	bl	8002934 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2026      	movs	r0, #38	@ 0x26
 8001030:	f001 fbb7 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001034:	2026      	movs	r0, #38	@ 0x26
 8001036:	f001 fbd0 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40004400 	.word	0x40004400
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001054:	f7ff fcf2 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	@ (8001090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	@ (800109c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107e:	f004 ff01 	bl	8005e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fbb1 	bl	80007e8 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001094:	080068c4 	.word	0x080068c4
  ldr r2, =_sbss
 8001098:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 800109c:	200004ec 	.word	0x200004ec

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>

080010a2 <Controller_Excute>:
    .song = 0
};


void Controller_Excute()
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
	Controller_Mode();
 80010a6:	f000 f84b 	bl	8001140 <Controller_Mode>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <Controller_OutData>:

// C2P
void Controller_OutData(C2P_Data *c2p_data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	memcpy(c2p_data, &OutputData, sizeof(C2P_Data));
 80010b8:	2214      	movs	r2, #20
 80010ba:	4904      	ldr	r1, [pc, #16]	@ (80010cc <Controller_OutData+0x1c>)
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f004 ff07 	bl	8005ed0 <memcpy>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000004 	.word	0x20000004

080010d0 <Controller_SetInputData>:



void Controller_SetInputData(inputData_TypeDef inputData)
{
 80010d0:	b490      	push	{r4, r7}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	463c      	mov	r4, r7
 80010d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (inputData.id == LCD_MODE) {
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d103      	bne.n	80010ea <Controller_SetInputData+0x1a>
		controlData.id = LCD_MODE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <Controller_SetInputData+0x6c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e01a      	b.n	8001120 <Controller_SetInputData+0x50>
	}
	else if (inputData.id == RUN_STOP) {
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d103      	bne.n	80010f8 <Controller_SetInputData+0x28>
		controlData.id = RUN_STOP;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <Controller_SetInputData+0x6c>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e013      	b.n	8001120 <Controller_SetInputData+0x50>
	}
	else if (inputData.id == SPEED) {
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d103      	bne.n	8001106 <Controller_SetInputData+0x36>
		controlData.id = SPEED;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <Controller_SetInputData+0x6c>)
 8001100:	2204      	movs	r2, #4
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e00c      	b.n	8001120 <Controller_SetInputData+0x50>
	}
	else if(inputData.id == ULTRA){
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d103      	bne.n	8001114 <Controller_SetInputData+0x44>
		controlData.id = ULTRA;
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <Controller_SetInputData+0x6c>)
 800110e:	2205      	movs	r2, #5
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e005      	b.n	8001120 <Controller_SetInputData+0x50>
	}
	else if(inputData.id == SONG){
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d102      	bne.n	8001120 <Controller_SetInputData+0x50>
		controlData.id = SONG;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <Controller_SetInputData+0x6c>)
 800111c:	2206      	movs	r2, #6
 800111e:	601a      	str	r2, [r3, #0]
	}
	controlData.data = inputData.data;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <Controller_SetInputData+0x6c>)
 8001124:	6053      	str	r3, [r2, #4]
	controlData.lcd_data = inputData.lcd_data;
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <Controller_SetInputData+0x6c>)
 800112a:	6093      	str	r3, [r2, #8]
	controlData.speed_data = inputData.speed_data;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a03      	ldr	r2, [pc, #12]	@ (800113c <Controller_SetInputData+0x6c>)
 8001130:	60d3      	str	r3, [r2, #12]
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bc90      	pop	{r4, r7}
 800113a:	4770      	bx	lr
 800113c:	200002fc 	.word	0x200002fc

08001140 <Controller_Mode>:

void Controller_Mode()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	Time_curr();
 8001144:	f000 f84a 	bl	80011dc <Time_curr>
	switch(controlData.id)
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <Controller_Mode+0x94>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	2b05      	cmp	r3, #5
 8001150:	d83d      	bhi.n	80011ce <Controller_Mode+0x8e>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <Controller_Mode+0x18>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	0800118f 	.word	0x0800118f
 800115c:	08001171 	.word	0x08001171
 8001160:	080011cf 	.word	0x080011cf
 8001164:	0800119b 	.word	0x0800119b
 8001168:	080011a7 	.word	0x080011a7
 800116c:	080011bd 	.word	0x080011bd
	{
	case RUN_STOP:
		OutputData.runstop ^= 1;
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <Controller_Mode+0x98>)
 8001172:	7bdb      	ldrb	r3, [r3, #15]
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <Controller_Mode+0x98>)
 800117c:	73da      	strb	r2, [r3, #15]
		if(OutputData.runstop == 0){
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <Controller_Mode+0x98>)
 8001180:	7bdb      	ldrb	r3, [r3, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d120      	bne.n	80011c8 <Controller_Mode+0x88>
			 OutputData.speed = 0;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <Controller_Mode+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	731a      	strb	r2, [r3, #12]
		  }
		break;
 800118c:	e01c      	b.n	80011c8 <Controller_Mode+0x88>

	case LCD_MODE:
		OutputData.lcd_mode = controlData.lcd_data;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <Controller_Mode+0x94>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <Controller_Mode+0x98>)
 8001196:	741a      	strb	r2, [r3, #16]
		break;
 8001198:	e019      	b.n	80011ce <Controller_Mode+0x8e>

	case SPEED:
		OutputData.speed = controlData.speed_data;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <Controller_Mode+0x94>)
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <Controller_Mode+0x98>)
 80011a2:	731a      	strb	r2, [r3, #12]
		break;
 80011a4:	e013      	b.n	80011ce <Controller_Mode+0x8e>

	case ULTRA:
		if (controlData.data > 100){
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <Controller_Mode+0x94>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b64      	cmp	r3, #100	@ 0x64
 80011ac:	dd0e      	ble.n	80011cc <Controller_Mode+0x8c>
			OutputData.lcd_mode = WARNING;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <Controller_Mode+0x98>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	741a      	strb	r2, [r3, #16]
			OutputData.song = 3;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <Controller_Mode+0x98>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	745a      	strb	r2, [r3, #17]
		}
		break;
 80011ba:	e007      	b.n	80011cc <Controller_Mode+0x8c>

	case SONG:
		OutputData.song = controlData.data;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <Controller_Mode+0x94>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <Controller_Mode+0x98>)
 80011c4:	745a      	strb	r2, [r3, #17]
		break;
 80011c6:	e002      	b.n	80011ce <Controller_Mode+0x8e>
		break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <Controller_Mode+0x8e>
		break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002fc 	.word	0x200002fc
 80011d8:	20000004 	.word	0x20000004

080011dc <Time_curr>:


void Time_curr(){
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
	uint8_t met;
	OutputData.running_time = StopWatch_Excute();
 80011e2:	4c42      	ldr	r4, [pc, #264]	@ (80012ec <Time_curr+0x110>)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fc84 	bl	8001af4 <StopWatch_Excute>
 80011ec:	1da3      	adds	r3, r4, #6
 80011ee:	463a      	mov	r2, r7
 80011f0:	6811      	ldr	r1, [r2, #0]
 80011f2:	6019      	str	r1, [r3, #0]
 80011f4:	8892      	ldrh	r2, [r2, #4]
 80011f6:	809a      	strh	r2, [r3, #4]
	OutputData.current_time = TimeWatch_Excute();
 80011f8:	4c3c      	ldr	r4, [pc, #240]	@ (80012ec <Time_curr+0x110>)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fd15 	bl	8001c2c <TimeWatch_Excute>
 8001202:	4622      	mov	r2, r4
 8001204:	463b      	mov	r3, r7
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	6010      	str	r0, [r2, #0]
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	8093      	strh	r3, [r2, #4]
	OutputData.distance = (OutputData.current_time.hour - OutputData.running_time.hour)*OutputData.speed + OutputData.speed* (OutputData.current_time.min - OutputData.running_time.min)/60;
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <Time_curr+0x110>)
 8001210:	785a      	ldrb	r2, [r3, #1]
 8001212:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <Time_curr+0x110>)
 8001214:	79db      	ldrb	r3, [r3, #7]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <Time_curr+0x110>)
 800121c:	7b1b      	ldrb	r3, [r3, #12]
 800121e:	fb12 f303 	smulbb	r3, r2, r3
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <Time_curr+0x110>)
 8001226:	7b1b      	ldrb	r3, [r3, #12]
 8001228:	4619      	mov	r1, r3
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <Time_curr+0x110>)
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	4618      	mov	r0, r3
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <Time_curr+0x110>)
 8001232:	7a1b      	ldrb	r3, [r3, #8]
 8001234:	1ac3      	subs	r3, r0, r3
 8001236:	fb01 f303 	mul.w	r3, r1, r3
 800123a:	492d      	ldr	r1, [pc, #180]	@ (80012f0 <Time_curr+0x114>)
 800123c:	fb81 0103 	smull	r0, r1, r1, r3
 8001240:	4419      	add	r1, r3
 8001242:	1149      	asrs	r1, r1, #5
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4413      	add	r3, r2
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <Time_curr+0x110>)
 8001250:	735a      	strb	r2, [r3, #13]

	switch(OutputData.speed){
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <Time_curr+0x110>)
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	2b08      	cmp	r3, #8
 800125a:	d830      	bhi.n	80012be <Time_curr+0xe2>
 800125c:	a201      	add	r2, pc, #4	@ (adr r2, 8001264 <Time_curr+0x88>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001289 	.word	0x08001289
 8001268:	0800128f 	.word	0x0800128f
 800126c:	08001295 	.word	0x08001295
 8001270:	0800129b 	.word	0x0800129b
 8001274:	080012a1 	.word	0x080012a1
 8001278:	080012a7 	.word	0x080012a7
 800127c:	080012ad 	.word	0x080012ad
 8001280:	080012b3 	.word	0x080012b3
 8001284:	080012b9 	.word	0x080012b9
	case 1:
		met = 15;
 8001288:	230f      	movs	r3, #15
 800128a:	73fb      	strb	r3, [r7, #15]
		break;
 800128c:	e017      	b.n	80012be <Time_curr+0xe2>
	case 2:
		met = 20;
 800128e:	2314      	movs	r3, #20
 8001290:	73fb      	strb	r3, [r7, #15]
		break;
 8001292:	e014      	b.n	80012be <Time_curr+0xe2>
	case 3:
		met = 28;
 8001294:	231c      	movs	r3, #28
 8001296:	73fb      	strb	r3, [r7, #15]
		break;
 8001298:	e011      	b.n	80012be <Time_curr+0xe2>
	case 4:
		met = 33;
 800129a:	2321      	movs	r3, #33	@ 0x21
 800129c:	73fb      	strb	r3, [r7, #15]
		break;
 800129e:	e00e      	b.n	80012be <Time_curr+0xe2>
	case 5:
		met = 38;
 80012a0:	2326      	movs	r3, #38	@ 0x26
 80012a2:	73fb      	strb	r3, [r7, #15]
		break;
 80012a4:	e00b      	b.n	80012be <Time_curr+0xe2>
	case 6:
		met = 43;
 80012a6:	232b      	movs	r3, #43	@ 0x2b
 80012a8:	73fb      	strb	r3, [r7, #15]
		break;
 80012aa:	e008      	b.n	80012be <Time_curr+0xe2>
	case 7:
		met = 60;
 80012ac:	233c      	movs	r3, #60	@ 0x3c
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e005      	b.n	80012be <Time_curr+0xe2>
	case 8:
		met = 83;
 80012b2:	2353      	movs	r3, #83	@ 0x53
 80012b4:	73fb      	strb	r3, [r7, #15]
		break;
 80012b6:	e002      	b.n	80012be <Time_curr+0xe2>
	case 9:
		met = 98;
 80012b8:	2362      	movs	r3, #98	@ 0x62
 80012ba:	73fb      	strb	r3, [r7, #15]
		break;
 80012bc:	bf00      	nop
	}
	OutputData.calories = met * 72 * OutputData.distance /10;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <Time_curr+0x110>)
 80012c2:	7b52      	ldrb	r2, [r2, #13]
 80012c4:	fb03 f202 	mul.w	r2, r3, r2
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <Time_curr+0x118>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	1092      	asrs	r2, r2, #2
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <Time_curr+0x110>)
 80012e0:	739a      	strb	r2, [r3, #14]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000004 	.word	0x20000004
 80012f0:	88888889 	.word	0x88888889
 80012f4:	66666667 	.word	0x66666667

080012f8 <Listener_Init>:
static Que_TypeDef uartRxQue;

inputData_TypeDef inputData = {0};

void Listener_Init()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	Button_Init(&hBtnLcdMode, GPIOB, GPIO_PIN_5);
 80012fc:	2220      	movs	r2, #32
 80012fe:	490f      	ldr	r1, [pc, #60]	@ (800133c <Listener_Init+0x44>)
 8001300:	480f      	ldr	r0, [pc, #60]	@ (8001340 <Listener_Init+0x48>)
 8001302:	f000 fca5 	bl	8001c50 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8001306:	2208      	movs	r2, #8
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <Listener_Init+0x44>)
 800130a:	480e      	ldr	r0, [pc, #56]	@ (8001344 <Listener_Init+0x4c>)
 800130c:	f000 fca0 	bl	8001c50 <Button_Init>
	Button_Init(&hBtnSpeedUp, GPIOA, GPIO_PIN_10);
 8001310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <Listener_Init+0x50>)
 8001316:	480d      	ldr	r0, [pc, #52]	@ (800134c <Listener_Init+0x54>)
 8001318:	f000 fc9a 	bl	8001c50 <Button_Init>
	Button_Init(&hBtnSpeedDown, GPIOA, GPIO_PIN_7); // modify the pin number
 800131c:	2280      	movs	r2, #128	@ 0x80
 800131e:	490a      	ldr	r1, [pc, #40]	@ (8001348 <Listener_Init+0x50>)
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <Listener_Init+0x58>)
 8001322:	f000 fc95 	bl	8001c50 <Button_Init>

	Que_Init(&uartRxQue);
 8001326:	480b      	ldr	r0, [pc, #44]	@ (8001354 <Listener_Init+0x5c>)
 8001328:	f000 fb10 	bl	800194c <Que_Init>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // uart recv interrupt enable
 800132c:	2201      	movs	r2, #1
 800132e:	490a      	ldr	r1, [pc, #40]	@ (8001358 <Listener_Init+0x60>)
 8001330:	480a      	ldr	r0, [pc, #40]	@ (800135c <Listener_Init+0x64>)
 8001332:	f003 fe3f 	bl	8004fb4 <HAL_UART_Receive_IT>
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40020400 	.word	0x40020400
 8001340:	20000358 	.word	0x20000358
 8001344:	20000364 	.word	0x20000364
 8001348:	40020000 	.word	0x40020000
 800134c:	20000370 	.word	0x20000370
 8001350:	2000037c 	.word	0x2000037c
 8001354:	20000310 	.word	0x20000310
 8001358:	2000030c 	.word	0x2000030c
 800135c:	200002b4 	.word	0x200002b4

08001360 <Listener_Excute>:

void Listener_Excute()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8001364:	f000 f806 	bl	8001374 <Listener_CheckButton>
	Listener_CheckUart();
 8001368:	f000 f882 	bl	8001470 <Listener_CheckUart>
	Listener_CheckUltra();
 800136c:	f000 f918 	bl	80015a0 <Listener_CheckUltra>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <Listener_CheckButton>:

void Listener_CheckButton()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
   static uint32_t prevChkBtnTime = 0;
   uint32_t curTick = HAL_GetTick();
 800137a:	f001 f907 	bl	800258c <HAL_GetTick>
 800137e:	6078      	str	r0, [r7, #4]
   if (curTick - prevChkBtnTime < 100) {
 8001380:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <Listener_CheckButton+0xe4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b63      	cmp	r3, #99	@ 0x63
 800138a:	d961      	bls.n	8001450 <Listener_CheckButton+0xdc>
      return;
   }
   prevChkBtnTime = curTick;
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <Listener_CheckButton+0xe4>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]

   if (Button_GetState(&hBtnLcdMode) == ACT_RELEASED) {
 8001392:	4832      	ldr	r0, [pc, #200]	@ (800145c <Listener_CheckButton+0xe8>)
 8001394:	f000 fc72 	bl	8001c7c <Button_GetState>
 8001398:	4603      	mov	r3, r0
 800139a:	2b02      	cmp	r3, #2
 800139c:	d114      	bne.n	80013c8 <Listener_CheckButton+0x54>
      inputData.id = LCD_MODE;
 800139e:	4b30      	ldr	r3, [pc, #192]	@ (8001460 <Listener_CheckButton+0xec>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
      if (inputData.lcd_data >= 3){
 80013a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <Listener_CheckButton+0xec>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	dd03      	ble.n	80013b4 <Listener_CheckButton+0x40>
         inputData.lcd_data = 1;
 80013ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <Listener_CheckButton+0xec>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	e004      	b.n	80013be <Listener_CheckButton+0x4a>
      }
      else{
         inputData.lcd_data ++;
 80013b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <Listener_CheckButton+0xec>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a29      	ldr	r2, [pc, #164]	@ (8001460 <Listener_CheckButton+0xec>)
 80013bc:	6093      	str	r3, [r2, #8]
      }
      Controller_SetInputData(inputData);
 80013be:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <Listener_CheckButton+0xec>)
 80013c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c2:	f7ff fe85 	bl	80010d0 <Controller_SetInputData>
 80013c6:	e044      	b.n	8001452 <Listener_CheckButton+0xde>
   }
   else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
 80013c8:	4826      	ldr	r0, [pc, #152]	@ (8001464 <Listener_CheckButton+0xf0>)
 80013ca:	f000 fc57 	bl	8001c7c <Button_GetState>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <Listener_CheckButton+0x70>
      inputData.id = RUN_STOP;
 80013d4:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <Listener_CheckButton+0xec>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	601a      	str	r2, [r3, #0]
      Controller_SetInputData(inputData);
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <Listener_CheckButton+0xec>)
 80013dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013de:	f7ff fe77 	bl	80010d0 <Controller_SetInputData>
 80013e2:	e036      	b.n	8001452 <Listener_CheckButton+0xde>
   }
   else if (Button_GetState(&hBtnSpeedUp) == ACT_PUSHED) {
 80013e4:	4820      	ldr	r0, [pc, #128]	@ (8001468 <Listener_CheckButton+0xf4>)
 80013e6:	f000 fc49 	bl	8001c7c <Button_GetState>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d114      	bne.n	800141a <Listener_CheckButton+0xa6>
      inputData.id = SPEED;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <Listener_CheckButton+0xec>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	601a      	str	r2, [r3, #0]
      if (inputData.speed_data >= 9){
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <Listener_CheckButton+0xec>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	dd03      	ble.n	8001406 <Listener_CheckButton+0x92>
         inputData.speed_data = 9;
 80013fe:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <Listener_CheckButton+0xec>)
 8001400:	2209      	movs	r2, #9
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	e004      	b.n	8001410 <Listener_CheckButton+0x9c>
      }
      else{
         inputData.speed_data ++;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <Listener_CheckButton+0xec>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <Listener_CheckButton+0xec>)
 800140e:	60d3      	str	r3, [r2, #12]
      }
      Controller_SetInputData(inputData);
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <Listener_CheckButton+0xec>)
 8001412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001414:	f7ff fe5c 	bl	80010d0 <Controller_SetInputData>
 8001418:	e01b      	b.n	8001452 <Listener_CheckButton+0xde>
   }
   else if (Button_GetState(&hBtnSpeedDown) == ACT_PUSHED) {
 800141a:	4814      	ldr	r0, [pc, #80]	@ (800146c <Listener_CheckButton+0xf8>)
 800141c:	f000 fc2e 	bl	8001c7c <Button_GetState>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d115      	bne.n	8001452 <Listener_CheckButton+0xde>
      inputData.id = SPEED;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <Listener_CheckButton+0xec>)
 8001428:	2204      	movs	r2, #4
 800142a:	601a      	str	r2, [r3, #0]
      if (inputData.speed_data == 0){
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <Listener_CheckButton+0xec>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <Listener_CheckButton+0xc8>
         inputData.speed_data = 0;
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <Listener_CheckButton+0xec>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e004      	b.n	8001446 <Listener_CheckButton+0xd2>
      }
      else{
         inputData.speed_data --;
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <Listener_CheckButton+0xec>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <Listener_CheckButton+0xec>)
 8001444:	60d3      	str	r3, [r2, #12]
      }
      Controller_SetInputData(inputData);
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <Listener_CheckButton+0xec>)
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	f7ff fe41 	bl	80010d0 <Controller_SetInputData>
 800144e:	e000      	b.n	8001452 <Listener_CheckButton+0xde>
      return;
 8001450:	bf00      	nop
   }
}
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000338 	.word	0x20000338
 800145c:	20000358 	.word	0x20000358
 8001460:	20000328 	.word	0x20000328
 8001464:	20000364 	.word	0x20000364
 8001468:	20000370 	.word	0x20000370
 800146c:	2000037c 	.word	0x2000037c

08001470 <Listener_CheckUart>:

void Listener_CheckUart()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
	if (isQueEmpty(&uartRxQue)) {
 8001476:	483e      	ldr	r0, [pc, #248]	@ (8001570 <Listener_CheckUart+0x100>)
 8001478:	f000 fa93 	bl	80019a2 <isQueEmpty>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d171      	bne.n	8001566 <Listener_CheckUart+0xf6>
		return;
	}
	int uartRxData = deQue(&uartRxQue);
 8001482:	483b      	ldr	r0, [pc, #236]	@ (8001570 <Listener_CheckUart+0x100>)
 8001484:	f000 fac3 	bl	8001a0e <deQue>
 8001488:	6178      	str	r0, [r7, #20]

	inputData_TypeDef inputData;

	if (uartRxData == 'v') {
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b76      	cmp	r3, #118	@ 0x76
 800148e:	d106      	bne.n	800149e <Listener_CheckUart+0x2e>
		inputData.id = SPEED;
 8001490:	2304      	movs	r3, #4
 8001492:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001498:	f7ff fe1a 	bl	80010d0 <Controller_SetInputData>
 800149c:	e064      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == 's') {
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b73      	cmp	r3, #115	@ 0x73
 80014a2:	d106      	bne.n	80014b2 <Listener_CheckUart+0x42>
		inputData.id = SONG;
 80014a4:	2306      	movs	r3, #6
 80014a6:	607b      	str	r3, [r7, #4]
		Controller_SetInputData(inputData);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ac:	f7ff fe10 	bl	80010d0 <Controller_SetInputData>
 80014b0:	e05a      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '1') {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b31      	cmp	r3, #49	@ 0x31
 80014b6:	d106      	bne.n	80014c6 <Listener_CheckUart+0x56>
		inputData.data = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c0:	f7ff fe06 	bl	80010d0 <Controller_SetInputData>
 80014c4:	e050      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '2') {
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b32      	cmp	r3, #50	@ 0x32
 80014ca:	d106      	bne.n	80014da <Listener_CheckUart+0x6a>
		inputData.data = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d4:	f7ff fdfc 	bl	80010d0 <Controller_SetInputData>
 80014d8:	e046      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '3') {
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b33      	cmp	r3, #51	@ 0x33
 80014de:	d106      	bne.n	80014ee <Listener_CheckUart+0x7e>
		inputData.data = 3;
 80014e0:	2303      	movs	r3, #3
 80014e2:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e8:	f7ff fdf2 	bl	80010d0 <Controller_SetInputData>
 80014ec:	e03c      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '4') {
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b34      	cmp	r3, #52	@ 0x34
 80014f2:	d106      	bne.n	8001502 <Listener_CheckUart+0x92>
		inputData.data = 4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	f7ff fde8 	bl	80010d0 <Controller_SetInputData>
 8001500:	e032      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '5') {
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b35      	cmp	r3, #53	@ 0x35
 8001506:	d106      	bne.n	8001516 <Listener_CheckUart+0xa6>
		inputData.data = 5;
 8001508:	2305      	movs	r3, #5
 800150a:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001510:	f7ff fdde 	bl	80010d0 <Controller_SetInputData>
 8001514:	e028      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '6') {
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b36      	cmp	r3, #54	@ 0x36
 800151a:	d106      	bne.n	800152a <Listener_CheckUart+0xba>
		inputData.data = 6;
 800151c:	2306      	movs	r3, #6
 800151e:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	f7ff fdd4 	bl	80010d0 <Controller_SetInputData>
 8001528:	e01e      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '7') {
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b37      	cmp	r3, #55	@ 0x37
 800152e:	d106      	bne.n	800153e <Listener_CheckUart+0xce>
		inputData.data = 7;
 8001530:	2307      	movs	r3, #7
 8001532:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001538:	f7ff fdca 	bl	80010d0 <Controller_SetInputData>
 800153c:	e014      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '8') {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b38      	cmp	r3, #56	@ 0x38
 8001542:	d106      	bne.n	8001552 <Listener_CheckUart+0xe2>
		inputData.data = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	f7ff fdc0 	bl	80010d0 <Controller_SetInputData>
 8001550:	e00a      	b.n	8001568 <Listener_CheckUart+0xf8>
	}
	else if (uartRxData == '9') {
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2b39      	cmp	r3, #57	@ 0x39
 8001556:	d107      	bne.n	8001568 <Listener_CheckUart+0xf8>
		inputData.data = 9;
 8001558:	2309      	movs	r3, #9
 800155a:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	f7ff fdb6 	bl	80010d0 <Controller_SetInputData>
 8001564:	e000      	b.n	8001568 <Listener_CheckUart+0xf8>
		return;
 8001566:	bf00      	nop
	}
}
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000310 	.word	0x20000310

08001574 <Listener_UartCallBack>:

void Listener_UartCallBack()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	enQue(&uartRxQue, rcvData);
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <Listener_UartCallBack+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <Listener_UartCallBack+0x24>)
 8001580:	f000 fa22 	bl	80019c8 <enQue>
	HAL_UART_Receive_IT(&huart2, &rcvData, 1); // interrupt enable
 8001584:	2201      	movs	r2, #1
 8001586:	4903      	ldr	r1, [pc, #12]	@ (8001594 <Listener_UartCallBack+0x20>)
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <Listener_UartCallBack+0x28>)
 800158a:	f003 fd13 	bl	8004fb4 <HAL_UART_Receive_IT>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000030c 	.word	0x2000030c
 8001598:	20000310 	.word	0x20000310
 800159c:	200002b4 	.word	0x200002b4

080015a0 <Listener_CheckUltra>:

void Listener_CheckUltra(){
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	//inputData.data = Ultra_Start();
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <Motor_Init>:
 */

#include "Motor_Speed.h"

void Motor_Init()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	DC_Motor_Init(&htim1, TIM_CHANNEL_2);
 80015b4:	2104      	movs	r1, #4
 80015b6:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <Motor_Init+0x10>)
 80015b8:	f000 fb92 	bl	8001ce0 <DC_Motor_Init>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000194 	.word	0x20000194

080015c4 <Motor_Start>:

void Motor_Start(uint32_t speed)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	DC_Motor_SetFreq(speed);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb9d 	bl	8001d0c <DC_Motor_SetFreq>
	DC_Motor_Start();
 80015d2:	f000 fbff 	bl	8001dd4 <DC_Motor_Start>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <Presenter_Init>:
// Controller to Presenter Data
static C2P_Data p_data;

// Initial Func
void Presenter_Init()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <Presenter_Init+0x14>)
 80015e6:	f000 fdcf 	bl	8002188 <LCD_Init>
	Motor_Init();
 80015ea:	f7ff ffe1 	bl	80015b0 <Motor_Init>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000013c 	.word	0x2000013c

080015f8 <Presenter_Excute>:


// Behavior Func at ap_main.c
void Presenter_Excute()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	Controller_OutData(&p_data);
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <Presenter_Excute+0x38>)
 80015fe:	f7ff fd57 	bl	80010b0 <Controller_OutData>
	Presenter_DispLCD(p_data.lcd_mode);
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <Presenter_Excute+0x38>)
 8001604:	7c1b      	ldrb	r3, [r3, #16]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f814 	bl	8001634 <Presenter_DispLCD>
//	Presenter_DispMonitor(p_data.uartRxData);
	Presenter_DispFnd_CurrentTime(p_data.current_time);
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <Presenter_Excute+0x38>)
 800160e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001612:	f000 f874 	bl	80016fe <Presenter_DispFnd_CurrentTime>
	Presenter_DispLED_Dist(p_data.distance);
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <Presenter_Excute+0x38>)
 8001618:	7b5b      	ldrb	r3, [r3, #13]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f932 	bl	8001884 <Presenter_DispLED_Dist>
//	Presenter_SongBuzzer(p_data.song);
	Presenter_SpeedMotor(p_data.speed);
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <Presenter_Excute+0x38>)
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f857 	bl	80016d8 <Presenter_SpeedMotor>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000340 	.word	0x20000340

08001634 <Presenter_DispLCD>:

// LCD DISP
void Presenter_DispLCD(uint8_t lcd_mode)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	if (prev_lcd_mode != lcd_mode) {
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <Presenter_DispLCD+0x98>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	429a      	cmp	r2, r3
 8001646:	d009      	beq.n	800165c <Presenter_DispLCD+0x28>
		LCD_writeStringXY(0, 0, "                ");
 8001648:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <Presenter_DispLCD+0x9c>)
 800164a:	2100      	movs	r1, #0
 800164c:	2000      	movs	r0, #0
 800164e:	f000 fee8 	bl	8002422 <LCD_writeStringXY>
		LCD_writeStringXY(1, 0, "                ");
 8001652:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <Presenter_DispLCD+0x9c>)
 8001654:	2100      	movs	r1, #0
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fee3 	bl	8002422 <LCD_writeStringXY>
	}
	switch (lcd_mode) {
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d82d      	bhi.n	80016be <Presenter_DispLCD+0x8a>
 8001662:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <Presenter_DispLCD+0x34>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	080016bf 	.word	0x080016bf
 800166c:	0800167d 	.word	0x0800167d
 8001670:	0800169b 	.word	0x0800169b
 8001674:	080016ad 	.word	0x080016ad
 8001678:	080016b9 	.word	0x080016b9
		case LCD_OFF:
			break;
		case RUN_DIST:
			Presenter_DispLCD_RUN_DIST(p_data.running_time, p_data.distance);
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <Presenter_DispLCD+0xa0>)
 800167e:	7b59      	ldrb	r1, [r3, #13]
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <Presenter_DispLCD+0xa0>)
 8001682:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8001686:	4610      	mov	r0, r2
 8001688:	895a      	ldrh	r2, [r3, #10]
 800168a:	2300      	movs	r3, #0
 800168c:	f362 030f 	bfi	r3, r2, #0, #16
 8001690:	460a      	mov	r2, r1
 8001692:	4619      	mov	r1, r3
 8001694:	f000 f860 	bl	8001758 <Presenter_DispLCD_RUN_DIST>
			break;
 8001698:	e011      	b.n	80016be <Presenter_DispLCD+0x8a>
		case CAL_SPEED:
			Presenter_DispLCD_CAL_SPEED(p_data.calories, p_data.speed);
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <Presenter_DispLCD+0xa0>)
 800169c:	7b9b      	ldrb	r3, [r3, #14]
 800169e:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <Presenter_DispLCD+0xa0>)
 80016a0:	7b12      	ldrb	r2, [r2, #12]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f889 	bl	80017bc <Presenter_DispLCD_CAL_SPEED>
			break;
 80016aa:	e008      	b.n	80016be <Presenter_DispLCD+0x8a>
		case SONG_TITLE:
			Presenter_DispLCD_SONG_TITLE(p_data.song);
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <Presenter_DispLCD+0xa0>)
 80016ae:	7c5b      	ldrb	r3, [r3, #17]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f8af 	bl	8001814 <Presenter_DispLCD_SONG_TITLE>
			break;
 80016b6:	e002      	b.n	80016be <Presenter_DispLCD+0x8a>
		case WARNING:
			Presenter_DispLCD_WARNING();
 80016b8:	f000 f8d8 	bl	800186c <Presenter_DispLCD_WARNING>
			break;
 80016bc:	bf00      	nop
	}
	prev_lcd_mode = lcd_mode;
 80016be:	4a03      	ldr	r2, [pc, #12]	@ (80016cc <Presenter_DispLCD+0x98>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	7013      	strb	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000033c 	.word	0x2000033c
 80016d0:	0800677c 	.word	0x0800677c
 80016d4:	20000340 	.word	0x20000340

080016d8 <Presenter_SpeedMotor>:
}


// MOTOR RUN
void Presenter_SpeedMotor(uint8_t speed)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	Motor_Start(((speed*100)+5000));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2264      	movs	r2, #100	@ 0x64
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80016ee:	3308      	adds	r3, #8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff67 	bl	80015c4 <Motor_Start>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <Presenter_DispFnd_CurrentTime>:

}


void Presenter_DispFnd_CurrentTime(watch_t current_time)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	463b      	mov	r3, r7
 8001706:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(current_time.hour*100 + current_time.min);
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	461a      	mov	r2, r3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4413      	add	r3, r2
 8001712:	461a      	mov	r2, r3
 8001714:	0091      	lsls	r1, r2, #2
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	b29b      	uxth	r3, r3
 8001720:	78ba      	ldrb	r2, [r7, #2]
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fb8c 	bl	8001e44 <FND_WriteData>

	FND_WriteDp(FND_DP_1000|FND_DP_10|FND_DP_1, FND_DP_OFF);
 800172c:	2100      	movs	r1, #0
 800172e:	200b      	movs	r0, #11
 8001730:	f000 fb60 	bl	8001df4 <FND_WriteDp>

	if (current_time.msec < 500) {
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800173a:	d204      	bcs.n	8001746 <Presenter_DispFnd_CurrentTime+0x48>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 800173c:	2101      	movs	r1, #1
 800173e:	2004      	movs	r0, #4
 8001740:	f000 fb58 	bl	8001df4 <FND_WriteDp>
	}
	else {
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 8001744:	e003      	b.n	800174e <Presenter_DispFnd_CurrentTime+0x50>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 8001746:	2100      	movs	r1, #0
 8001748:	2004      	movs	r0, #4
 800174a:	f000 fb53 	bl	8001df4 <FND_WriteDp>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <Presenter_DispLCD_RUN_DIST>:




void Presenter_DispLCD_RUN_DIST(watch_t running_time, uint8_t distance)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0a0      	sub	sp, #128	@ 0x80
 800175c:	af02      	add	r7, sp, #8
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	e883 0003 	stmia.w	r3, {r0, r1}
 8001766:	4613      	mov	r3, r2
 8001768:	71fb      	strb	r3, [r7, #7]
	char str1[50];
	char str2[50];

	sprintf(str1, "RunTime:%02d:%02d:%02d", running_time.hour, running_time.min, running_time.sec);
 800176a:	7a7b      	ldrb	r3, [r7, #9]
 800176c:	461a      	mov	r2, r3
 800176e:	7abb      	ldrb	r3, [r7, #10]
 8001770:	4619      	mov	r1, r3
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	460b      	mov	r3, r1
 800177c:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <Presenter_DispLCD_RUN_DIST+0x5c>)
 800177e:	f004 fb51 	bl	8005e24 <siprintf>
	sprintf(str2, "distance:%dm", distance);
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	490b      	ldr	r1, [pc, #44]	@ (80017b8 <Presenter_DispLCD_RUN_DIST+0x60>)
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fb4a 	bl	8005e24 <siprintf>

	LCD_writeStringXY(0, 0, str1);
 8001790:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001794:	461a      	mov	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f000 fe42 	bl	8002422 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	461a      	mov	r2, r3
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 fe3b 	bl	8002422 <LCD_writeStringXY>
}
 80017ac:	bf00      	nop
 80017ae:	3778      	adds	r7, #120	@ 0x78
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	08006804 	.word	0x08006804
 80017b8:	0800681c 	.word	0x0800681c

080017bc <Presenter_DispLCD_CAL_SPEED>:

void Presenter_DispLCD_CAL_SPEED(uint8_t calories, uint8_t speed)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09c      	sub	sp, #112	@ 0x70
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	char str1[50];
	char str2[50];

	sprintf(str1, "calories:%d", calories);
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017d2:	490e      	ldr	r1, [pc, #56]	@ (800180c <Presenter_DispLCD_CAL_SPEED+0x50>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fb25 	bl	8005e24 <siprintf>
	sprintf(str2, "speed:%d", speed);
 80017da:	79ba      	ldrb	r2, [r7, #6]
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	490b      	ldr	r1, [pc, #44]	@ (8001810 <Presenter_DispLCD_CAL_SPEED+0x54>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fb1e 	bl	8005e24 <siprintf>

	LCD_writeStringXY(0, 0, str1);
 80017e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017ec:	461a      	mov	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fe16 	bl	8002422 <LCD_writeStringXY>
	LCD_writeStringXY(1, 0, str2);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	461a      	mov	r2, r3
 80017fc:	2100      	movs	r1, #0
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 fe0f 	bl	8002422 <LCD_writeStringXY>
}
 8001804:	bf00      	nop
 8001806:	3770      	adds	r7, #112	@ 0x70
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0800682c 	.word	0x0800682c
 8001810:	08006838 	.word	0x08006838

08001814 <Presenter_DispLCD_SONG_TITLE>:

void Presenter_DispLCD_SONG_TITLE(uint8_t song)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	switch (song) {
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d012      	beq.n	800184a <Presenter_DispLCD_SONG_TITLE+0x36>
 8001824:	2b03      	cmp	r3, #3
 8001826:	dc16      	bgt.n	8001856 <Presenter_DispLCD_SONG_TITLE+0x42>
 8001828:	2b01      	cmp	r3, #1
 800182a:	d002      	beq.n	8001832 <Presenter_DispLCD_SONG_TITLE+0x1e>
 800182c:	2b02      	cmp	r3, #2
 800182e:	d006      	beq.n	800183e <Presenter_DispLCD_SONG_TITLE+0x2a>
			break;
		case 3:
			LCD_writeStringXY(0, 0, "3");
			break;
	}
}
 8001830:	e011      	b.n	8001856 <Presenter_DispLCD_SONG_TITLE+0x42>
			LCD_writeStringXY(0, 0, "1");
 8001832:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <Presenter_DispLCD_SONG_TITLE+0x4c>)
 8001834:	2100      	movs	r1, #0
 8001836:	2000      	movs	r0, #0
 8001838:	f000 fdf3 	bl	8002422 <LCD_writeStringXY>
			break;
 800183c:	e00b      	b.n	8001856 <Presenter_DispLCD_SONG_TITLE+0x42>
			LCD_writeStringXY(0, 0, "2");
 800183e:	4a09      	ldr	r2, [pc, #36]	@ (8001864 <Presenter_DispLCD_SONG_TITLE+0x50>)
 8001840:	2100      	movs	r1, #0
 8001842:	2000      	movs	r0, #0
 8001844:	f000 fded 	bl	8002422 <LCD_writeStringXY>
			break;
 8001848:	e005      	b.n	8001856 <Presenter_DispLCD_SONG_TITLE+0x42>
			LCD_writeStringXY(0, 0, "3");
 800184a:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <Presenter_DispLCD_SONG_TITLE+0x54>)
 800184c:	2100      	movs	r1, #0
 800184e:	2000      	movs	r0, #0
 8001850:	f000 fde7 	bl	8002422 <LCD_writeStringXY>
			break;
 8001854:	bf00      	nop
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08006844 	.word	0x08006844
 8001864:	08006848 	.word	0x08006848
 8001868:	0800684c 	.word	0x0800684c

0800186c <Presenter_DispLCD_WARNING>:

void Presenter_DispLCD_WARNING()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	LCD_writeStringXY(0, 0, "TOO FAR!!!");
 8001870:	4a03      	ldr	r2, [pc, #12]	@ (8001880 <Presenter_DispLCD_WARNING+0x14>)
 8001872:	2100      	movs	r1, #0
 8001874:	2000      	movs	r0, #0
 8001876:	f000 fdd4 	bl	8002422 <LCD_writeStringXY>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	08006850 	.word	0x08006850

08001884 <Presenter_DispLED_Dist>:



// LED (Dist)
void Presenter_DispLED_Dist(uint32_t dist)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	int led_data = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
	if(dist%50==0) led_data = (led_data << 1) + 1;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <Presenter_DispLED_Dist+0x3c>)
 8001894:	fba3 1302 	umull	r1, r3, r3, r2
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	2132      	movs	r1, #50	@ 0x32
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <Presenter_DispLED_Dist+0x2a>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	3301      	adds	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]

	LedBar_Write(led_data);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fdca 	bl	800244c <LedBar_Write>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	51eb851f 	.word	0x51eb851f

080018c4 <HAL_TIM_PeriodElapsedCallback>:
 */

#include "ap_main.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d4:	d105      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 80018d6:	f000 fac5 	bl	8001e64 <FND_DispDataCallBack>

		TimeWatch_IncTimeCallBack();
 80018da:	f000 f965 	bl	8001ba8 <TimeWatch_IncTimeCallBack>
		StopWatch_IncTimeCallBack();
 80018de:	f000 f8bb 	bl	8001a58 <StopWatch_IncTimeCallBack>
	}
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_UART_RxCpltCallback+0x20>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 80018fe:	f7ff fe39 	bl	8001574 <Listener_UartCallBack>
	}
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400

08001910 <ap_main>:




int ap_main()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim2);
 8001914:	4807      	ldr	r0, [pc, #28]	@ (8001934 <ap_main+0x24>)
 8001916:	f002 fb49 	bl	8003fac <HAL_TIM_Base_Start_IT>
	Motor_Start(((1*100)+5000));
 800191a:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 800191e:	f7ff fe51 	bl	80015c4 <Motor_Start>
	while(1)
	{
		Listener_Excute();
 8001922:	f7ff fd1d 	bl	8001360 <Listener_Excute>
		Controller_Excute();
 8001926:	f7ff fbbc 	bl	80010a2 <Controller_Excute>
		Presenter_Excute();
 800192a:	f7ff fe65 	bl	80015f8 <Presenter_Excute>
		Listener_Excute();
 800192e:	bf00      	nop
 8001930:	e7f7      	b.n	8001922 <ap_main+0x12>
 8001932:	bf00      	nop
 8001934:	200001dc 	.word	0x200001dc

08001938 <ap_init>:

	return 0;
}

void ap_init()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	Listener_Init();
 800193c:	f7ff fcdc 	bl	80012f8 <Listener_Init>
	Presenter_Init();
 8001940:	f7ff fe4e 	bl	80015e0 <Presenter_Init>
	Motor_Init();
 8001944:	f7ff fe34 	bl	80015b0 <Motor_Init>
//	Sound_Init();
//	Sound_POWERON();
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <Que_Init>:
#include "queue.h"



void Que_Init(Que_TypeDef *q)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
	q->rear = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <isQueFull>:

int isQueFull(Que_TypeDef *q)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	return q->front == ((q->rear+1) % QUE_SIZE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	4259      	negs	r1, r3
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	f001 0103 	and.w	r1, r1, #3
 8001988:	bf58      	it	pl
 800198a:	424b      	negpl	r3, r1
 800198c:	429a      	cmp	r2, r3
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <isQueEmpty>:

int isQueEmpty(Que_TypeDef *q)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return q->front == q->rear;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <enQue>:

void enQue(Que_TypeDef *q, int data)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	if (isQueFull(q)) {
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffca 	bl	800196c <isQueFull>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d113      	bne.n	8001a06 <enQue+0x3e>
		return;
	}
	q->queData[q->rear] = data;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3202      	adds	r2, #2
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	q->rear = (q->rear+1) % QUE_SIZE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	425a      	negs	r2, r3
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	bf58      	it	pl
 80019fe:	4253      	negpl	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6053      	str	r3, [r2, #4]
 8001a04:	e000      	b.n	8001a08 <enQue+0x40>
		return;
 8001a06:	bf00      	nop
}
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <deQue>:

int deQue(Que_TypeDef *q)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	if (isQueEmpty(q)) {
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffc3 	bl	80019a2 <isQueEmpty>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d114      	bne.n	8001a4c <deQue+0x3e>
		return;
	}
	int data = q->queData[q->front];
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3202      	adds	r2, #2
 8001a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2e:	60fb      	str	r3, [r7, #12]
	q->front = (q->front+1) % QUE_SIZE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	425a      	negs	r2, r3
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	bf58      	it	pl
 8001a42:	4253      	negpl	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
	return data;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	e001      	b.n	8001a50 <deQue+0x42>
		return;
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <StopWatch_IncTimeCallBack>:
extern inputData_TypeDef controlData;
static stopWatchState_t stopWatchState = STOP;
static watch_t stopWatch = {STOP_WATCH, 12, 0, 0, 0};

void StopWatch_IncTimeCallBack()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	if (stopWatchState == RUN) {
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <StopWatch_IncTimeCallBack+0x14>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <StopWatch_IncTimeCallBack+0x10>
		StopWatch_IncTime();
 8001a64:	f000 f804 	bl	8001a70 <StopWatch_IncTime>
	}
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000354 	.word	0x20000354

08001a70 <StopWatch_IncTime>:

void StopWatch_IncTime()
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000-1) {
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a76:	889b      	ldrh	r3, [r3, #4]
 8001a78:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d806      	bhi.n	8001a8e <StopWatch_IncTime+0x1e>
		stopWatch.msec++;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a82:	889b      	ldrh	r3, [r3, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a8a:	809a      	strh	r2, [r3, #4]
		return;
 8001a8c:	e02c      	b.n	8001ae8 <StopWatch_IncTime+0x78>
	}
	stopWatch.msec = 0;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	809a      	strh	r2, [r3, #4]

	if (stopWatch.sec < 60-1) {
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a96:	78db      	ldrb	r3, [r3, #3]
 8001a98:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a9a:	d806      	bhi.n	8001aaa <StopWatch_IncTime+0x3a>
		stopWatch.sec++;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001aa6:	70da      	strb	r2, [r3, #3]
		return;
 8001aa8:	e01e      	b.n	8001ae8 <StopWatch_IncTime+0x78>
	}
	stopWatch.sec = 0;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	70da      	strb	r2, [r3, #3]

	if (stopWatch.min < 60-1) {
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ab2:	789b      	ldrb	r3, [r3, #2]
 8001ab4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ab6:	d806      	bhi.n	8001ac6 <StopWatch_IncTime+0x56>
		stopWatch.min++;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001aba:	789b      	ldrb	r3, [r3, #2]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ac2:	709a      	strb	r2, [r3, #2]
		return;
 8001ac4:	e010      	b.n	8001ae8 <StopWatch_IncTime+0x78>
	}
	stopWatch.min = 0;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24-1) {
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	2b16      	cmp	r3, #22
 8001ad2:	d806      	bhi.n	8001ae2 <StopWatch_IncTime+0x72>
		stopWatch.hour++;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ad6:	785b      	ldrb	r3, [r3, #1]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ade:	705a      	strb	r2, [r3, #1]
		return;
 8001ae0:	e002      	b.n	8001ae8 <StopWatch_IncTime+0x78>
	}
	stopWatch.hour = 0;
 8001ae2:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <StopWatch_IncTime+0x80>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	705a      	strb	r2, [r3, #1]
}
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000018 	.word	0x20000018

08001af4 <StopWatch_Excute>:

watch_t StopWatch_Excute()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	switch (stopWatchState)
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <StopWatch_Excute+0x38>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <StopWatch_Excute+0x16>
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d003      	beq.n	8001b10 <StopWatch_Excute+0x1c>
 8001b08:	e005      	b.n	8001b16 <StopWatch_Excute+0x22>
	{
	case STOP:
		StopWatch_Stop();
 8001b0a:	f000 f829 	bl	8001b60 <StopWatch_Stop>
		break;
 8001b0e:	e002      	b.n	8001b16 <StopWatch_Excute+0x22>
	case RUN:
		StopWatch_Run();
 8001b10:	f000 f810 	bl	8001b34 <StopWatch_Run>
		break;
 8001b14:	bf00      	nop
	}
	return stopWatch;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <StopWatch_Excute+0x3c>)
 8001b1a:	6810      	ldr	r0, [r2, #0]
 8001b1c:	6018      	str	r0, [r3, #0]
 8001b1e:	8892      	ldrh	r2, [r2, #4]
 8001b20:	809a      	strh	r2, [r3, #4]
}
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000354 	.word	0x20000354
 8001b30:	20000018 	.word	0x20000018

08001b34 <StopWatch_Run>:


void StopWatch_Run()
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	if (controlData.id == RUN_STOP) {
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <StopWatch_Run+0x24>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d105      	bne.n	8001b4c <StopWatch_Run+0x18>
		controlData.id = NO_CONTROL;
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <StopWatch_Run+0x24>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
		stopWatchState = STOP;
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <StopWatch_Run+0x28>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
	//		FND_WriteDp(FND_DP_1000, FND_DP_ON);
	//	}
	//	else {
	//		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	//	}
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200002fc 	.word	0x200002fc
 8001b5c:	20000354 	.word	0x20000354

08001b60 <StopWatch_Stop>:

void StopWatch_Stop()
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

	stopWatch.msec = 0;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <StopWatch_Stop+0x3c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <StopWatch_Stop+0x3c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <StopWatch_Stop+0x3c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <StopWatch_Stop+0x3c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
	if (controlData.id == RUN_STOP) {
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <StopWatch_Stop+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d105      	bne.n	8001b90 <StopWatch_Stop+0x30>
		controlData.id = NO_CONTROL;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <StopWatch_Stop+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
		stopWatchState = RUN;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <StopWatch_Stop+0x44>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
	}

	//FND_WriteData((stopWatch.min % 10 * 1000) + (stopWatch.sec * 10) + (stopWatch.msec/100));
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	200002fc 	.word	0x200002fc
 8001ba4:	20000354 	.word	0x20000354

08001ba8 <TimeWatch_IncTimeCallBack>:
#include "timeWatch.h"

static watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

void TimeWatch_IncTimeCallBack()
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000-1) {
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bae:	889b      	ldrh	r3, [r3, #4]
 8001bb0:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d806      	bhi.n	8001bc6 <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bba:	889b      	ldrh	r3, [r3, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bc2:	809a      	strh	r2, [r3, #4]
		return;
 8001bc4:	e02c      	b.n	8001c20 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.msec = 0;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	809a      	strh	r2, [r3, #4]

	if (timeWatch.sec < 60-1) {
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bd2:	d806      	bhi.n	8001be2 <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bde:	70da      	strb	r2, [r3, #3]
		return;
 8001be0:	e01e      	b.n	8001c20 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.sec = 0;
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	70da      	strb	r2, [r3, #3]

	if (timeWatch.min < 60-1) {
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bee:	d806      	bhi.n	8001bfe <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bf2:	789b      	ldrb	r3, [r3, #2]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001bfa:	709a      	strb	r2, [r3, #2]
		return;
 8001bfc:	e010      	b.n	8001c20 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24-1) {
 8001c04:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b16      	cmp	r3, #22
 8001c0a:	d806      	bhi.n	8001c1a <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001c16:	705a      	strb	r2, [r3, #1]
		return;
 8001c18:	e002      	b.n	8001c20 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 8001c1a:	4b03      	ldr	r3, [pc, #12]	@ (8001c28 <TimeWatch_IncTimeCallBack+0x80>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	705a      	strb	r2, [r3, #1]
}
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	20000020 	.word	0x20000020

08001c2c <TimeWatch_Excute>:

watch_t TimeWatch_Excute()
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	return timeWatch;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <TimeWatch_Excute+0x20>)
 8001c38:	6810      	ldr	r0, [r2, #0]
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	8892      	ldrh	r2, [r2, #4]
 8001c3e:	809a      	strh	r2, [r3, #4]
//		FND_WriteDp(FND_DP_100, FND_DP_ON);
//	}
//	else {
//		FND_WriteDp(FND_DP_100, FND_DP_OFF);
//	}
}
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20000020 	.word	0x20000020

08001c50 <Button_Init>:
Button_Handler_t hBtnSpeedUp;
Button_Handler_t hBtnSpeedDown;


void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef * GPIOx, uint16_t pinNum)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum); // normal state is high.
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	889b      	ldrh	r3, [r3, #4]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 ffd4 	bl	8002c3c <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10a      	bne.n	8001cb6 <Button_GetState+0x3a>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <Button_GetState+0x3a>
		HAL_Delay(2); // debounce
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f000 fc7c 	bl	80025a4 <HAL_Delay>
		hbtn->prevState = PUSHED;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <Button_GetState+0x5a>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <Button_GetState+0x58>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <Button_GetState+0x58>
		HAL_Delay(2); // debounce
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f000 fc6d 	bl	80025a4 <HAL_Delay>
		hbtn->prevState = RELEASED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e000      	b.n	8001cd6 <Button_GetState+0x5a>
	}
	return NO_ACT;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <DC_Motor_Init>:

static TIM_HandleTypeDef *hmotorTim;
static uint32_t motorTimChannel;

void DC_Motor_Init(TIM_HandleTypeDef *htim, uint32_t channel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	hmotorTim = htim;
 8001cea:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <DC_Motor_Init+0x24>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6013      	str	r3, [r2, #0]
	motorTimChannel = channel;
 8001cf0:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <DC_Motor_Init+0x28>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000388 	.word	0x20000388
 8001d08:	2000038c 	.word	0x2000038c

08001d0c <DC_Motor_SetFreq>:

void DC_Motor_SetFreq(uint32_t freq)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (freq < 1) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <DC_Motor_SetFreq+0x14>
		freq = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	e007      	b.n	8001d30 <DC_Motor_SetFreq+0x24>
	}
	else if (freq > 10000) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d902      	bls.n	8001d30 <DC_Motor_SetFreq+0x24>
		freq = 10000;
 8001d2a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d2e:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_AUTORELOAD(hmotorTim, 1000000/freq-1);
 8001d30:	4a24      	ldr	r2, [pc, #144]	@ (8001dc4 <DC_Motor_SetFreq+0xb8>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d38:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3a01      	subs	r2, #1
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d42:	4a20      	ldr	r2, [pc, #128]	@ (8001dc4 <DC_Motor_SetFreq+0xb8>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3a01      	subs	r2, #1
 8001d50:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <DC_Motor_SetFreq+0xc0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <DC_Motor_SetFreq+0x62>
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd0 <DC_Motor_SetFreq+0xc4>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d6c:	e024      	b.n	8001db8 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <DC_Motor_SetFreq+0xc0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d109      	bne.n	8001d8a <DC_Motor_SetFreq+0x7e>
 8001d76:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <DC_Motor_SetFreq+0xc4>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d88:	e016      	b.n	8001db8 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <DC_Motor_SetFreq+0xc0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d109      	bne.n	8001da6 <DC_Motor_SetFreq+0x9a>
 8001d92:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd0 <DC_Motor_SetFreq+0xc4>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001da4:	e008      	b.n	8001db8 <DC_Motor_SetFreq+0xac>
	__HAL_TIM_SET_COMPARE(hmotorTim, motorTimChannel, 1000000/freq/2-1);
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <DC_Motor_SetFreq+0xc4>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4a06      	ldr	r2, [pc, #24]	@ (8001dc8 <DC_Motor_SetFreq+0xbc>)
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	000f4240 	.word	0x000f4240
 8001dc8:	20000388 	.word	0x20000388
 8001dcc:	2000038c 	.word	0x2000038c
 8001dd0:	0007a120 	.word	0x0007a120

08001dd4 <DC_Motor_Start>:

void DC_Motor_Start()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(hmotorTim, motorTimChannel);
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <DC_Motor_Start+0x18>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <DC_Motor_Start+0x1c>)
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 f99e 	bl	8004124 <HAL_TIM_PWM_Start>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000388 	.word	0x20000388
 8001df0:	2000038c 	.word	0x2000038c

08001df4 <FND_WriteDp>:
static uint8_t fndDispDp = 0;   // fnd dp data, xxxx1111 -> xxxx_dp1000_dp100_dp10_dp1



void FND_WriteDp(uint8_t dpData, uint8_t dpState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON)
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <FND_WriteDp+0x4c>)
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <FND_WriteDp+0x4c>)
 8001e16:	701a      	strb	r2, [r3, #0]
	else
		fndDispDp &= ~dpData;
}
 8001e18:	e00b      	b.n	8001e32 <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <FND_WriteDp+0x4c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b25b      	sxtb	r3, r3
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <FND_WriteDp+0x4c>)
 8001e30:	701a      	strb	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000392 	.word	0x20000392

08001e44 <FND_WriteData>:

// write fndDispNum
void FND_WriteData(uint16_t data)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <FND_WriteData+0x1c>)
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	8013      	strh	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	20000390 	.word	0x20000390

08001e64 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDispNum
void FND_DispDataCallBack()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	static int digitPos = 0;
	// 인터럽트가 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos+1) % 8;
 8001e68:	4b80      	ldr	r3, [pc, #512]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	425a      	negs	r2, r3
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	f002 0207 	and.w	r2, r2, #7
 8001e78:	bf58      	it	pl
 8001e7a:	4253      	negpl	r3, r2
 8001e7c:	4a7b      	ldr	r2, [pc, #492]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001e7e:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 8001e80:	4b7a      	ldr	r3, [pc, #488]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	f200 80ee 	bhi.w	8002066 <FND_DispDataCallBack+0x202>
 8001e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e90 <FND_DispDataCallBack+0x2c>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001eb1 	.word	0x08001eb1
 8001e94:	08001edf 	.word	0x08001edf
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f4f 	.word	0x08001f4f
 8001ea0:	08001f87 	.word	0x08001f87
 8001ea4:	08001fbf 	.word	0x08001fbf
 8001ea8:	08001ff7 	.word	0x08001ff7
 8001eac:	0800202f 	.word	0x0800202f
	{
	case DIGIT_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001eb0:	f000 f900 	bl	80020b4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum%10);
 8001eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8002070 <FND_DispDataCallBack+0x20c>)
 8001eb6:	881a      	ldrh	r2, [r3, #0]
 8001eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8002074 <FND_DispDataCallBack+0x210>)
 8001eba:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebe:	08d9      	lsrs	r1, r3, #3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f913 	bl	80020f8 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001ed2:	4b66      	ldr	r3, [pc, #408]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f8d4 	bl	8002084 <FND_DispOn>
		break;
 8001edc:	e0c3      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001ede:	f000 f8e9 	bl	80020b4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/10%10);
 8001ee2:	4b63      	ldr	r3, [pc, #396]	@ (8002070 <FND_DispDataCallBack+0x20c>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	4a63      	ldr	r2, [pc, #396]	@ (8002074 <FND_DispDataCallBack+0x210>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b60      	ldr	r3, [pc, #384]	@ (8002074 <FND_DispDataCallBack+0x210>)
 8001ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef6:	08d9      	lsrs	r1, r3, #3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 f8f7 	bl	80020f8 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f0a:	4b58      	ldr	r3, [pc, #352]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f8b8 	bl	8002084 <FND_DispOn>
		break;
 8001f14:	e0a7      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f16:	f000 f8cd 	bl	80020b4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/100%10);
 8001f1a:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <FND_DispDataCallBack+0x20c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <FND_DispDataCallBack+0x214>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b52      	ldr	r3, [pc, #328]	@ (8002074 <FND_DispDataCallBack+0x210>)
 8001f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2e:	08d9      	lsrs	r1, r3, #3
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f8db 	bl	80020f8 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f42:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f89c 	bl	8002084 <FND_DispOn>
		break;
 8001f4c:	e08b      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f4e:	f000 f8b1 	bl	80020b4 <FND_DispOffAll>
		FND_DispDigit(fndDispNum/1000%10);
 8001f52:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <FND_DispDataCallBack+0x20c>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4a49      	ldr	r2, [pc, #292]	@ (800207c <FND_DispDataCallBack+0x218>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b44      	ldr	r3, [pc, #272]	@ (8002074 <FND_DispDataCallBack+0x210>)
 8001f62:	fba3 1302 	umull	r1, r3, r3, r2
 8001f66:	08d9      	lsrs	r1, r3, #3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f8bf 	bl	80020f8 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f880 	bl	8002084 <FND_DispOn>
		break;
 8001f84:	e06f      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001f86:	f000 f895 	bl	80020b4 <FND_DispOffAll>
		if (fndDispDp & (1<<0)){
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <FND_DispDataCallBack+0x21c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10); // DP ON
 8001f96:	200a      	movs	r0, #10
 8001f98:	f000 f8ae 	bl	80020f8 <FND_DispDigit>
 8001f9c:	e002      	b.n	8001fa4 <FND_DispDataCallBack+0x140>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001f9e:	200b      	movs	r0, #11
 8001fa0:	f000 f8aa 	bl	80020f8 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001fa4:	4b31      	ldr	r3, [pc, #196]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	425a      	negs	r2, r3
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	bf58      	it	pl
 8001fb4:	4253      	negpl	r3, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f864 	bl	8002084 <FND_DispOn>
		break;
 8001fbc:	e053      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001fbe:	f000 f879 	bl	80020b4 <FND_DispOffAll>
		if (fndDispDp & (1<<1)){
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <FND_DispDataCallBack+0x21c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10); // DP ON
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f000 f892 	bl	80020f8 <FND_DispDigit>
 8001fd4:	e002      	b.n	8001fdc <FND_DispDataCallBack+0x178>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8001fd6:	200b      	movs	r0, #11
 8001fd8:	f000 f88e 	bl	80020f8 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <FND_DispDataCallBack+0x208>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	425a      	negs	r2, r3
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	bf58      	it	pl
 8001fec:	4253      	negpl	r3, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f848 	bl	8002084 <FND_DispOn>
		break;
 8001ff4:	e037      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 8001ff6:	f000 f85d 	bl	80020b4 <FND_DispOffAll>
		if (fndDispDp & (1<<2)){
 8001ffa:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <FND_DispDataCallBack+0x21c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10); // DP ON
 8002006:	200a      	movs	r0, #10
 8002008:	f000 f876 	bl	80020f8 <FND_DispDigit>
 800200c:	e002      	b.n	8002014 <FND_DispDataCallBack+0x1b0>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 800200e:	200b      	movs	r0, #11
 8002010:	f000 f872 	bl	80020f8 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <FND_DispDataCallBack+0x208>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	425a      	negs	r2, r3
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	bf58      	it	pl
 8002024:	4253      	negpl	r3, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f82c 	bl	8002084 <FND_DispOn>
		break;
 800202c:	e01b      	b.n	8002066 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		//FND_DispOff(digitPos);
		FND_DispOffAll();
 800202e:	f000 f841 	bl	80020b4 <FND_DispOffAll>
		if (fndDispDp & (1<<3)){
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <FND_DispDataCallBack+0x21c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10); // DP ON
 800203e:	200a      	movs	r0, #10
 8002040:	f000 f85a 	bl	80020f8 <FND_DispDigit>
 8002044:	e002      	b.n	800204c <FND_DispDataCallBack+0x1e8>
		}
		else {
			FND_DispDigit(11); // ALL OFF
 8002046:	200b      	movs	r0, #11
 8002048:	f000 f856 	bl	80020f8 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <FND_DispDataCallBack+0x208>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	425a      	negs	r2, r3
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	bf58      	it	pl
 800205c:	4253      	negpl	r3, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f810 	bl	8002084 <FND_DispOn>
		break;
 8002064:	bf00      	nop
	}
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000394 	.word	0x20000394
 8002070:	20000390 	.word	0x20000390
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	51eb851f 	.word	0x51eb851f
 800207c:	10624dd3 	.word	0x10624dd3
 8002080:	20000392 	.word	0x20000392

08002084 <FND_DispOn>:
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
}
*/

void FND_DispOn(int fndPos)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	// GPIO_Write(GPIOx, Pin, RESET);
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, RESET);
 800208c:	4a08      	ldr	r2, [pc, #32]	@ (80020b0 <FND_DispOn+0x2c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002094:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <FND_DispOn+0x2c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	f000 fde2 	bl	8002c6c <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000028 	.word	0x20000028

080020b4 <FND_DispOffAll>:

void FND_DispOffAll()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	e010      	b.n	80020e2 <FND_DispOffAll+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, SET);
 80020c0:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <FND_DispOffAll+0x40>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <FND_DispOffAll+0x40>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	f000 fdc8 	bl	8002c6c <HAL_GPIO_WritePin>
	for (int i=0; i<4; i++) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	ddeb      	ble.n	80020c0 <FND_DispOffAll+0xc>
	}
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000028 	.word	0x20000028

080020f8 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 8002102:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <FND_DispDigit+0x88>)
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	ca07      	ldmia	r2, {r0, r1, r2}
 800210a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    0x6F,  // 9 => 01101111
	    0x80,  // 10(dp) => 10000000
	    0x00,  // 11(off)=> 00000000
	};

	for (int i=0; i<8; i++) {
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e02c      	b.n	800216e <FND_DispDigit+0x76>
		if (!(segFont[digit] & (1<<i))) {
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	3318      	adds	r3, #24
 8002118:	443b      	add	r3, r7
 800211a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800211e:	461a      	mov	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa42 f303 	asr.w	r3, r2, r3
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);
 800212e:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <FND_DispDigit+0x8c>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002136:	4a13      	ldr	r2, [pc, #76]	@ (8002184 <FND_DispDigit+0x8c>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	f000 fd91 	bl	8002c6c <HAL_GPIO_WritePin>
 800214a:	e00d      	b.n	8002168 <FND_DispDigit+0x70>
		}
		else {
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <FND_DispDigit+0x8c>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002154:	4a0b      	ldr	r2, [pc, #44]	@ (8002184 <FND_DispDigit+0x8c>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	b29b      	uxth	r3, r3
 8002160:	2201      	movs	r2, #1
 8002162:	4619      	mov	r1, r3
 8002164:	f000 fd82 	bl	8002c6c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b07      	cmp	r3, #7
 8002172:	ddcf      	ble.n	8002114 <FND_DispDigit+0x1c>
		}
	}
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0800685c 	.word	0x0800685c
 8002184:	20000048 	.word	0x20000048

08002188 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	hLcdI2C = hI2C;
 8002190:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <LCD_Init+0x6c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8002196:	2032      	movs	r0, #50	@ 0x32
 8002198:	f000 fa04 	bl	80025a4 <HAL_Delay>
	LCD_cmdMode();
 800219c:	f000 f850 	bl	8002240 <LCD_cmdMode>
	LCD_writeMode();
 80021a0:	f000 f872 	bl	8002288 <LCD_writeMode>
	LCD_sendNibbleData(0x30);
 80021a4:	2030      	movs	r0, #48	@ 0x30
 80021a6:	f000 f8a5 	bl	80022f4 <LCD_sendNibbleData>
	HAL_Delay(5);
 80021aa:	2005      	movs	r0, #5
 80021ac:	f000 f9fa 	bl	80025a4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80021b0:	2030      	movs	r0, #48	@ 0x30
 80021b2:	f000 f89f 	bl	80022f4 <LCD_sendNibbleData>
	HAL_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 f9f4 	bl	80025a4 <HAL_Delay>
	LCD_sendNibbleData(0x30);
 80021bc:	2030      	movs	r0, #48	@ 0x30
 80021be:	f000 f899 	bl	80022f4 <LCD_sendNibbleData>
	LCD_sendNibbleData(0x20);
 80021c2:	2020      	movs	r0, #32
 80021c4:	f000 f896 	bl	80022f4 <LCD_sendNibbleData>
	LCD_sendData(LCD_4BIT_FUNC_SET);
 80021c8:	2028      	movs	r0, #40	@ 0x28
 80021ca:	f000 f8b7 	bl	800233c <LCD_sendData>
	LCD_sendData(LCD_DISP_OFF);
 80021ce:	2008      	movs	r0, #8
 80021d0:	f000 f8b4 	bl	800233c <LCD_sendData>
	LCD_sendData(LCD_DISP_CLEAR);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f000 f8b1 	bl	800233c <LCD_sendData>
	LCD_sendData(LCD_ENTRY_MODE_SET);
 80021da:	2006      	movs	r0, #6
 80021dc:	f000 f8ae 	bl	800233c <LCD_sendData>
	LCD_sendData(LCD_DISP_ON);
 80021e0:	200c      	movs	r0, #12
 80021e2:	f000 f8ab 	bl	800233c <LCD_sendData>
	LCD_backLightOn();
 80021e6:	f000 f81b 	bl	8002220 <LCD_backLightOn>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000039c 	.word	0x2000039c

080021f8 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hLcdI2C, LCD_DEV_ADDR<<1, &data, 1, 10);
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <LCD_sendI2C+0x24>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	1dfa      	adds	r2, r7, #7
 8002208:	230a      	movs	r3, #10
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2301      	movs	r3, #1
 800220e:	214e      	movs	r1, #78	@ 0x4e
 8002210:	f000 fe8a 	bl	8002f28 <HAL_I2C_Master_Transmit>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000039c 	.word	0x2000039c

08002220 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BL);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <LCD_backLightOn+0x1c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b03      	ldr	r3, [pc, #12]	@ (800223c <LCD_backLightOn+0x1c>)
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20000398 	.word	0x20000398

08002240 <LCD_cmdMode>:
{
	lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <LCD_cmdMode+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <LCD_cmdMode+0x20>)
 8002250:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002252:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <LCD_cmdMode+0x20>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ffce 	bl	80021f8 <LCD_sendI2C>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000398 	.word	0x20000398

08002264 <LCD_charMode>:

void LCD_charMode()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <LCD_charMode+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b04      	ldr	r3, [pc, #16]	@ (8002284 <LCD_charMode+0x20>)
 8002274:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002276:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <LCD_charMode+0x20>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ffbc 	bl	80021f8 <LCD_sendI2C>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000398 	.word	0x20000398

08002288 <LCD_writeMode>:

void LCD_writeMode()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <LCD_writeMode+0x20>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f023 0302 	bic.w	r3, r3, #2
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <LCD_writeMode+0x20>)
 8002298:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 800229a:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <LCD_writeMode+0x20>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffaa 	bl	80021f8 <LCD_sendI2C>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000398 	.word	0x20000398

080022ac <LCD_E_High>:

void LCD_E_High()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <LCD_E_High+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <LCD_E_High+0x20>)
 80022bc:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022be:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <LCD_E_High+0x20>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff ff98 	bl	80021f8 <LCD_sendI2C>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000398 	.word	0x20000398

080022d0 <LCD_E_Low>:

void LCD_E_Low()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <LCD_E_Low+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <LCD_E_Low+0x20>)
 80022e0:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 80022e2:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <LCD_E_Low+0x20>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff86 	bl	80021f8 <LCD_sendI2C>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000398 	.word	0x20000398

080022f4 <LCD_sendNibbleData>:

void LCD_sendNibbleData(uint8_t data)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	LCD_E_High();
 80022fe:	f7ff ffd5 	bl	80022ac <LCD_E_High>
	lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	f023 030f 	bic.w	r3, r3, #15
 800230a:	b25a      	sxtb	r2, r3
 800230c:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <LCD_sendNibbleData+0x44>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	b25b      	sxtb	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b25b      	sxtb	r3, r3
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <LCD_sendNibbleData+0x44>)
 8002320:	701a      	strb	r2, [r3, #0]
	LCD_sendI2C(lcdData);
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <LCD_sendNibbleData+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff66 	bl	80021f8 <LCD_sendI2C>
	LCD_E_Low();
 800232c:	f7ff ffd0 	bl	80022d0 <LCD_E_Low>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000398 	.word	0x20000398

0800233c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
	// High 4bit
	LCD_sendNibbleData(data);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ffd3 	bl	80022f4 <LCD_sendNibbleData>

	data = data << 4;
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	71fb      	strb	r3, [r7, #7]
	// Low 4bit
	LCD_sendNibbleData(data);
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffcc 	bl	80022f4 <LCD_sendNibbleData>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 800236e:	f7ff ff8b 	bl	8002288 <LCD_writeMode>
	LCD_cmdMode();
 8002372:	f7ff ff65 	bl	8002240 <LCD_cmdMode>
	LCD_sendData(data);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffdf 	bl	800233c <LCD_sendData>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
	LCD_writeMode();
 8002390:	f7ff ff7a 	bl	8002288 <LCD_writeMode>
	LCD_charMode();
 8002394:	f7ff ff66 	bl	8002264 <LCD_charMode>
	LCD_sendData(data);
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ffce 	bl	800233c <LCD_sendData>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <LCD_writeString>:

void LCD_writeString(char *str)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e009      	b.n	80023ca <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ffe1 	bl	8002386 <LCD_writeCharData>
	for (int i=0; str[i]; i++) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3301      	adds	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ef      	bne.n	80023b6 <LCD_writeString+0xe>
	}
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	71fb      	strb	r3, [r7, #7]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) +col;
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	019b      	lsls	r3, r3, #6
 8002404:	b2da      	uxtb	r2, r3
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	4413      	add	r3, r2
 800240a:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3b80      	subs	r3, #128	@ 0x80
 8002410:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ffa5 	bl	8002364 <LCD_writeCmdData>
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	603a      	str	r2, [r7, #0]
 800242c:	71fb      	strb	r3, [r7, #7]
 800242e:	460b      	mov	r3, r1
 8002430:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8002432:	79ba      	ldrb	r2, [r7, #6]
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffd1 	bl	80023e0 <LCD_gotoXY>
	LCD_writeString(str);
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f7ff ffb2 	bl	80023a8 <LCD_writeString>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <LedBar_Write>:
		{GPIOC, GPIO_PIN_2},
		{GPIOC, GPIO_PIN_3}
};

void LedBar_Write(uint8_t data)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<8; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e027      	b.n	80024ac <LedBar_Write+0x60>
		if ((data & (1<<i)) == 0) {
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	fa42 f303 	asr.w	r3, r2, r3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10e      	bne.n	800248a <LedBar_Write+0x3e>
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, RESET);
 800246c:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <LedBar_Write+0x70>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002474:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <LedBar_Write+0x70>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	b29b      	uxth	r3, r3
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	f000 fbf2 	bl	8002c6c <HAL_GPIO_WritePin>
 8002488:	e00d      	b.n	80024a6 <LedBar_Write+0x5a>
		}
		else {
			HAL_GPIO_WritePin(ledBar[i].GPIOx, ledBar[i].pinNum, SET);
 800248a:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <LedBar_Write+0x70>)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002492:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <LedBar_Write+0x70>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	b29b      	uxth	r3, r3
 800249e:	2201      	movs	r2, #1
 80024a0:	4619      	mov	r1, r3
 80024a2:	f000 fbe3 	bl	8002c6c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	ddd4      	ble.n	800245c <LedBar_Write+0x10>
		}
	}
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000088 	.word	0x20000088

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f94f 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7fe fa00 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f967 	bl	80027f6 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 f92f 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000000 	.word	0x20000000
 800255c:	200000cc 	.word	0x200000cc
 8002560:	200000c8 	.word	0x200000c8

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200000cc 	.word	0x200000cc
 8002588:	200003a0 	.word	0x200003a0

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200003a0 	.word	0x200003a0

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200000cc 	.word	0x200000cc

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	@ (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	@ (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	@ (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff feb6 	bl	800258c <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e052      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0216 	bic.w	r2, r2, #22
 800284e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_DMA_Abort+0x62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e013      	b.n	80028ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7ff fe7b 	bl	800258c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d90c      	bls.n	80028ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e015      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e4      	bne.n	8002892 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	223f      	movs	r2, #63	@ 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00c      	b.n	8002926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e159      	b.n	8002c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8148 	bne.w	8002bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a2 	beq.w	8002bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b57      	ldr	r3, [pc, #348]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aca:	4b54      	ldr	r3, [pc, #336]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a49      	ldr	r2, [pc, #292]	@ (8002c24 <HAL_GPIO_Init+0x2f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x202>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a48      	ldr	r2, [pc, #288]	@ (8002c28 <HAL_GPIO_Init+0x2f4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x1fe>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a47      	ldr	r2, [pc, #284]	@ (8002c2c <HAL_GPIO_Init+0x2f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a46      	ldr	r2, [pc, #280]	@ (8002c30 <HAL_GPIO_Init+0x2fc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x1f6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a45      	ldr	r2, [pc, #276]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x1f2>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	@ (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b23      	ldr	r3, [pc, #140]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1a      	ldr	r2, [pc, #104]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f aea2 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e12b      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fd46 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	@ 0x24
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d04:	f001 f8da 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8002d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a81      	ldr	r2, [pc, #516]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d807      	bhi.n	8002d24 <HAL_I2C_Init+0x84>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a80      	ldr	r2, [pc, #512]	@ (8002f18 <HAL_I2C_Init+0x278>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e006      	b.n	8002d32 <HAL_I2C_Init+0x92>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a7d      	ldr	r2, [pc, #500]	@ (8002f1c <HAL_I2C_Init+0x27c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bf94      	ite	ls
 8002d2c:	2301      	movls	r3, #1
 8002d2e:	2300      	movhi	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0e7      	b.n	8002f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a78      	ldr	r2, [pc, #480]	@ (8002f20 <HAL_I2C_Init+0x280>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a6a      	ldr	r2, [pc, #424]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d802      	bhi.n	8002d74 <HAL_I2C_Init+0xd4>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	e009      	b.n	8002d88 <HAL_I2C_Init+0xe8>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	4a69      	ldr	r2, [pc, #420]	@ (8002f24 <HAL_I2C_Init+0x284>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	3301      	adds	r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	495c      	ldr	r1, [pc, #368]	@ (8002f14 <HAL_I2C_Init+0x274>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d819      	bhi.n	8002ddc <HAL_I2C_Init+0x13c>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e59      	subs	r1, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dbc:	400b      	ands	r3, r1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_I2C_Init+0x138>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	e051      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	e04f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <HAL_I2C_Init+0x168>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	440b      	add	r3, r1
 8002df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e012      	b.n	8002e2e <HAL_I2C_Init+0x18e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Init+0x196>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10e      	bne.n	8002e5c <HAL_I2C_Init+0x1bc>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1e58      	subs	r0, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e5a:	e00f      	b.n	8002e7c <HAL_I2C_Init+0x1dc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002eaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6911      	ldr	r1, [r2, #16]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	000186a0 	.word	0x000186a0
 8002f18:	001e847f 	.word	0x001e847f
 8002f1c:	003d08ff 	.word	0x003d08ff
 8002f20:	431bde83 	.word	0x431bde83
 8002f24:	10624dd3 	.word	0x10624dd3

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fb26 	bl	800258c <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80e0 	bne.w	8003110 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	4970      	ldr	r1, [pc, #448]	@ (800311c <HAL_I2C_Master_Transmit+0x1f4>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f964 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0d3      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x50>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0cc      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d007      	beq.n	8002f9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2221      	movs	r2, #33	@ 0x21
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a50      	ldr	r2, [pc, #320]	@ (8003120 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f89c 	bl	8003124 <I2C_MasterRequestWrite>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08d      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800300c:	e066      	b.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6a39      	ldr	r1, [r7, #32]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa22 	bl	800345c <I2C_WaitOnTXEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	2b04      	cmp	r3, #4
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11b      	bne.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fa19 	bl	80034ec <I2C_WaitOnBTFFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00d      	beq.n	80030dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d107      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e01a      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d194      	bne.n	800300e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000

08003124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d006      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	2b12      	cmp	r3, #18
 8003166:	d107      	bne.n	8003178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f84f 	bl	8003228 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800319e:	d103      	bne.n	80031a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e035      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031b4:	d108      	bne.n	80031c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e01b      	b.n	8003200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	11db      	asrs	r3, r3, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0306 	and.w	r3, r3, #6
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f063 030f 	orn	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	490e      	ldr	r1, [pc, #56]	@ (8003220 <I2C_MasterRequestWrite+0xfc>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f898 	bl	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e010      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4907      	ldr	r1, [pc, #28]	@ (8003224 <I2C_MasterRequestWrite+0x100>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f888 	bl	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010008 	.word	0x00010008
 8003224:	00010002 	.word	0x00010002

08003228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003238:	e048      	b.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d044      	beq.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7ff f9a3 	bl	800258c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d139      	bne.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d10d      	bne.n	800327e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	43da      	mvns	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	e00c      	b.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x70>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	429a      	cmp	r2, r3
 800329c:	d116      	bne.n	80032cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e023      	b.n	8003314 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10d      	bne.n	80032f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	e00c      	b.n	800330c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	43da      	mvns	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d093      	beq.n	800323a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800332a:	e071      	b.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333a:	d123      	bne.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	f043 0204 	orr.w	r2, r3, #4
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e067      	b.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338a:	d041      	beq.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7ff f8fe 	bl	800258c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d136      	bne.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10c      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e00b      	b.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e021      	b.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10c      	bne.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	43da      	mvns	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e00b      	b.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f af6d 	bne.w	800332c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003468:	e034      	b.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f886 	bl	800357c <I2C_IsAcknowledgeFailed>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e034      	b.n	80034e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d028      	beq.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7ff f883 	bl	800258c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d11d      	bne.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a2:	2b80      	cmp	r3, #128	@ 0x80
 80034a4:	d016      	beq.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e007      	b.n	80034e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d1c3      	bne.n	800346a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f8:	e034      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f83e 	bl	800357c <I2C_IsAcknowledgeFailed>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e034      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d028      	beq.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7ff f83b 	bl	800258c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d11d      	bne.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d016      	beq.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e007      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d1c3      	bne.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003592:	d11b      	bne.n	80035cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800359c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e267      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d075      	beq.n	80036e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b04      	cmp	r3, #4
 8003604:	d00c      	beq.n	8003620 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b85      	ldr	r3, [pc, #532]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800360e:	2b08      	cmp	r3, #8
 8003610:	d112      	bne.n	8003638 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b82      	ldr	r3, [pc, #520]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800361e:	d10b      	bne.n	8003638 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	4b7e      	ldr	r3, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05b      	beq.n	80036e4 <HAL_RCC_OscConfig+0x108>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d157      	bne.n	80036e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e242      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003640:	d106      	bne.n	8003650 <HAL_RCC_OscConfig+0x74>
 8003642:	4b76      	ldr	r3, [pc, #472]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e01d      	b.n	800368c <HAL_RCC_OscConfig+0xb0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x98>
 800365a:	4b70      	ldr	r3, [pc, #448]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6f      	ldr	r2, [pc, #444]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b6d      	ldr	r3, [pc, #436]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6c      	ldr	r2, [pc, #432]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0xb0>
 8003674:	4b69      	ldr	r3, [pc, #420]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a68      	ldr	r2, [pc, #416]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b66      	ldr	r3, [pc, #408]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a65      	ldr	r2, [pc, #404]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800368a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe ff7a 	bl	800258c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe ff76 	bl	800258c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	@ 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e207      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b5b      	ldr	r3, [pc, #364]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0xc0>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fe ff66 	bl	800258c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe ff62 	bl	800258c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	@ 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e1f3      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	4b51      	ldr	r3, [pc, #324]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0xe8>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d063      	beq.n	80037ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b47      	ldr	r3, [pc, #284]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003706:	2b08      	cmp	r3, #8
 8003708:	d11c      	bne.n	8003744 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b44      	ldr	r3, [pc, #272]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d116      	bne.n	8003744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003716:	4b41      	ldr	r3, [pc, #260]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_RCC_OscConfig+0x152>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d001      	beq.n	800372e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e1c7      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372e:	4b3b      	ldr	r3, [pc, #236]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4937      	ldr	r1, [pc, #220]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003742:	e03a      	b.n	80037ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374c:	4b34      	ldr	r3, [pc, #208]	@ (8003820 <HAL_RCC_OscConfig+0x244>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fe ff1b 	bl	800258c <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fe ff17 	bl	800258c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1a8      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	4b2b      	ldr	r3, [pc, #172]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b28      	ldr	r3, [pc, #160]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4925      	ldr	r1, [pc, #148]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	e015      	b.n	80037ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378e:	4b24      	ldr	r3, [pc, #144]	@ (8003820 <HAL_RCC_OscConfig+0x244>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fefa 	bl	800258c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	f7fe fef6 	bl	800258c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e187      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d036      	beq.n	8003834 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ce:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCC_OscConfig+0x248>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fe feda 	bl	800258c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037dc:	f7fe fed6 	bl	800258c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e167      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ee:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_RCC_OscConfig+0x240>)
 80037f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x200>
 80037fa:	e01b      	b.n	8003834 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCC_OscConfig+0x248>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fe fec3 	bl	800258c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	e00e      	b.n	8003828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fe febf 	bl	800258c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d907      	bls.n	8003828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e150      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	42470000 	.word	0x42470000
 8003824:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800382a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ea      	bne.n	800380a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8097 	beq.w	8003970 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003846:	4b81      	ldr	r3, [pc, #516]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	4b7d      	ldr	r3, [pc, #500]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	@ 0x40
 8003862:	4b7a      	ldr	r3, [pc, #488]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b77      	ldr	r3, [pc, #476]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b74      	ldr	r3, [pc, #464]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a73      	ldr	r2, [pc, #460]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fe fe7f 	bl	800258c <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fe fe7b 	bl	800258c <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e10c      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003a50 <HAL_RCC_OscConfig+0x474>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x2ea>
 80038b8:	4b64      	ldr	r3, [pc, #400]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a63      	ldr	r2, [pc, #396]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c4:	e01c      	b.n	8003900 <HAL_RCC_OscConfig+0x324>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x30c>
 80038ce:	4b5f      	ldr	r3, [pc, #380]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	4b5c      	ldr	r3, [pc, #368]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	4a5b      	ldr	r2, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e6:	e00b      	b.n	8003900 <HAL_RCC_OscConfig+0x324>
 80038e8:	4b58      	ldr	r3, [pc, #352]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	4a54      	ldr	r2, [pc, #336]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80038fa:	f023 0304 	bic.w	r3, r3, #4
 80038fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe fe40 	bl	800258c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	e00a      	b.n	8003926 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe fe3c 	bl	800258c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0cb      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	4b49      	ldr	r3, [pc, #292]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ee      	beq.n	8003910 <HAL_RCC_OscConfig+0x334>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003934:	f7fe fe2a 	bl	800258c <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fe fe26 	bl	800258c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0b5      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003952:	4b3e      	ldr	r3, [pc, #248]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ee      	bne.n	800393c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	4a38      	ldr	r2, [pc, #224]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800396a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a1 	beq.w	8003abc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800397a:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d05c      	beq.n	8003a40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d141      	bne.n	8003a12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b31      	ldr	r3, [pc, #196]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fdfa 	bl	800258c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fe fdf6 	bl	800258c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e087      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	019b      	lsls	r3, r3, #6
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	3b01      	subs	r3, #1
 80039d4:	041b      	lsls	r3, r3, #16
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	061b      	lsls	r3, r3, #24
 80039de:	491b      	ldr	r1, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fe fdcf 	bl	800258c <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fe fdcb 	bl	800258c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e05c      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x416>
 8003a10:	e054      	b.n	8003abc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_RCC_OscConfig+0x478>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe fdb8 	bl	800258c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe fdb4 	bl	800258c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e045      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_RCC_OscConfig+0x470>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x444>
 8003a3e:	e03d      	b.n	8003abc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e038      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <HAL_RCC_OscConfig+0x4ec>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d028      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d121      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11a      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0cc      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b68      	ldr	r3, [pc, #416]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d90c      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b65      	ldr	r3, [pc, #404]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0b8      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b20:	4b59      	ldr	r3, [pc, #356]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a58      	ldr	r2, [pc, #352]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b38:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a52      	ldr	r2, [pc, #328]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b50      	ldr	r3, [pc, #320]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	494d      	ldr	r1, [pc, #308]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d044      	beq.n	8003bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d119      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e06f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e067      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003baa:	4b37      	ldr	r3, [pc, #220]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4934      	ldr	r1, [pc, #208]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7fe fce6 	bl	800258c <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7fe fce2 	bl	800258c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 020c 	and.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1eb      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d20c      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b22      	ldr	r3, [pc, #136]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e032      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4916      	ldr	r1, [pc, #88]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3e:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	490e      	ldr	r1, [pc, #56]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c52:	f000 f821 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	490a      	ldr	r1, [pc, #40]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	5ccb      	ldrb	r3, [r1, r3]
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fc46 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023c00 	.word	0x40023c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	08006868 	.word	0x08006868
 8003c90:	20000000 	.word	0x20000000
 8003c94:	200000c8 	.word	0x200000c8

08003c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b094      	sub	sp, #80	@ 0x50
 8003c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb0:	4b79      	ldr	r3, [pc, #484]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d00d      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	f200 80e1 	bhi.w	8003e84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x34>
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cca:	e0db      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b73      	ldr	r3, [pc, #460]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd0:	e0db      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cd2:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd6:	e0d8      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cee:	4b6a      	ldr	r3, [pc, #424]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d02:	2300      	movs	r3, #0
 8003d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	462b      	mov	r3, r5
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d1c:	0150      	lsls	r0, r2, #5
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4621      	mov	r1, r4
 8003d24:	1a51      	subs	r1, r2, r1
 8003d26:	6139      	str	r1, [r7, #16]
 8003d28:	4629      	mov	r1, r5
 8003d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	018b      	lsls	r3, r1, #6
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d46:	4651      	mov	r1, sl
 8003d48:	018a      	lsls	r2, r1, #6
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d50:	4659      	mov	r1, fp
 8003d52:	eb63 0901 	sbc.w	r9, r3, r1
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6a:	4690      	mov	r8, r2
 8003d6c:	4699      	mov	r9, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	eb18 0303 	adds.w	r3, r8, r3
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	462b      	mov	r3, r5
 8003d78:	eb49 0303 	adc.w	r3, r9, r3
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	024b      	lsls	r3, r1, #9
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d94:	4621      	mov	r1, r4
 8003d96:	024a      	lsls	r2, r1, #9
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003da4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003da8:	f7fc fa6a 	bl	8000280 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db4:	e058      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b38      	ldr	r3, [pc, #224]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	0159      	lsls	r1, r3, #5
 8003dde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de2:	0150      	lsls	r0, r2, #5
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4641      	mov	r1, r8
 8003dea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dee:	4649      	mov	r1, r9
 8003df0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e08:	ebb2 040a 	subs.w	r4, r2, sl
 8003e0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	00eb      	lsls	r3, r5, #3
 8003e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1e:	00e2      	lsls	r2, r4, #3
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	18e3      	adds	r3, r4, r3
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	eb45 0303 	adc.w	r3, r5, r3
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e3e:	4629      	mov	r1, r5
 8003e40:	028b      	lsls	r3, r1, #10
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e48:	4621      	mov	r1, r4
 8003e4a:	028a      	lsls	r2, r1, #10
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e52:	2200      	movs	r2, #0
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	61fa      	str	r2, [r7, #28]
 8003e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e5c:	f7fc fa10 	bl	8000280 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e68:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e82:	e002      	b.n	8003e8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e84:	4b05      	ldr	r3, [pc, #20]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3750      	adds	r7, #80	@ 0x50
 8003e90:	46bd      	mov	sp, r7
 8003e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	00f42400 	.word	0x00f42400
 8003ea0:	007a1200 	.word	0x007a1200

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	@ (8003eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec0:	f7ff fff0 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0a9b      	lsrs	r3, r3, #10
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4903      	ldr	r1, [pc, #12]	@ (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	08006878 	.word	0x08006878

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee8:	f7ff ffdc 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0b5b      	lsrs	r3, r3, #13
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08006878 	.word	0x08006878

08003f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e041      	b.n	8003fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc ff48 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 fc3c 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e044      	b.n	800404e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800405c <HAL_TIM_Base_Start_IT+0xb0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x6c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x6c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x6c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <HAL_TIM_Base_Start_IT+0xb8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x6c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a17      	ldr	r2, [pc, #92]	@ (8004068 <HAL_TIM_Base_Start_IT+0xbc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x6c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a16      	ldr	r2, [pc, #88]	@ (800406c <HAL_TIM_Base_Start_IT+0xc0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d111      	bne.n	800403c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d010      	beq.n	800404c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	e007      	b.n	800404c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40014000 	.word	0x40014000

08004070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f839 	bl	800410e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fb8a 	bl	80047c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x24>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e022      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	2b04      	cmp	r3, #4
 800414c:	d109      	bne.n	8004162 <HAL_TIM_PWM_Start+0x3e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e015      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d109      	bne.n	800417c <HAL_TIM_PWM_Start+0x58>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e008      	b.n	800418e <HAL_TIM_PWM_Start+0x6a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e068      	b.n	8004268 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0x82>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041a4:	e013      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x92>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0xa2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c4:	e003      	b.n	80041ce <HAL_TIM_PWM_Start+0xaa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fda2 	bl	8004d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a23      	ldr	r2, [pc, #140]	@ (8004270 <HAL_TIM_PWM_Start+0x14c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <HAL_TIM_PWM_Start+0x14c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_TIM_PWM_Start+0x10e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004208:	d013      	beq.n	8004232 <HAL_TIM_PWM_Start+0x10e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a19      	ldr	r2, [pc, #100]	@ (8004274 <HAL_TIM_PWM_Start+0x150>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIM_PWM_Start+0x10e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <HAL_TIM_PWM_Start+0x154>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_TIM_PWM_Start+0x10e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <HAL_TIM_PWM_Start+0x158>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIM_PWM_Start+0x10e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <HAL_TIM_PWM_Start+0x15c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d111      	bne.n	8004256 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b06      	cmp	r3, #6
 8004242:	d010      	beq.n	8004266 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	e007      	b.n	8004266 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40010000 	.word	0x40010000
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800
 800427c:	40000c00 	.word	0x40000c00
 8004280:	40014000 	.word	0x40014000

08004284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d020      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01b      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0202 	mvn.w	r2, #2
 80042b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa5b 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa4d 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa5e 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d020      	beq.n	8004334 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01b      	beq.n	8004334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0204 	mvn.w	r2, #4
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa35 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa27 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa38 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d020      	beq.n	8004380 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0208 	mvn.w	r2, #8
 8004350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0f 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa01 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fa12 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2208      	movs	r2, #8
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9e9 	bl	800478a <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9db 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f9ec 	bl	800479e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00c      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0201 	mvn.w	r2, #1
 80043e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fa6a 	bl	80018c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fd76 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9bd 	bl	80047b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fd48 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800447e:	2302      	movs	r3, #2
 8004480:	e0ae      	b.n	80045e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	f200 809f 	bhi.w	80045d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004492:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080045d1 	.word	0x080045d1
 80044a0:	080045d1 	.word	0x080045d1
 80044a4:	080045d1 	.word	0x080045d1
 80044a8:	0800450d 	.word	0x0800450d
 80044ac:	080045d1 	.word	0x080045d1
 80044b0:	080045d1 	.word	0x080045d1
 80044b4:	080045d1 	.word	0x080045d1
 80044b8:	0800454f 	.word	0x0800454f
 80044bc:	080045d1 	.word	0x080045d1
 80044c0:	080045d1 	.word	0x080045d1
 80044c4:	080045d1 	.word	0x080045d1
 80044c8:	0800458f 	.word	0x0800458f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9fe 	bl	80048d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0204 	bic.w	r2, r2, #4
 80044f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6999      	ldr	r1, [r3, #24]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	619a      	str	r2, [r3, #24]
      break;
 800450a:	e064      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fa44 	bl	80049a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]
      break;
 800454c:	e043      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fa8f 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0208 	orr.w	r2, r2, #8
 8004568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0204 	bic.w	r2, r2, #4
 8004578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69d9      	ldr	r1, [r3, #28]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
      break;
 800458c:	e023      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fad9 	bl	8004b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69d9      	ldr	r1, [r3, #28]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	021a      	lsls	r2, r3, #8
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	61da      	str	r2, [r3, #28]
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIM_ConfigClockSource+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e0b4      	b.n	800476e <HAL_TIM_ConfigClockSource+0x186>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800462a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463c:	d03e      	beq.n	80046bc <HAL_TIM_ConfigClockSource+0xd4>
 800463e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004642:	f200 8087 	bhi.w	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464a:	f000 8086 	beq.w	800475a <HAL_TIM_ConfigClockSource+0x172>
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004652:	d87f      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b70      	cmp	r3, #112	@ 0x70
 8004656:	d01a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0xa6>
 8004658:	2b70      	cmp	r3, #112	@ 0x70
 800465a:	d87b      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b60      	cmp	r3, #96	@ 0x60
 800465e:	d050      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x11a>
 8004660:	2b60      	cmp	r3, #96	@ 0x60
 8004662:	d877      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b50      	cmp	r3, #80	@ 0x50
 8004666:	d03c      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004668:	2b50      	cmp	r3, #80	@ 0x50
 800466a:	d873      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d058      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x13a>
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d86f      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b30      	cmp	r3, #48	@ 0x30
 8004676:	d064      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004678:	2b30      	cmp	r3, #48	@ 0x30
 800467a:	d86b      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d060      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d867      	bhi.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d05c      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b10      	cmp	r3, #16
 800468a:	d05a      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	e062      	b.n	8004754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	f000 fb1f 	bl	8004ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	609a      	str	r2, [r3, #8]
      break;
 80046ba:	e04f      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	f000 fb08 	bl	8004ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046de:	609a      	str	r2, [r3, #8]
      break;
 80046e0:	e03c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ee:	461a      	mov	r2, r3
 80046f0:	f000 fa7c 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2150      	movs	r1, #80	@ 0x50
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fad5 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004700:	e02c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fa9b 	bl	8004c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2160      	movs	r1, #96	@ 0x60
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fac5 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004720:	e01c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fa5c 	bl	8004bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2140      	movs	r1, #64	@ 0x40
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fab5 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004740:	e00c      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f000 faac 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004752:	e003      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      break;
 8004758:	e000      	b.n	800475c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800475a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a37      	ldr	r2, [pc, #220]	@ (80048b8 <TIM_Base_SetConfig+0xf0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00f      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e6:	d00b      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a34      	ldr	r2, [pc, #208]	@ (80048bc <TIM_Base_SetConfig+0xf4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d007      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a33      	ldr	r2, [pc, #204]	@ (80048c0 <TIM_Base_SetConfig+0xf8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <TIM_Base_SetConfig+0xfc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a28      	ldr	r2, [pc, #160]	@ (80048b8 <TIM_Base_SetConfig+0xf0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01b      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004820:	d017      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <TIM_Base_SetConfig+0xf4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <TIM_Base_SetConfig+0xf8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00f      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a23      	ldr	r2, [pc, #140]	@ (80048c4 <TIM_Base_SetConfig+0xfc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <TIM_Base_SetConfig+0x100>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <TIM_Base_SetConfig+0x104>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a20      	ldr	r2, [pc, #128]	@ (80048d0 <TIM_Base_SetConfig+0x108>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <TIM_Base_SetConfig+0xf0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d103      	bne.n	8004892 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f023 0201 	bic.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0302 	bic.w	r3, r3, #2
 800491c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <TIM_OC1_SetConfig+0xc8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0308 	bic.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a13      	ldr	r2, [pc, #76]	@ (800499c <TIM_OC1_SetConfig+0xc8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d111      	bne.n	8004976 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	621a      	str	r2, [r3, #32]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40010000 	.word	0x40010000

080049a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f023 0210 	bic.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004a74 <TIM_OC2_SetConfig+0xd4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <TIM_OC2_SetConfig+0xd4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d113      	bne.n	8004a4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10d      	bne.n	8004af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a14      	ldr	r2, [pc, #80]	@ (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d113      	bne.n	8004b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	40010000 	.word	0x40010000

08004b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a10      	ldr	r2, [pc, #64]	@ (8004be8 <TIM_OC4_SetConfig+0x9c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000

08004bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b087      	sub	sp, #28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f023 0210 	bic.w	r2, r3, #16
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f043 0307 	orr.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2201      	movs	r2, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	401a      	ands	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e050      	b.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd0:	d013      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	@ (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a16      	ldr	r2, [pc, #88]	@ (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d10c      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40010000 	.word	0x40010000
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40014000 	.word	0x40014000

08004e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e03d      	b.n	8004ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e042      	b.n	8004fac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc f838 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	@ 0x24
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fcef 	bl	800593c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d112      	bne.n	8004ff4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_UART_Receive_IT+0x26>
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00b      	b.n	8004ff6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fad2 	bl	8005594 <UART_Start_Receive_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	e000      	b.n	8004ff6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0ba      	sub	sp, #232	@ 0xe8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800503e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10f      	bne.n	8005066 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
 8005052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fbae 	bl	80057c0 <UART_Receive_IT>
      return;
 8005064:	e273      	b.n	800554e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 80de 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
 8005070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005080:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80d1 	beq.w	800522c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
 8005102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d105      	bne.n	800511a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 820a 	beq.w	8005544 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb39 	bl	80057c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b40      	cmp	r3, #64	@ 0x40
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_UART_IRQHandler+0x17a>
 8005172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d04f      	beq.n	800521a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa44 	bl	8005608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518a:	2b40      	cmp	r3, #64	@ 0x40
 800518c:	d141      	bne.n	8005212 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d9      	bne.n	800518e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d013      	beq.n	800520a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	4a8a      	ldr	r2, [pc, #552]	@ (8005410 <HAL_UART_IRQHandler+0x410>)
 80051e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fb7d 	bl	80028ee <HAL_DMA_Abort_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d016      	beq.n	8005228 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005208:	e00e      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9ac 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005210:	e00a      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9a8 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005218:	e006      	b.n	8005228 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9a4 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005226:	e18d      	b.n	8005544 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	bf00      	nop
    return;
 800522a:	e18b      	b.n	8005544 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	2b01      	cmp	r3, #1
 8005232:	f040 8167 	bne.w	8005504 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8160 	beq.w	8005504 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8159 	beq.w	8005504 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b40      	cmp	r3, #64	@ 0x40
 8005274:	f040 80ce 	bne.w	8005414 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a9 	beq.w	80053e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005296:	429a      	cmp	r2, r3
 8005298:	f080 80a2 	bcs.w	80053e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ae:	f000 8088 	beq.w	80053c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d9      	bne.n	80052b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800530e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005322:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005326:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800532a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e1      	bne.n	80052fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800534a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005350:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800535e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005360:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800536c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e3      	bne.n	800533a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005392:	f023 0310 	bic.w	r3, r3, #16
 8005396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e3      	bne.n	8005380 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd fa26 	bl	800280e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2202      	movs	r2, #2
 80053c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8cf 	bl	800557c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80053de:	e0b3      	b.n	8005548 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f040 80ad 	bne.w	8005548 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f8:	f040 80a6 	bne.w	8005548 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8b7 	bl	800557c <HAL_UARTEx_RxEventCallback>
      return;
 800540e:	e09b      	b.n	8005548 <HAL_UART_IRQHandler+0x548>
 8005410:	080056cf 	.word	0x080056cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808e 	beq.w	800554c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8089 	beq.w	800554c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800545e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005496:	633a      	str	r2, [r7, #48]	@ 0x30
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f83d 	bl	800557c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005502:	e023      	b.n	800554c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_UART_IRQHandler+0x524>
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8e7 	bl	80056f0 <UART_Transmit_IT>
    return;
 8005522:	e014      	b.n	800554e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <HAL_UART_IRQHandler+0x54e>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f927 	bl	8005790 <UART_EndTransmit_IT>
    return;
 8005542:	e004      	b.n	800554e <HAL_UART_IRQHandler+0x54e>
    return;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_UART_IRQHandler+0x54e>
      return;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_UART_IRQHandler+0x54e>
      return;
 800554c:	bf00      	nop
  }
}
 800554e:	37e8      	adds	r7, #232	@ 0xe8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2222      	movs	r2, #34	@ 0x22
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0220 	orr.w	r2, r2, #32
 80055f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b095      	sub	sp, #84	@ 0x54
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005630:	643a      	str	r2, [r7, #64]	@ 0x40
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005636:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	61fb      	str	r3, [r7, #28]
   return(result);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800566a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	d119      	bne.n	80056b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 0310 	bic.w	r3, r3, #16
 8005696:	647b      	str	r3, [r7, #68]	@ 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a0:	61ba      	str	r2, [r7, #24]
 80056a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	613b      	str	r3, [r7, #16]
   return(result);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056c2:	bf00      	nop
 80056c4:	3754      	adds	r7, #84	@ 0x54
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff ff40 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e8:	bf00      	nop
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b21      	cmp	r3, #33	@ 0x21
 8005702:	d13e      	bne.n	8005782 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570c:	d114      	bne.n	8005738 <UART_Transmit_IT+0x48>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d110      	bne.n	8005738 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800572a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	1c9a      	adds	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]
 8005736:	e008      	b.n	800574a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	1c59      	adds	r1, r3, #1
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6211      	str	r1, [r2, #32]
 8005742:	781a      	ldrb	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4619      	mov	r1, r3
 8005758:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10f      	bne.n	800577e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800576c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800577c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fecf 	bl	8005554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	@ 0x30
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b22      	cmp	r3, #34	@ 0x22
 80057da:	f040 80aa 	bne.w	8005932 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e6:	d115      	bne.n	8005814 <UART_Receive_IT+0x54>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d111      	bne.n	8005814 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005802:	b29a      	uxth	r2, r3
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	629a      	str	r2, [r3, #40]	@ 0x28
 8005812:	e024      	b.n	800585e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005822:	d007      	beq.n	8005834 <UART_Receive_IT+0x74>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <UART_Receive_IT+0x82>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e008      	b.n	8005854 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584e:	b2da      	uxtb	r2, r3
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4619      	mov	r1, r3
 800586c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800586e:	2b00      	cmp	r3, #0
 8005870:	d15d      	bne.n	800592e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0220 	bic.w	r2, r2, #32
 8005880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005890:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d135      	bne.n	8005924 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058de:	623a      	str	r2, [r7, #32]
 80058e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	69f9      	ldr	r1, [r7, #28]
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d10a      	bne.n	8005916 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff fe2d 	bl	800557c <HAL_UARTEx_RxEventCallback>
 8005922:	e002      	b.n	800592a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fb ffe1 	bl	80018ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e002      	b.n	8005934 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3730      	adds	r7, #48	@ 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b0c0      	sub	sp, #256	@ 0x100
 8005942:	af00      	add	r7, sp, #0
 8005944:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	68d9      	ldr	r1, [r3, #12]
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	ea40 0301 	orr.w	r3, r0, r1
 8005964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	431a      	orrs	r2, r3
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005994:	f021 010c 	bic.w	r1, r1, #12
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059a2:	430b      	orrs	r3, r1
 80059a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	6999      	ldr	r1, [r3, #24]
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	ea40 0301 	orr.w	r3, r0, r1
 80059c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005c08 <UART_SetConfig+0x2cc>)
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d005      	beq.n	80059dc <UART_SetConfig+0xa0>
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005c0c <UART_SetConfig+0x2d0>)
 80059d8:	429a      	cmp	r2, r3
 80059da:	d104      	bne.n	80059e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fa82 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 80059e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059e4:	e003      	b.n	80059ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059e6:	f7fe fa69 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 80059ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f8:	f040 810c 	bne.w	8005c14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a0e:	4622      	mov	r2, r4
 8005a10:	462b      	mov	r3, r5
 8005a12:	1891      	adds	r1, r2, r2
 8005a14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a16:	415b      	adcs	r3, r3
 8005a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a1e:	4621      	mov	r1, r4
 8005a20:	eb12 0801 	adds.w	r8, r2, r1
 8005a24:	4629      	mov	r1, r5
 8005a26:	eb43 0901 	adc.w	r9, r3, r1
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a3e:	4690      	mov	r8, r2
 8005a40:	4699      	mov	r9, r3
 8005a42:	4623      	mov	r3, r4
 8005a44:	eb18 0303 	adds.w	r3, r8, r3
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a4c:	462b      	mov	r3, r5
 8005a4e:	eb49 0303 	adc.w	r3, r9, r3
 8005a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	18db      	adds	r3, r3, r3
 8005a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a70:	4613      	mov	r3, r2
 8005a72:	eb42 0303 	adc.w	r3, r2, r3
 8005a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a80:	f7fa fbfe 	bl	8000280 <__aeabi_uldivmod>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4b61      	ldr	r3, [pc, #388]	@ (8005c10 <UART_SetConfig+0x2d4>)
 8005a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	011c      	lsls	r4, r3, #4
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005aa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	1891      	adds	r1, r2, r2
 8005aaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005aac:	415b      	adcs	r3, r3
 8005aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	eb12 0a01 	adds.w	sl, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005acc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ad4:	4692      	mov	sl, r2
 8005ad6:	469b      	mov	fp, r3
 8005ad8:	4643      	mov	r3, r8
 8005ada:	eb1a 0303 	adds.w	r3, sl, r3
 8005ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005af8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005afc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b00:	460b      	mov	r3, r1
 8005b02:	18db      	adds	r3, r3, r3
 8005b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b06:	4613      	mov	r3, r2
 8005b08:	eb42 0303 	adc.w	r3, r2, r3
 8005b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b16:	f7fa fbb3 	bl	8000280 <__aeabi_uldivmod>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4b3b      	ldr	r3, [pc, #236]	@ (8005c10 <UART_SetConfig+0x2d4>)
 8005b22:	fba3 2301 	umull	r2, r3, r3, r1
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	2264      	movs	r2, #100	@ 0x64
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	1acb      	subs	r3, r1, r3
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b36:	4b36      	ldr	r3, [pc, #216]	@ (8005c10 <UART_SetConfig+0x2d4>)
 8005b38:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b44:	441c      	add	r4, r3
 8005b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	1891      	adds	r1, r2, r2
 8005b5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b60:	415b      	adcs	r3, r3
 8005b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b68:	4641      	mov	r1, r8
 8005b6a:	1851      	adds	r1, r2, r1
 8005b6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b6e:	4649      	mov	r1, r9
 8005b70:	414b      	adcs	r3, r1
 8005b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b80:	4659      	mov	r1, fp
 8005b82:	00cb      	lsls	r3, r1, #3
 8005b84:	4651      	mov	r1, sl
 8005b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b8a:	4651      	mov	r1, sl
 8005b8c:	00ca      	lsls	r2, r1, #3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	4642      	mov	r2, r8
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	18db      	adds	r3, r3, r3
 8005bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	eb42 0303 	adc.w	r3, r2, r3
 8005bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bd2:	f7fa fb55 	bl	8000280 <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <UART_SetConfig+0x2d4>)
 8005bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	2164      	movs	r1, #100	@ 0x64
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	3332      	adds	r3, #50	@ 0x32
 8005bee:	4a08      	ldr	r2, [pc, #32]	@ (8005c10 <UART_SetConfig+0x2d4>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	095b      	lsrs	r3, r3, #5
 8005bf6:	f003 0207 	and.w	r2, r3, #7
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4422      	add	r2, r4
 8005c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c04:	e106      	b.n	8005e14 <UART_SetConfig+0x4d8>
 8005c06:	bf00      	nop
 8005c08:	40011000 	.word	0x40011000
 8005c0c:	40011400 	.word	0x40011400
 8005c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c26:	4642      	mov	r2, r8
 8005c28:	464b      	mov	r3, r9
 8005c2a:	1891      	adds	r1, r2, r2
 8005c2c:	6239      	str	r1, [r7, #32]
 8005c2e:	415b      	adcs	r3, r3
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c36:	4641      	mov	r1, r8
 8005c38:	1854      	adds	r4, r2, r1
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	eb43 0501 	adc.w	r5, r3, r1
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	00eb      	lsls	r3, r5, #3
 8005c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c4e:	00e2      	lsls	r2, r4, #3
 8005c50:	4614      	mov	r4, r2
 8005c52:	461d      	mov	r5, r3
 8005c54:	4643      	mov	r3, r8
 8005c56:	18e3      	adds	r3, r4, r3
 8005c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	eb45 0303 	adc.w	r3, r5, r3
 8005c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c82:	4629      	mov	r1, r5
 8005c84:	008b      	lsls	r3, r1, #2
 8005c86:	4621      	mov	r1, r4
 8005c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	008a      	lsls	r2, r1, #2
 8005c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c94:	f7fa faf4 	bl	8000280 <__aeabi_uldivmod>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4b60      	ldr	r3, [pc, #384]	@ (8005e20 <UART_SetConfig+0x4e4>)
 8005c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	011c      	lsls	r4, r3, #4
 8005ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	61b9      	str	r1, [r7, #24]
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cc8:	4641      	mov	r1, r8
 8005cca:	1851      	adds	r1, r2, r1
 8005ccc:	6139      	str	r1, [r7, #16]
 8005cce:	4649      	mov	r1, r9
 8005cd0:	414b      	adcs	r3, r1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	00cb      	lsls	r3, r1, #3
 8005ce4:	4651      	mov	r1, sl
 8005ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cea:	4651      	mov	r1, sl
 8005cec:	00ca      	lsls	r2, r1, #3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	460a      	mov	r2, r1
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	f04f 0300 	mov.w	r3, #0
 8005d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d20:	4649      	mov	r1, r9
 8005d22:	008b      	lsls	r3, r1, #2
 8005d24:	4641      	mov	r1, r8
 8005d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	008a      	lsls	r2, r1, #2
 8005d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d32:	f7fa faa5 	bl	8000280 <__aeabi_uldivmod>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4b38      	ldr	r3, [pc, #224]	@ (8005e20 <UART_SetConfig+0x4e4>)
 8005d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	2264      	movs	r2, #100	@ 0x64
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	1acb      	subs	r3, r1, r3
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	3332      	adds	r3, #50	@ 0x32
 8005d50:	4a33      	ldr	r2, [pc, #204]	@ (8005e20 <UART_SetConfig+0x4e4>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d5c:	441c      	add	r4, r3
 8005d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d62:	2200      	movs	r2, #0
 8005d64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	1891      	adds	r1, r2, r2
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	415b      	adcs	r3, r3
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	1851      	adds	r1, r2, r1
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	4649      	mov	r1, r9
 8005d84:	414b      	adcs	r3, r1
 8005d86:	607b      	str	r3, [r7, #4]
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d94:	4659      	mov	r1, fp
 8005d96:	00cb      	lsls	r3, r1, #3
 8005d98:	4651      	mov	r1, sl
 8005d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d9e:	4651      	mov	r1, sl
 8005da0:	00ca      	lsls	r2, r1, #3
 8005da2:	4610      	mov	r0, r2
 8005da4:	4619      	mov	r1, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	4642      	mov	r2, r8
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dae:	464b      	mov	r3, r9
 8005db0:	460a      	mov	r2, r1
 8005db2:	eb42 0303 	adc.w	r3, r2, r3
 8005db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	008b      	lsls	r3, r1, #2
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dda:	4641      	mov	r1, r8
 8005ddc:	008a      	lsls	r2, r1, #2
 8005dde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005de2:	f7fa fa4d 	bl	8000280 <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <UART_SetConfig+0x4e4>)
 8005dec:	fba3 1302 	umull	r1, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	2164      	movs	r1, #100	@ 0x64
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	3332      	adds	r3, #50	@ 0x32
 8005dfe:	4a08      	ldr	r2, [pc, #32]	@ (8005e20 <UART_SetConfig+0x4e4>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 020f 	and.w	r2, r3, #15
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4422      	add	r2, r4
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e20:	51eb851f 	.word	0x51eb851f

08005e24 <siprintf>:
 8005e24:	b40e      	push	{r1, r2, r3}
 8005e26:	b510      	push	{r4, lr}
 8005e28:	b09d      	sub	sp, #116	@ 0x74
 8005e2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005e2c:	9002      	str	r0, [sp, #8]
 8005e2e:	9006      	str	r0, [sp, #24]
 8005e30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e34:	480a      	ldr	r0, [pc, #40]	@ (8005e60 <siprintf+0x3c>)
 8005e36:	9107      	str	r1, [sp, #28]
 8005e38:	9104      	str	r1, [sp, #16]
 8005e3a:	490a      	ldr	r1, [pc, #40]	@ (8005e64 <siprintf+0x40>)
 8005e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e40:	9105      	str	r1, [sp, #20]
 8005e42:	2400      	movs	r4, #0
 8005e44:	a902      	add	r1, sp, #8
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005e4c:	f000 f9a2 	bl	8006194 <_svfiprintf_r>
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	701c      	strb	r4, [r3, #0]
 8005e54:	b01d      	add	sp, #116	@ 0x74
 8005e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e5a:	b003      	add	sp, #12
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	200000d0 	.word	0x200000d0
 8005e64:	ffff0208 	.word	0xffff0208

08005e68 <memset>:
 8005e68:	4402      	add	r2, r0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d100      	bne.n	8005e72 <memset+0xa>
 8005e70:	4770      	bx	lr
 8005e72:	f803 1b01 	strb.w	r1, [r3], #1
 8005e76:	e7f9      	b.n	8005e6c <memset+0x4>

08005e78 <__errno>:
 8005e78:	4b01      	ldr	r3, [pc, #4]	@ (8005e80 <__errno+0x8>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	200000d0 	.word	0x200000d0

08005e84 <__libc_init_array>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4d0d      	ldr	r5, [pc, #52]	@ (8005ebc <__libc_init_array+0x38>)
 8005e88:	4c0d      	ldr	r4, [pc, #52]	@ (8005ec0 <__libc_init_array+0x3c>)
 8005e8a:	1b64      	subs	r4, r4, r5
 8005e8c:	10a4      	asrs	r4, r4, #2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	42a6      	cmp	r6, r4
 8005e92:	d109      	bne.n	8005ea8 <__libc_init_array+0x24>
 8005e94:	4d0b      	ldr	r5, [pc, #44]	@ (8005ec4 <__libc_init_array+0x40>)
 8005e96:	4c0c      	ldr	r4, [pc, #48]	@ (8005ec8 <__libc_init_array+0x44>)
 8005e98:	f000 fc64 	bl	8006764 <_init>
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	42a6      	cmp	r6, r4
 8005ea4:	d105      	bne.n	8005eb2 <__libc_init_array+0x2e>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eac:	4798      	blx	r3
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7ee      	b.n	8005e90 <__libc_init_array+0xc>
 8005eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb6:	4798      	blx	r3
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7f2      	b.n	8005ea2 <__libc_init_array+0x1e>
 8005ebc:	080068bc 	.word	0x080068bc
 8005ec0:	080068bc 	.word	0x080068bc
 8005ec4:	080068bc 	.word	0x080068bc
 8005ec8:	080068c0 	.word	0x080068c0

08005ecc <__retarget_lock_acquire_recursive>:
 8005ecc:	4770      	bx	lr

08005ece <__retarget_lock_release_recursive>:
 8005ece:	4770      	bx	lr

08005ed0 <memcpy>:
 8005ed0:	440a      	add	r2, r1
 8005ed2:	4291      	cmp	r1, r2
 8005ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ed8:	d100      	bne.n	8005edc <memcpy+0xc>
 8005eda:	4770      	bx	lr
 8005edc:	b510      	push	{r4, lr}
 8005ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	d1f9      	bne.n	8005ede <memcpy+0xe>
 8005eea:	bd10      	pop	{r4, pc}

08005eec <_free_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4605      	mov	r5, r0
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	d041      	beq.n	8005f78 <_free_r+0x8c>
 8005ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef8:	1f0c      	subs	r4, r1, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bfb8      	it	lt
 8005efe:	18e4      	addlt	r4, r4, r3
 8005f00:	f000 f8e0 	bl	80060c4 <__malloc_lock>
 8005f04:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <_free_r+0x90>)
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	b933      	cbnz	r3, 8005f18 <_free_r+0x2c>
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	6014      	str	r4, [r2, #0]
 8005f0e:	4628      	mov	r0, r5
 8005f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f14:	f000 b8dc 	b.w	80060d0 <__malloc_unlock>
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	d908      	bls.n	8005f2e <_free_r+0x42>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	1821      	adds	r1, r4, r0
 8005f20:	428b      	cmp	r3, r1
 8005f22:	bf01      	itttt	eq
 8005f24:	6819      	ldreq	r1, [r3, #0]
 8005f26:	685b      	ldreq	r3, [r3, #4]
 8005f28:	1809      	addeq	r1, r1, r0
 8005f2a:	6021      	streq	r1, [r4, #0]
 8005f2c:	e7ed      	b.n	8005f0a <_free_r+0x1e>
 8005f2e:	461a      	mov	r2, r3
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	b10b      	cbz	r3, 8005f38 <_free_r+0x4c>
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	d9fa      	bls.n	8005f2e <_free_r+0x42>
 8005f38:	6811      	ldr	r1, [r2, #0]
 8005f3a:	1850      	adds	r0, r2, r1
 8005f3c:	42a0      	cmp	r0, r4
 8005f3e:	d10b      	bne.n	8005f58 <_free_r+0x6c>
 8005f40:	6820      	ldr	r0, [r4, #0]
 8005f42:	4401      	add	r1, r0
 8005f44:	1850      	adds	r0, r2, r1
 8005f46:	4283      	cmp	r3, r0
 8005f48:	6011      	str	r1, [r2, #0]
 8005f4a:	d1e0      	bne.n	8005f0e <_free_r+0x22>
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	6053      	str	r3, [r2, #4]
 8005f52:	4408      	add	r0, r1
 8005f54:	6010      	str	r0, [r2, #0]
 8005f56:	e7da      	b.n	8005f0e <_free_r+0x22>
 8005f58:	d902      	bls.n	8005f60 <_free_r+0x74>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	e7d6      	b.n	8005f0e <_free_r+0x22>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	1821      	adds	r1, r4, r0
 8005f64:	428b      	cmp	r3, r1
 8005f66:	bf04      	itt	eq
 8005f68:	6819      	ldreq	r1, [r3, #0]
 8005f6a:	685b      	ldreq	r3, [r3, #4]
 8005f6c:	6063      	str	r3, [r4, #4]
 8005f6e:	bf04      	itt	eq
 8005f70:	1809      	addeq	r1, r1, r0
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	6054      	str	r4, [r2, #4]
 8005f76:	e7ca      	b.n	8005f0e <_free_r+0x22>
 8005f78:	bd38      	pop	{r3, r4, r5, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200004e8 	.word	0x200004e8

08005f80 <sbrk_aligned>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4e0f      	ldr	r6, [pc, #60]	@ (8005fc0 <sbrk_aligned+0x40>)
 8005f84:	460c      	mov	r4, r1
 8005f86:	6831      	ldr	r1, [r6, #0]
 8005f88:	4605      	mov	r5, r0
 8005f8a:	b911      	cbnz	r1, 8005f92 <sbrk_aligned+0x12>
 8005f8c:	f000 fba4 	bl	80066d8 <_sbrk_r>
 8005f90:	6030      	str	r0, [r6, #0]
 8005f92:	4621      	mov	r1, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 fb9f 	bl	80066d8 <_sbrk_r>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d103      	bne.n	8005fa6 <sbrk_aligned+0x26>
 8005f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d0f8      	beq.n	8005fa2 <sbrk_aligned+0x22>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 fb90 	bl	80066d8 <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d1f2      	bne.n	8005fa2 <sbrk_aligned+0x22>
 8005fbc:	e7ef      	b.n	8005f9e <sbrk_aligned+0x1e>
 8005fbe:	bf00      	nop
 8005fc0:	200004e4 	.word	0x200004e4

08005fc4 <_malloc_r>:
 8005fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc8:	1ccd      	adds	r5, r1, #3
 8005fca:	f025 0503 	bic.w	r5, r5, #3
 8005fce:	3508      	adds	r5, #8
 8005fd0:	2d0c      	cmp	r5, #12
 8005fd2:	bf38      	it	cc
 8005fd4:	250c      	movcc	r5, #12
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	4606      	mov	r6, r0
 8005fda:	db01      	blt.n	8005fe0 <_malloc_r+0x1c>
 8005fdc:	42a9      	cmp	r1, r5
 8005fde:	d904      	bls.n	8005fea <_malloc_r+0x26>
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060c0 <_malloc_r+0xfc>
 8005fee:	f000 f869 	bl	80060c4 <__malloc_lock>
 8005ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	bb44      	cbnz	r4, 800604c <_malloc_r+0x88>
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ffbf 	bl	8005f80 <sbrk_aligned>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	4604      	mov	r4, r0
 8006006:	d158      	bne.n	80060ba <_malloc_r+0xf6>
 8006008:	f8d8 4000 	ldr.w	r4, [r8]
 800600c:	4627      	mov	r7, r4
 800600e:	2f00      	cmp	r7, #0
 8006010:	d143      	bne.n	800609a <_malloc_r+0xd6>
 8006012:	2c00      	cmp	r4, #0
 8006014:	d04b      	beq.n	80060ae <_malloc_r+0xea>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	4639      	mov	r1, r7
 800601a:	4630      	mov	r0, r6
 800601c:	eb04 0903 	add.w	r9, r4, r3
 8006020:	f000 fb5a 	bl	80066d8 <_sbrk_r>
 8006024:	4581      	cmp	r9, r0
 8006026:	d142      	bne.n	80060ae <_malloc_r+0xea>
 8006028:	6821      	ldr	r1, [r4, #0]
 800602a:	1a6d      	subs	r5, r5, r1
 800602c:	4629      	mov	r1, r5
 800602e:	4630      	mov	r0, r6
 8006030:	f7ff ffa6 	bl	8005f80 <sbrk_aligned>
 8006034:	3001      	adds	r0, #1
 8006036:	d03a      	beq.n	80060ae <_malloc_r+0xea>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	442b      	add	r3, r5
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	f8d8 3000 	ldr.w	r3, [r8]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	bb62      	cbnz	r2, 80060a0 <_malloc_r+0xdc>
 8006046:	f8c8 7000 	str.w	r7, [r8]
 800604a:	e00f      	b.n	800606c <_malloc_r+0xa8>
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	1b52      	subs	r2, r2, r5
 8006050:	d420      	bmi.n	8006094 <_malloc_r+0xd0>
 8006052:	2a0b      	cmp	r2, #11
 8006054:	d917      	bls.n	8006086 <_malloc_r+0xc2>
 8006056:	1961      	adds	r1, r4, r5
 8006058:	42a3      	cmp	r3, r4
 800605a:	6025      	str	r5, [r4, #0]
 800605c:	bf18      	it	ne
 800605e:	6059      	strne	r1, [r3, #4]
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	bf08      	it	eq
 8006064:	f8c8 1000 	streq.w	r1, [r8]
 8006068:	5162      	str	r2, [r4, r5]
 800606a:	604b      	str	r3, [r1, #4]
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f82f 	bl	80060d0 <__malloc_unlock>
 8006072:	f104 000b 	add.w	r0, r4, #11
 8006076:	1d23      	adds	r3, r4, #4
 8006078:	f020 0007 	bic.w	r0, r0, #7
 800607c:	1ac2      	subs	r2, r0, r3
 800607e:	bf1c      	itt	ne
 8006080:	1a1b      	subne	r3, r3, r0
 8006082:	50a3      	strne	r3, [r4, r2]
 8006084:	e7af      	b.n	8005fe6 <_malloc_r+0x22>
 8006086:	6862      	ldr	r2, [r4, #4]
 8006088:	42a3      	cmp	r3, r4
 800608a:	bf0c      	ite	eq
 800608c:	f8c8 2000 	streq.w	r2, [r8]
 8006090:	605a      	strne	r2, [r3, #4]
 8006092:	e7eb      	b.n	800606c <_malloc_r+0xa8>
 8006094:	4623      	mov	r3, r4
 8006096:	6864      	ldr	r4, [r4, #4]
 8006098:	e7ae      	b.n	8005ff8 <_malloc_r+0x34>
 800609a:	463c      	mov	r4, r7
 800609c:	687f      	ldr	r7, [r7, #4]
 800609e:	e7b6      	b.n	800600e <_malloc_r+0x4a>
 80060a0:	461a      	mov	r2, r3
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d1fb      	bne.n	80060a0 <_malloc_r+0xdc>
 80060a8:	2300      	movs	r3, #0
 80060aa:	6053      	str	r3, [r2, #4]
 80060ac:	e7de      	b.n	800606c <_malloc_r+0xa8>
 80060ae:	230c      	movs	r3, #12
 80060b0:	6033      	str	r3, [r6, #0]
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f80c 	bl	80060d0 <__malloc_unlock>
 80060b8:	e794      	b.n	8005fe4 <_malloc_r+0x20>
 80060ba:	6005      	str	r5, [r0, #0]
 80060bc:	e7d6      	b.n	800606c <_malloc_r+0xa8>
 80060be:	bf00      	nop
 80060c0:	200004e8 	.word	0x200004e8

080060c4 <__malloc_lock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	@ (80060cc <__malloc_lock+0x8>)
 80060c6:	f7ff bf01 	b.w	8005ecc <__retarget_lock_acquire_recursive>
 80060ca:	bf00      	nop
 80060cc:	200004e0 	.word	0x200004e0

080060d0 <__malloc_unlock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	@ (80060d8 <__malloc_unlock+0x8>)
 80060d2:	f7ff befc 	b.w	8005ece <__retarget_lock_release_recursive>
 80060d6:	bf00      	nop
 80060d8:	200004e0 	.word	0x200004e0

080060dc <__ssputs_r>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	688e      	ldr	r6, [r1, #8]
 80060e2:	461f      	mov	r7, r3
 80060e4:	42be      	cmp	r6, r7
 80060e6:	680b      	ldr	r3, [r1, #0]
 80060e8:	4682      	mov	sl, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	4690      	mov	r8, r2
 80060ee:	d82d      	bhi.n	800614c <__ssputs_r+0x70>
 80060f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060f8:	d026      	beq.n	8006148 <__ssputs_r+0x6c>
 80060fa:	6965      	ldr	r5, [r4, #20]
 80060fc:	6909      	ldr	r1, [r1, #16]
 80060fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006102:	eba3 0901 	sub.w	r9, r3, r1
 8006106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800610a:	1c7b      	adds	r3, r7, #1
 800610c:	444b      	add	r3, r9
 800610e:	106d      	asrs	r5, r5, #1
 8006110:	429d      	cmp	r5, r3
 8006112:	bf38      	it	cc
 8006114:	461d      	movcc	r5, r3
 8006116:	0553      	lsls	r3, r2, #21
 8006118:	d527      	bpl.n	800616a <__ssputs_r+0x8e>
 800611a:	4629      	mov	r1, r5
 800611c:	f7ff ff52 	bl	8005fc4 <_malloc_r>
 8006120:	4606      	mov	r6, r0
 8006122:	b360      	cbz	r0, 800617e <__ssputs_r+0xa2>
 8006124:	6921      	ldr	r1, [r4, #16]
 8006126:	464a      	mov	r2, r9
 8006128:	f7ff fed2 	bl	8005ed0 <memcpy>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	6126      	str	r6, [r4, #16]
 800613a:	6165      	str	r5, [r4, #20]
 800613c:	444e      	add	r6, r9
 800613e:	eba5 0509 	sub.w	r5, r5, r9
 8006142:	6026      	str	r6, [r4, #0]
 8006144:	60a5      	str	r5, [r4, #8]
 8006146:	463e      	mov	r6, r7
 8006148:	42be      	cmp	r6, r7
 800614a:	d900      	bls.n	800614e <__ssputs_r+0x72>
 800614c:	463e      	mov	r6, r7
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	4632      	mov	r2, r6
 8006152:	4641      	mov	r1, r8
 8006154:	f000 faa6 	bl	80066a4 <memmove>
 8006158:	68a3      	ldr	r3, [r4, #8]
 800615a:	1b9b      	subs	r3, r3, r6
 800615c:	60a3      	str	r3, [r4, #8]
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	4433      	add	r3, r6
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	2000      	movs	r0, #0
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	462a      	mov	r2, r5
 800616c:	f000 fac4 	bl	80066f8 <_realloc_r>
 8006170:	4606      	mov	r6, r0
 8006172:	2800      	cmp	r0, #0
 8006174:	d1e0      	bne.n	8006138 <__ssputs_r+0x5c>
 8006176:	6921      	ldr	r1, [r4, #16]
 8006178:	4650      	mov	r0, sl
 800617a:	f7ff feb7 	bl	8005eec <_free_r>
 800617e:	230c      	movs	r3, #12
 8006180:	f8ca 3000 	str.w	r3, [sl]
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800618a:	81a3      	strh	r3, [r4, #12]
 800618c:	f04f 30ff 	mov.w	r0, #4294967295
 8006190:	e7e9      	b.n	8006166 <__ssputs_r+0x8a>
	...

08006194 <_svfiprintf_r>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	4698      	mov	r8, r3
 800619a:	898b      	ldrh	r3, [r1, #12]
 800619c:	061b      	lsls	r3, r3, #24
 800619e:	b09d      	sub	sp, #116	@ 0x74
 80061a0:	4607      	mov	r7, r0
 80061a2:	460d      	mov	r5, r1
 80061a4:	4614      	mov	r4, r2
 80061a6:	d510      	bpl.n	80061ca <_svfiprintf_r+0x36>
 80061a8:	690b      	ldr	r3, [r1, #16]
 80061aa:	b973      	cbnz	r3, 80061ca <_svfiprintf_r+0x36>
 80061ac:	2140      	movs	r1, #64	@ 0x40
 80061ae:	f7ff ff09 	bl	8005fc4 <_malloc_r>
 80061b2:	6028      	str	r0, [r5, #0]
 80061b4:	6128      	str	r0, [r5, #16]
 80061b6:	b930      	cbnz	r0, 80061c6 <_svfiprintf_r+0x32>
 80061b8:	230c      	movs	r3, #12
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b01d      	add	sp, #116	@ 0x74
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	2340      	movs	r3, #64	@ 0x40
 80061c8:	616b      	str	r3, [r5, #20]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ce:	2320      	movs	r3, #32
 80061d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d8:	2330      	movs	r3, #48	@ 0x30
 80061da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006378 <_svfiprintf_r+0x1e4>
 80061de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061e2:	f04f 0901 	mov.w	r9, #1
 80061e6:	4623      	mov	r3, r4
 80061e8:	469a      	mov	sl, r3
 80061ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ee:	b10a      	cbz	r2, 80061f4 <_svfiprintf_r+0x60>
 80061f0:	2a25      	cmp	r2, #37	@ 0x25
 80061f2:	d1f9      	bne.n	80061e8 <_svfiprintf_r+0x54>
 80061f4:	ebba 0b04 	subs.w	fp, sl, r4
 80061f8:	d00b      	beq.n	8006212 <_svfiprintf_r+0x7e>
 80061fa:	465b      	mov	r3, fp
 80061fc:	4622      	mov	r2, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff ff6b 	bl	80060dc <__ssputs_r>
 8006206:	3001      	adds	r0, #1
 8006208:	f000 80a7 	beq.w	800635a <_svfiprintf_r+0x1c6>
 800620c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800620e:	445a      	add	r2, fp
 8006210:	9209      	str	r2, [sp, #36]	@ 0x24
 8006212:	f89a 3000 	ldrb.w	r3, [sl]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 809f 	beq.w	800635a <_svfiprintf_r+0x1c6>
 800621c:	2300      	movs	r3, #0
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006226:	f10a 0a01 	add.w	sl, sl, #1
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006232:	931a      	str	r3, [sp, #104]	@ 0x68
 8006234:	4654      	mov	r4, sl
 8006236:	2205      	movs	r2, #5
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	484e      	ldr	r0, [pc, #312]	@ (8006378 <_svfiprintf_r+0x1e4>)
 800623e:	f7f9 ffcf 	bl	80001e0 <memchr>
 8006242:	9a04      	ldr	r2, [sp, #16]
 8006244:	b9d8      	cbnz	r0, 800627e <_svfiprintf_r+0xea>
 8006246:	06d0      	lsls	r0, r2, #27
 8006248:	bf44      	itt	mi
 800624a:	2320      	movmi	r3, #32
 800624c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006250:	0711      	lsls	r1, r2, #28
 8006252:	bf44      	itt	mi
 8006254:	232b      	movmi	r3, #43	@ 0x2b
 8006256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006260:	d015      	beq.n	800628e <_svfiprintf_r+0xfa>
 8006262:	9a07      	ldr	r2, [sp, #28]
 8006264:	4654      	mov	r4, sl
 8006266:	2000      	movs	r0, #0
 8006268:	f04f 0c0a 	mov.w	ip, #10
 800626c:	4621      	mov	r1, r4
 800626e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006272:	3b30      	subs	r3, #48	@ 0x30
 8006274:	2b09      	cmp	r3, #9
 8006276:	d94b      	bls.n	8006310 <_svfiprintf_r+0x17c>
 8006278:	b1b0      	cbz	r0, 80062a8 <_svfiprintf_r+0x114>
 800627a:	9207      	str	r2, [sp, #28]
 800627c:	e014      	b.n	80062a8 <_svfiprintf_r+0x114>
 800627e:	eba0 0308 	sub.w	r3, r0, r8
 8006282:	fa09 f303 	lsl.w	r3, r9, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	46a2      	mov	sl, r4
 800628c:	e7d2      	b.n	8006234 <_svfiprintf_r+0xa0>
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	9103      	str	r1, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfbb      	ittet	lt
 800629a:	425b      	neglt	r3, r3
 800629c:	f042 0202 	orrlt.w	r2, r2, #2
 80062a0:	9307      	strge	r3, [sp, #28]
 80062a2:	9307      	strlt	r3, [sp, #28]
 80062a4:	bfb8      	it	lt
 80062a6:	9204      	strlt	r2, [sp, #16]
 80062a8:	7823      	ldrb	r3, [r4, #0]
 80062aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ac:	d10a      	bne.n	80062c4 <_svfiprintf_r+0x130>
 80062ae:	7863      	ldrb	r3, [r4, #1]
 80062b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062b2:	d132      	bne.n	800631a <_svfiprintf_r+0x186>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	9203      	str	r2, [sp, #12]
 80062bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062c0:	3402      	adds	r4, #2
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006388 <_svfiprintf_r+0x1f4>
 80062c8:	7821      	ldrb	r1, [r4, #0]
 80062ca:	2203      	movs	r2, #3
 80062cc:	4650      	mov	r0, sl
 80062ce:	f7f9 ff87 	bl	80001e0 <memchr>
 80062d2:	b138      	cbz	r0, 80062e4 <_svfiprintf_r+0x150>
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	eba0 000a 	sub.w	r0, r0, sl
 80062da:	2240      	movs	r2, #64	@ 0x40
 80062dc:	4082      	lsls	r2, r0
 80062de:	4313      	orrs	r3, r2
 80062e0:	3401      	adds	r4, #1
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e8:	4824      	ldr	r0, [pc, #144]	@ (800637c <_svfiprintf_r+0x1e8>)
 80062ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ee:	2206      	movs	r2, #6
 80062f0:	f7f9 ff76 	bl	80001e0 <memchr>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d036      	beq.n	8006366 <_svfiprintf_r+0x1d2>
 80062f8:	4b21      	ldr	r3, [pc, #132]	@ (8006380 <_svfiprintf_r+0x1ec>)
 80062fa:	bb1b      	cbnz	r3, 8006344 <_svfiprintf_r+0x1b0>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	3307      	adds	r3, #7
 8006300:	f023 0307 	bic.w	r3, r3, #7
 8006304:	3308      	adds	r3, #8
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630a:	4433      	add	r3, r6
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	e76a      	b.n	80061e6 <_svfiprintf_r+0x52>
 8006310:	fb0c 3202 	mla	r2, ip, r2, r3
 8006314:	460c      	mov	r4, r1
 8006316:	2001      	movs	r0, #1
 8006318:	e7a8      	b.n	800626c <_svfiprintf_r+0xd8>
 800631a:	2300      	movs	r3, #0
 800631c:	3401      	adds	r4, #1
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	4619      	mov	r1, r3
 8006322:	f04f 0c0a 	mov.w	ip, #10
 8006326:	4620      	mov	r0, r4
 8006328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800632c:	3a30      	subs	r2, #48	@ 0x30
 800632e:	2a09      	cmp	r2, #9
 8006330:	d903      	bls.n	800633a <_svfiprintf_r+0x1a6>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c6      	beq.n	80062c4 <_svfiprintf_r+0x130>
 8006336:	9105      	str	r1, [sp, #20]
 8006338:	e7c4      	b.n	80062c4 <_svfiprintf_r+0x130>
 800633a:	fb0c 2101 	mla	r1, ip, r1, r2
 800633e:	4604      	mov	r4, r0
 8006340:	2301      	movs	r3, #1
 8006342:	e7f0      	b.n	8006326 <_svfiprintf_r+0x192>
 8006344:	ab03      	add	r3, sp, #12
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	462a      	mov	r2, r5
 800634a:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <_svfiprintf_r+0x1f0>)
 800634c:	a904      	add	r1, sp, #16
 800634e:	4638      	mov	r0, r7
 8006350:	f3af 8000 	nop.w
 8006354:	1c42      	adds	r2, r0, #1
 8006356:	4606      	mov	r6, r0
 8006358:	d1d6      	bne.n	8006308 <_svfiprintf_r+0x174>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	065b      	lsls	r3, r3, #25
 800635e:	f53f af2d 	bmi.w	80061bc <_svfiprintf_r+0x28>
 8006362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006364:	e72c      	b.n	80061c0 <_svfiprintf_r+0x2c>
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	462a      	mov	r2, r5
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <_svfiprintf_r+0x1f0>)
 800636e:	a904      	add	r1, sp, #16
 8006370:	4638      	mov	r0, r7
 8006372:	f000 f879 	bl	8006468 <_printf_i>
 8006376:	e7ed      	b.n	8006354 <_svfiprintf_r+0x1c0>
 8006378:	08006880 	.word	0x08006880
 800637c:	0800688a 	.word	0x0800688a
 8006380:	00000000 	.word	0x00000000
 8006384:	080060dd 	.word	0x080060dd
 8006388:	08006886 	.word	0x08006886

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4698      	mov	r8, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	3b00      	subs	r3, #0
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063e8:	4641      	mov	r1, r8
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c8      	blx	r9
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf02      	ittt	eq
 80063fe:	68e5      	ldreq	r5, [r4, #12]
 8006400:	6833      	ldreq	r3, [r6, #0]
 8006402:	1aed      	subeq	r5, r5, r3
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4641      	mov	r1, r8
 8006428:	4638      	mov	r0, r7
 800642a:	47c8      	blx	r9
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	@ 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4641      	mov	r1, r8
 800645a:	4638      	mov	r0, r7
 800645c:	47c8      	blx	r9
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006470:	2f78      	cmp	r7, #120	@ 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	@ 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d1 	beq.w	800662c <_printf_i+0x1c4>
 800648a:	2f58      	cmp	r7, #88	@ 0x58
 800648c:	f000 80b8 	beq.w	8006600 <_printf_i+0x198>
 8006490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	@ (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006613 	.word	0x08006613
 80064d8:	0800653f 	.word	0x0800653f
 80064dc:	080065cd 	.word	0x080065cd
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006635 	.word	0x08006635
 80064ec:	08006491 	.word	0x08006491
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065d5 	.word	0x080065d5
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6032      	str	r2, [r6, #0]
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e09c      	b.n	800664e <_printf_i+0x1e6>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6031      	str	r1, [r6, #0]
 800651c:	0606      	lsls	r6, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xbc>
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	e003      	b.n	800652c <_printf_i+0xc4>
 8006524:	0645      	lsls	r5, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xb8>
 8006528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800652c:	2d00      	cmp	r5, #0
 800652e:	da03      	bge.n	8006538 <_printf_i+0xd0>
 8006530:	232d      	movs	r3, #45	@ 0x2d
 8006532:	426d      	negs	r5, r5
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	4858      	ldr	r0, [pc, #352]	@ (800669c <_printf_i+0x234>)
 800653a:	230a      	movs	r3, #10
 800653c:	e011      	b.n	8006562 <_printf_i+0xfa>
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	0608      	lsls	r0, r1, #24
 8006544:	f853 5b04 	ldr.w	r5, [r3], #4
 8006548:	d402      	bmi.n	8006550 <_printf_i+0xe8>
 800654a:	0649      	lsls	r1, r1, #25
 800654c:	bf48      	it	mi
 800654e:	b2ad      	uxthmi	r5, r5
 8006550:	2f6f      	cmp	r7, #111	@ 0x6f
 8006552:	4852      	ldr	r0, [pc, #328]	@ (800669c <_printf_i+0x234>)
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	bf14      	ite	ne
 8006558:	230a      	movne	r3, #10
 800655a:	2308      	moveq	r3, #8
 800655c:	2100      	movs	r1, #0
 800655e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	60a6      	str	r6, [r4, #8]
 8006566:	2e00      	cmp	r6, #0
 8006568:	db05      	blt.n	8006576 <_printf_i+0x10e>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	432e      	orrs	r6, r5
 800656e:	f021 0104 	bic.w	r1, r1, #4
 8006572:	6021      	str	r1, [r4, #0]
 8006574:	d04b      	beq.n	800660e <_printf_i+0x1a6>
 8006576:	4616      	mov	r6, r2
 8006578:	fbb5 f1f3 	udiv	r1, r5, r3
 800657c:	fb03 5711 	mls	r7, r3, r1, r5
 8006580:	5dc7      	ldrb	r7, [r0, r7]
 8006582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006586:	462f      	mov	r7, r5
 8006588:	42bb      	cmp	r3, r7
 800658a:	460d      	mov	r5, r1
 800658c:	d9f4      	bls.n	8006578 <_printf_i+0x110>
 800658e:	2b08      	cmp	r3, #8
 8006590:	d10b      	bne.n	80065aa <_printf_i+0x142>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	07df      	lsls	r7, r3, #31
 8006596:	d508      	bpl.n	80065aa <_printf_i+0x142>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	6861      	ldr	r1, [r4, #4]
 800659c:	4299      	cmp	r1, r3
 800659e:	bfde      	ittt	le
 80065a0:	2330      	movle	r3, #48	@ 0x30
 80065a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065aa:	1b92      	subs	r2, r2, r6
 80065ac:	6122      	str	r2, [r4, #16]
 80065ae:	f8cd a000 	str.w	sl, [sp]
 80065b2:	464b      	mov	r3, r9
 80065b4:	aa03      	add	r2, sp, #12
 80065b6:	4621      	mov	r1, r4
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7ff fee7 	bl	800638c <_printf_common>
 80065be:	3001      	adds	r0, #1
 80065c0:	d14a      	bne.n	8006658 <_printf_i+0x1f0>
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	b004      	add	sp, #16
 80065c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	f043 0320 	orr.w	r3, r3, #32
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	4832      	ldr	r0, [pc, #200]	@ (80066a0 <_printf_i+0x238>)
 80065d6:	2778      	movs	r7, #120	@ 0x78
 80065d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	6831      	ldr	r1, [r6, #0]
 80065e0:	061f      	lsls	r7, r3, #24
 80065e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80065e6:	d402      	bmi.n	80065ee <_printf_i+0x186>
 80065e8:	065f      	lsls	r7, r3, #25
 80065ea:	bf48      	it	mi
 80065ec:	b2ad      	uxthmi	r5, r5
 80065ee:	6031      	str	r1, [r6, #0]
 80065f0:	07d9      	lsls	r1, r3, #31
 80065f2:	bf44      	itt	mi
 80065f4:	f043 0320 	orrmi.w	r3, r3, #32
 80065f8:	6023      	strmi	r3, [r4, #0]
 80065fa:	b11d      	cbz	r5, 8006604 <_printf_i+0x19c>
 80065fc:	2310      	movs	r3, #16
 80065fe:	e7ad      	b.n	800655c <_printf_i+0xf4>
 8006600:	4826      	ldr	r0, [pc, #152]	@ (800669c <_printf_i+0x234>)
 8006602:	e7e9      	b.n	80065d8 <_printf_i+0x170>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	e7f6      	b.n	80065fc <_printf_i+0x194>
 800660e:	4616      	mov	r6, r2
 8006610:	e7bd      	b.n	800658e <_printf_i+0x126>
 8006612:	6833      	ldr	r3, [r6, #0]
 8006614:	6825      	ldr	r5, [r4, #0]
 8006616:	6961      	ldr	r1, [r4, #20]
 8006618:	1d18      	adds	r0, r3, #4
 800661a:	6030      	str	r0, [r6, #0]
 800661c:	062e      	lsls	r6, r5, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	d501      	bpl.n	8006626 <_printf_i+0x1be>
 8006622:	6019      	str	r1, [r3, #0]
 8006624:	e002      	b.n	800662c <_printf_i+0x1c4>
 8006626:	0668      	lsls	r0, r5, #25
 8006628:	d5fb      	bpl.n	8006622 <_printf_i+0x1ba>
 800662a:	8019      	strh	r1, [r3, #0]
 800662c:	2300      	movs	r3, #0
 800662e:	6123      	str	r3, [r4, #16]
 8006630:	4616      	mov	r6, r2
 8006632:	e7bc      	b.n	80065ae <_printf_i+0x146>
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	6032      	str	r2, [r6, #0]
 800663a:	681e      	ldr	r6, [r3, #0]
 800663c:	6862      	ldr	r2, [r4, #4]
 800663e:	2100      	movs	r1, #0
 8006640:	4630      	mov	r0, r6
 8006642:	f7f9 fdcd 	bl	80001e0 <memchr>
 8006646:	b108      	cbz	r0, 800664c <_printf_i+0x1e4>
 8006648:	1b80      	subs	r0, r0, r6
 800664a:	6060      	str	r0, [r4, #4]
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	2300      	movs	r3, #0
 8006652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006656:	e7aa      	b.n	80065ae <_printf_i+0x146>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	4632      	mov	r2, r6
 800665c:	4649      	mov	r1, r9
 800665e:	4640      	mov	r0, r8
 8006660:	47d0      	blx	sl
 8006662:	3001      	adds	r0, #1
 8006664:	d0ad      	beq.n	80065c2 <_printf_i+0x15a>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	079b      	lsls	r3, r3, #30
 800666a:	d413      	bmi.n	8006694 <_printf_i+0x22c>
 800666c:	68e0      	ldr	r0, [r4, #12]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	4298      	cmp	r0, r3
 8006672:	bfb8      	it	lt
 8006674:	4618      	movlt	r0, r3
 8006676:	e7a6      	b.n	80065c6 <_printf_i+0x15e>
 8006678:	2301      	movs	r3, #1
 800667a:	4632      	mov	r2, r6
 800667c:	4649      	mov	r1, r9
 800667e:	4640      	mov	r0, r8
 8006680:	47d0      	blx	sl
 8006682:	3001      	adds	r0, #1
 8006684:	d09d      	beq.n	80065c2 <_printf_i+0x15a>
 8006686:	3501      	adds	r5, #1
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	9903      	ldr	r1, [sp, #12]
 800668c:	1a5b      	subs	r3, r3, r1
 800668e:	42ab      	cmp	r3, r5
 8006690:	dcf2      	bgt.n	8006678 <_printf_i+0x210>
 8006692:	e7eb      	b.n	800666c <_printf_i+0x204>
 8006694:	2500      	movs	r5, #0
 8006696:	f104 0619 	add.w	r6, r4, #25
 800669a:	e7f5      	b.n	8006688 <_printf_i+0x220>
 800669c:	08006891 	.word	0x08006891
 80066a0:	080068a2 	.word	0x080068a2

080066a4 <memmove>:
 80066a4:	4288      	cmp	r0, r1
 80066a6:	b510      	push	{r4, lr}
 80066a8:	eb01 0402 	add.w	r4, r1, r2
 80066ac:	d902      	bls.n	80066b4 <memmove+0x10>
 80066ae:	4284      	cmp	r4, r0
 80066b0:	4623      	mov	r3, r4
 80066b2:	d807      	bhi.n	80066c4 <memmove+0x20>
 80066b4:	1e43      	subs	r3, r0, #1
 80066b6:	42a1      	cmp	r1, r4
 80066b8:	d008      	beq.n	80066cc <memmove+0x28>
 80066ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066c2:	e7f8      	b.n	80066b6 <memmove+0x12>
 80066c4:	4402      	add	r2, r0
 80066c6:	4601      	mov	r1, r0
 80066c8:	428a      	cmp	r2, r1
 80066ca:	d100      	bne.n	80066ce <memmove+0x2a>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066d6:	e7f7      	b.n	80066c8 <memmove+0x24>

080066d8 <_sbrk_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d06      	ldr	r5, [pc, #24]	@ (80066f4 <_sbrk_r+0x1c>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa f974 	bl	80009d0 <_sbrk>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_sbrk_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_sbrk_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	200004dc 	.word	0x200004dc

080066f8 <_realloc_r>:
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	4607      	mov	r7, r0
 80066fe:	4614      	mov	r4, r2
 8006700:	460d      	mov	r5, r1
 8006702:	b921      	cbnz	r1, 800670e <_realloc_r+0x16>
 8006704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006708:	4611      	mov	r1, r2
 800670a:	f7ff bc5b 	b.w	8005fc4 <_malloc_r>
 800670e:	b92a      	cbnz	r2, 800671c <_realloc_r+0x24>
 8006710:	f7ff fbec 	bl	8005eec <_free_r>
 8006714:	4625      	mov	r5, r4
 8006716:	4628      	mov	r0, r5
 8006718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671c:	f000 f81a 	bl	8006754 <_malloc_usable_size_r>
 8006720:	4284      	cmp	r4, r0
 8006722:	4606      	mov	r6, r0
 8006724:	d802      	bhi.n	800672c <_realloc_r+0x34>
 8006726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800672a:	d8f4      	bhi.n	8006716 <_realloc_r+0x1e>
 800672c:	4621      	mov	r1, r4
 800672e:	4638      	mov	r0, r7
 8006730:	f7ff fc48 	bl	8005fc4 <_malloc_r>
 8006734:	4680      	mov	r8, r0
 8006736:	b908      	cbnz	r0, 800673c <_realloc_r+0x44>
 8006738:	4645      	mov	r5, r8
 800673a:	e7ec      	b.n	8006716 <_realloc_r+0x1e>
 800673c:	42b4      	cmp	r4, r6
 800673e:	4622      	mov	r2, r4
 8006740:	4629      	mov	r1, r5
 8006742:	bf28      	it	cs
 8006744:	4632      	movcs	r2, r6
 8006746:	f7ff fbc3 	bl	8005ed0 <memcpy>
 800674a:	4629      	mov	r1, r5
 800674c:	4638      	mov	r0, r7
 800674e:	f7ff fbcd 	bl	8005eec <_free_r>
 8006752:	e7f1      	b.n	8006738 <_realloc_r+0x40>

08006754 <_malloc_usable_size_r>:
 8006754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006758:	1f18      	subs	r0, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfbc      	itt	lt
 800675e:	580b      	ldrlt	r3, [r1, r0]
 8006760:	18c0      	addlt	r0, r0, r3
 8006762:	4770      	bx	lr

08006764 <_init>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr

08006770 <_fini>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	bf00      	nop
 8006774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006776:	bc08      	pop	{r3}
 8006778:	469e      	mov	lr, r3
 800677a:	4770      	bx	lr
